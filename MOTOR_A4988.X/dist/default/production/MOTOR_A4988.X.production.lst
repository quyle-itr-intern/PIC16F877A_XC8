

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Apr 22 10:32:31 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.32
    19                           ; Generated 02/02/2021 GMT
    20                           ; 
    21                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  000E                     	;# 
   129  000F                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  0088                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173  0008                     _PORTDbits	set	8
   174  000B                     _INTCONbits	set	11
   175  0001                     _TMR0	set	1
   176  0006                     _PORTBbits	set	6
   177  0081                     _OPTION_REGbits	set	129
   178  0086                     _TRISBbits	set	134
   179                           
   180                           	psect	cinit
   181  000F                     start_initialization:	
   182                           ; #config settings
   183                           
   184  000F                     __initialization:
   185                           
   186                           ; Clear objects allocated to COMMON
   187  000F  01F9               	clrf	__pbssCOMMON& (0+127)
   188  0010  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   189                           
   190                           ; Clear objects allocated to BANK0
   191  0011  1283               	bcf	3,5	;RP0=0, select bank0
   192  0012  1303               	bcf	3,6	;RP1=0, select bank0
   193  0013  01AA               	clrf	__pbssBANK0& (0+127)
   194  0014  01AB               	clrf	(__pbssBANK0+1)& (0+127)
   195  0015  01AC               	clrf	(__pbssBANK0+2)& (0+127)
   196  0016  01AD               	clrf	(__pbssBANK0+3)& (0+127)
   197  0017                     end_of_initialization:	
   198                           ;End of C runtime variable initialization code
   199                           
   200  0017                     __end_of__initialization:
   201  0017  0183               	clrf	3
   202  0018  120A  118A  2884   	ljmp	_main	;jump to C main() function
   203                           
   204                           	psect	bssCOMMON
   205  0079                     __pbssCOMMON:
   206  0079                     _u16Count_timer0:
   207  0079                     	ds	2
   208                           
   209                           	psect	bssBANK0
   210  002A                     __pbssBANK0:
   211  002A                     _u16Count_BOT:
   212  002A                     	ds	2
   213  002C                     _u16Count_TOP:
   214  002C                     	ds	2
   215                           
   216                           	psect	cstackCOMMON
   217  0070                     __pcstackCOMMON:
   218  0070                     ?_main:
   219  0070                     ?_ISR:	
   220                           ; 1 bytes @ 0x0
   221                           
   222  0070                     ??_ISR:	
   223                           ; 1 bytes @ 0x0
   224                           
   225                           
   226                           ; 1 bytes @ 0x0
   227  0070                     	ds	2
   228  0072                     ?_Reverse_Motor:
   229  0072                     ?___awdiv:	
   230                           ; 1 bytes @ 0x2
   231                           
   232  0072                     Reverse_Motor@i:	
   233                           ; 2 bytes @ 0x2
   234                           
   235  0072                     ___awdiv@divisor:	
   236                           ; 2 bytes @ 0x2
   237                           
   238                           
   239                           ; 2 bytes @ 0x2
   240  0072                     	ds	2
   241  0074                     ??_Reverse_Motor:
   242  0074                     ___awdiv@dividend:	
   243                           ; 1 bytes @ 0x4
   244                           
   245                           
   246                           ; 2 bytes @ 0x4
   247  0074                     	ds	2
   248  0076                     ??___awdiv:
   249                           
   250                           ; 1 bytes @ 0x6
   251  0076                     	ds	1
   252  0077                     ??_Speed_M:
   253                           
   254                           ; 1 bytes @ 0x7
   255  0077                     	ds	2
   256                           
   257                           	psect	cstackBANK0
   258  0020                     __pcstackBANK0:
   259  0020                     ___awdiv@counter:
   260                           
   261                           ; 1 bytes @ 0x0
   262  0020                     	ds	1
   263  0021                     ___awdiv@sign:
   264                           
   265                           ; 1 bytes @ 0x1
   266  0021                     	ds	1
   267  0022                     ___awdiv@quotient:
   268                           
   269                           ; 2 bytes @ 0x2
   270  0022                     	ds	2
   271  0024                     ?_Speed_M:
   272  0024                     Speed_M@x:	
   273                           ; 1 bytes @ 0x4
   274                           
   275                           
   276                           ; 2 bytes @ 0x4
   277  0024                     	ds	2
   278  0026                     ??_main:
   279                           
   280                           ; 1 bytes @ 0x6
   281  0026                     	ds	2
   282  0028                     main@count:
   283                           
   284                           ; 2 bytes @ 0x8
   285  0028                     	ds	2
   286                           
   287                           	psect	maintext
   288  0084                     __pmaintext:	
   289 ;;
   290 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   291 ;;
   292 ;; *************** function _main *****************
   293 ;; Defined at:
   294 ;;		line 77 in file "newmain.c"
   295 ;; Parameters:    Size  Location     Type
   296 ;;		None
   297 ;; Auto vars:     Size  Location     Type
   298 ;;  count           2    8[BANK0 ] unsigned int 
   299 ;; Return value:  Size  Location     Type
   300 ;;                  1    wreg      void 
   301 ;; Registers used:
   302 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   303 ;; Tracked objects:
   304 ;;		On entry : B00/0
   305 ;;		On exit  : 0/0
   306 ;;		Unchanged: 0/0
   307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   308 ;;      Params:         0       0       0       0       0
   309 ;;      Locals:         0       2       0       0       0
   310 ;;      Temps:          0       2       0       0       0
   311 ;;      Totals:         0       4       0       0       0
   312 ;;Total ram usage:        4 bytes
   313 ;; Hardware stack levels required when called: 3
   314 ;; This function calls:
   315 ;;		_Reverse_Motor
   316 ;;		_Speed_M
   317 ;; This function is called by:
   318 ;;		Startup code after reset
   319 ;; This function uses a non-reentrant model
   320 ;;
   321                           
   322                           
   323                           ;psect for function _main
   324  0084                     _main:
   325  0084                     l959:	
   326                           ;incstack = 0
   327                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   328                           
   329                           
   330                           ;newmain.c: 79:     uint16_t count = 0;
   331  0084  1283               	bcf	3,5	;RP0=0, select bank0
   332  0085  1303               	bcf	3,6	;RP1=0, select bank0
   333  0086  01A8               	clrf	main@count
   334  0087  01A9               	clrf	main@count+1
   335  0088                     l961:
   336                           
   337                           ;newmain.c: 81:     TRISBbits.TRISB0 = 0;
   338  0088  1683               	bsf	3,5	;RP0=1, select bank1
   339  0089  1303               	bcf	3,6	;RP1=0, select bank1
   340  008A  1006               	bcf	6,0	;volatile
   341  008B                     l963:
   342                           
   343                           ;newmain.c: 82:     TRISBbits.TRISB1 = 0;
   344  008B  1086               	bcf	6,1	;volatile
   345  008C                     l965:
   346                           
   347                           ;newmain.c: 83:     TRISBbits.TRISB2 = 0;
   348  008C  1106               	bcf	6,2	;volatile
   349  008D                     l967:
   350                           
   351                           ;newmain.c: 85:     TRISBbits.TRISB3 = 0;
   352  008D  1186               	bcf	6,3	;volatile
   353  008E                     l969:
   354                           
   355                           ;newmain.c: 86:     TRISBbits.TRISB4 = 0;
   356  008E  1206               	bcf	6,4	;volatile
   357  008F                     l971:
   358                           
   359                           ;newmain.c: 87:     TRISBbits.TRISB5 = 0;
   360  008F  1286               	bcf	6,5	;volatile
   361  0090                     l973:
   362                           
   363                           ;newmain.c: 89:     PORTBbits.RB3 = 1;
   364  0090  1283               	bcf	3,5	;RP0=0, select bank0
   365  0091  1303               	bcf	3,6	;RP1=0, select bank0
   366  0092  1586               	bsf	6,3	;volatile
   367  0093                     l975:
   368                           
   369                           ;newmain.c: 90:     PORTBbits.RB4 = 1;
   370  0093  1606               	bsf	6,4	;volatile
   371  0094                     l977:
   372                           
   373                           ;newmain.c: 91:     PORTBbits.RB5 = 1;
   374  0094  1686               	bsf	6,5	;volatile
   375  0095                     l979:
   376                           
   377                           ;newmain.c: 93:     PORTBbits.RB0 = 0;
   378  0095  1006               	bcf	6,0	;volatile
   379  0096                     l981:
   380                           
   381                           ;newmain.c: 95:     OPTION_REGbits.T0CS = 0;
   382  0096  1683               	bsf	3,5	;RP0=1, select bank1
   383  0097  1303               	bcf	3,6	;RP1=0, select bank1
   384  0098  1281               	bcf	1,5	;volatile
   385  0099                     l983:
   386                           
   387                           ;newmain.c: 96:     OPTION_REGbits.PSA = 0;
   388  0099  1181               	bcf	1,3	;volatile
   389  009A                     l985:
   390                           
   391                           ;newmain.c: 97:     OPTION_REGbits.PS2 = 0;
   392  009A  1101               	bcf	1,2	;volatile
   393  009B                     l987:
   394                           
   395                           ;newmain.c: 98:     OPTION_REGbits.PS1 = 0;
   396  009B  1081               	bcf	1,1	;volatile
   397  009C                     l989:
   398                           
   399                           ;newmain.c: 99:     OPTION_REGbits.PS0 = 0;
   400  009C  1001               	bcf	1,0	;volatile
   401  009D                     l991:
   402                           
   403                           ;newmain.c: 101:     TMR0 = 217;
   404  009D  30D9               	movlw	217
   405  009E  1283               	bcf	3,5	;RP0=0, select bank0
   406  009F  1303               	bcf	3,6	;RP1=0, select bank0
   407  00A0  0081               	movwf	1	;volatile
   408  00A1                     l993:
   409                           
   410                           ;newmain.c: 102:     INTCONbits.TMR0IF = 0;
   411  00A1  110B               	bcf	11,2	;volatile
   412  00A2                     l995:
   413                           
   414                           ;newmain.c: 103:     INTCONbits.TMR0IE = 1;
   415  00A2  168B               	bsf	11,5	;volatile
   416  00A3                     l997:
   417                           
   418                           ;newmain.c: 104:     INTCONbits.GIE = 1;
   419  00A3  178B               	bsf	11,7	;volatile
   420  00A4                     l999:
   421                           
   422                           ;newmain.c: 106:     Speed_M(400);
   423  00A4  3090               	movlw	144
   424  00A5  00A4               	movwf	Speed_M@x
   425  00A6  3001               	movlw	1
   426  00A7  00A5               	movwf	Speed_M@x+1
   427  00A8  120A  118A  20D6  120A  118A  	fcall	_Speed_M
   428  00AD                     l1001:
   429                           
   430                           ;newmain.c: 109:     {;newmain.c: 110:         if(0 == PORTDbits.RD0)
   431  00AD  1283               	bcf	3,5	;RP0=0, select bank0
   432  00AE  1303               	bcf	3,6	;RP1=0, select bank0
   433  00AF  1808               	btfsc	8,0	;volatile
   434  00B0  28B2               	goto	u491
   435  00B1  28B3               	goto	u490
   436  00B2                     u491:
   437  00B2  28AD               	goto	l1001
   438  00B3                     u490:
   439  00B3                     l1003:
   440                           
   441                           ;newmain.c: 111:         {;newmain.c: 112:             count++;
   442  00B3  3001               	movlw	1
   443  00B4  07A8               	addwf	main@count,f
   444  00B5  1803               	skipnc
   445  00B6  0AA9               	incf	main@count+1,f
   446  00B7  3000               	movlw	0
   447  00B8  07A9               	addwf	main@count+1,f
   448                           
   449                           ;newmain.c: 113:             _delay((unsigned long)((20)*(20000000/4000.0)));
   450  00B9  3082               	movlw	130
   451  00BA  1283               	bcf	3,5	;RP0=0, select bank0
   452  00BB  1303               	bcf	3,6	;RP1=0, select bank0
   453  00BC  00A7               	movwf	??_main+1
   454  00BD  30DD               	movlw	221
   455  00BE  00A6               	movwf	??_main
   456  00BF                     u517:
   457  00BF  0BA6               	decfsz	??_main,f
   458  00C0  28BF               	goto	u517
   459  00C1  0BA7               	decfsz	??_main+1,f
   460  00C2  28BF               	goto	u517
   461  00C3                     l39:	
   462                           ;newmain.c: 114:             while(!PORTDbits.RD0);
   463                           
   464  00C3  1283               	bcf	3,5	;RP0=0, select bank0
   465  00C4  1303               	bcf	3,6	;RP1=0, select bank0
   466  00C5  1C08               	btfss	8,0	;volatile
   467  00C6  28C8               	goto	u501
   468  00C7  28C9               	goto	u500
   469  00C8                     u501:
   470  00C8  28C3               	goto	l39
   471  00C9                     u500:
   472  00C9                     l1005:
   473                           
   474                           ;newmain.c: 115:             Reverse_Motor(count);
   475  00C9  0829               	movf	main@count+1,w
   476  00CA  00F3               	movwf	Reverse_Motor@i+1
   477  00CB  0828               	movf	main@count,w
   478  00CC  00F2               	movwf	Reverse_Motor@i
   479  00CD  120A  118A  2152  120A  118A  	fcall	_Reverse_Motor
   480  00D2  28AD               	goto	l1001
   481  00D3  120A  118A  280C   	ljmp	start
   482  00D6                     __end_of_main:
   483                           
   484                           	psect	text1
   485  00D6                     __ptext1:	
   486 ;; *************** function _Speed_M *****************
   487 ;; Defined at:
   488 ;;		line 48 in file "newmain.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;  x               2    4[BANK0 ] int 
   491 ;; Auto vars:     Size  Location     Type
   492 ;;		None
   493 ;; Return value:  Size  Location     Type
   494 ;;                  1    wreg      void 
   495 ;; Registers used:
   496 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   502 ;;      Params:         0       2       0       0       0
   503 ;;      Locals:         0       0       0       0       0
   504 ;;      Temps:          2       0       0       0       0
   505 ;;      Totals:         2       2       0       0       0
   506 ;;Total ram usage:        4 bytes
   507 ;; Hardware stack levels used: 1
   508 ;; Hardware stack levels required when called: 2
   509 ;; This function calls:
   510 ;;		___awdiv
   511 ;; This function is called by:
   512 ;;		_main
   513 ;; This function uses a non-reentrant model
   514 ;;
   515                           
   516                           
   517                           ;psect for function _Speed_M
   518  00D6                     _Speed_M:
   519  00D6                     l941:	
   520                           ;incstack = 0
   521                           ; Regs used in _Speed_M: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   522                           
   523                           
   524                           ;newmain.c: 48: void Speed_M(int16_t x);newmain.c: 49: {;newmain.c: 50:   if (x < 0)
   525  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   526  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   527  00D8  1FA5               	btfss	Speed_M@x+1,7
   528  00D9  28DB               	goto	u471
   529  00DA  28DC               	goto	u470
   530  00DB                     u471:
   531  00DB  28FC               	goto	l949
   532  00DC                     u470:
   533  00DC                     l943:
   534                           
   535                           ;newmain.c: 51:   {;newmain.c: 52:     PORTBbits.RB1 = 0;
   536  00DC  1086               	bcf	6,1	;volatile
   537  00DD                     l945:
   538                           
   539                           ;newmain.c: 53:     u16Count_BOT = -x;
   540  00DD  0924               	comf	Speed_M@x,w
   541  00DE  00F7               	movwf	??_Speed_M
   542  00DF  0925               	comf	Speed_M@x+1,w
   543  00E0  00F8               	movwf	??_Speed_M+1
   544  00E1  0AF7               	incf	??_Speed_M,f
   545  00E2  1903               	skipnz
   546  00E3  0AF8               	incf	??_Speed_M+1,f
   547  00E4  0877               	movf	??_Speed_M,w
   548  00E5  00AA               	movwf	_u16Count_BOT
   549  00E6  0878               	movf	??_Speed_M+1,w
   550  00E7  00AB               	movwf	_u16Count_BOT+1
   551  00E8                     l947:
   552                           
   553                           ;newmain.c: 54:     u16Count_TOP = -x/2;
   554  00E8  30FE               	movlw	254
   555  00E9  00F2               	movwf	___awdiv@divisor
   556  00EA  30FF               	movlw	255
   557  00EB  00F3               	movwf	___awdiv@divisor+1
   558  00EC  0825               	movf	Speed_M@x+1,w
   559  00ED  00F5               	movwf	___awdiv@dividend+1
   560  00EE  0824               	movf	Speed_M@x,w
   561  00EF  00F4               	movwf	___awdiv@dividend
   562  00F0  120A  118A  201B  120A  118A  	fcall	___awdiv
   563  00F5  0873               	movf	?___awdiv+1,w
   564  00F6  1283               	bcf	3,5	;RP0=0, select bank0
   565  00F7  1303               	bcf	3,6	;RP1=0, select bank0
   566  00F8  00AD               	movwf	_u16Count_TOP+1
   567  00F9  0872               	movf	?___awdiv,w
   568  00FA  00AC               	movwf	_u16Count_TOP
   569                           
   570                           ;newmain.c: 55:   }
   571  00FB  2922               	goto	l27
   572  00FC                     l949:
   573  00FC  0825               	movf	Speed_M@x+1,w
   574  00FD  3A80               	xorlw	128
   575  00FE  00FF               	movwf	btemp+1
   576  00FF  3080               	movlw	128
   577  0100  027F               	subwf	btemp+1,w
   578  0101  1D03               	skipz
   579  0102  2905               	goto	u485
   580  0103  3001               	movlw	1
   581  0104  0224               	subwf	Speed_M@x,w
   582  0105                     u485:
   583  0105  1C03               	skipc
   584  0106  2908               	goto	u481
   585  0107  2909               	goto	u480
   586  0108                     u481:
   587  0108  291C               	goto	l957
   588  0109                     u480:
   589  0109                     l951:
   590                           
   591                           ;newmain.c: 57:   {;newmain.c: 58:     PORTBbits.RB1 = 1;
   592  0109  1283               	bcf	3,5	;RP0=0, select bank0
   593  010A  1303               	bcf	3,6	;RP1=0, select bank0
   594  010B  1486               	bsf	6,1	;volatile
   595  010C                     l953:
   596                           
   597                           ;newmain.c: 59:     u16Count_BOT = x;
   598  010C  0825               	movf	Speed_M@x+1,w
   599  010D  00AB               	movwf	_u16Count_BOT+1
   600  010E  0824               	movf	Speed_M@x,w
   601  010F  00AA               	movwf	_u16Count_BOT
   602  0110                     l955:
   603                           
   604                           ;newmain.c: 60:     u16Count_TOP = (uint16_t)x/2;
   605  0110  0825               	movf	Speed_M@x+1,w
   606  0111  00F8               	movwf	??_Speed_M+1
   607  0112  0824               	movf	Speed_M@x,w
   608  0113  00F7               	movwf	??_Speed_M
   609  0114  1003               	clrc
   610  0115  0CF8               	rrf	??_Speed_M+1,f
   611  0116  0CF7               	rrf	??_Speed_M,f
   612  0117  0877               	movf	??_Speed_M,w
   613  0118  00AC               	movwf	_u16Count_TOP
   614  0119  0878               	movf	??_Speed_M+1,w
   615  011A  00AD               	movwf	_u16Count_TOP+1
   616                           
   617                           ;newmain.c: 61:   }
   618  011B  2922               	goto	l27
   619  011C                     l957:
   620                           
   621                           ;newmain.c: 63:   {;newmain.c: 64:     u16Count_BOT = 0;
   622  011C  1283               	bcf	3,5	;RP0=0, select bank0
   623  011D  1303               	bcf	3,6	;RP1=0, select bank0
   624  011E  01AA               	clrf	_u16Count_BOT
   625  011F  01AB               	clrf	_u16Count_BOT+1
   626                           
   627                           ;newmain.c: 65:     u16Count_TOP = 0;
   628  0120  01AC               	clrf	_u16Count_TOP
   629  0121  01AD               	clrf	_u16Count_TOP+1
   630  0122                     l27:
   631  0122  0008               	return
   632  0123                     __end_of_Speed_M:
   633                           
   634                           	psect	text2
   635  001B                     __ptext2:	
   636 ;; *************** function ___awdiv *****************
   637 ;; Defined at:
   638 ;;		line 5 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\awdiv.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;  divisor         2    2[COMMON] int 
   641 ;;  dividend        2    4[COMMON] int 
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  quotient        2    2[BANK0 ] int 
   644 ;;  sign            1    1[BANK0 ] unsigned char 
   645 ;;  counter         1    0[BANK0 ] unsigned char 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  2    2[COMMON] int 
   648 ;; Registers used:
   649 ;;		wreg, status,2, status,0
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   655 ;;      Params:         4       0       0       0       0
   656 ;;      Locals:         0       4       0       0       0
   657 ;;      Temps:          1       0       0       0       0
   658 ;;      Totals:         5       4       0       0       0
   659 ;;Total ram usage:        9 bytes
   660 ;; Hardware stack levels used: 1
   661 ;; Hardware stack levels required when called: 1
   662 ;; This function calls:
   663 ;;		Nothing
   664 ;; This function is called by:
   665 ;;		_Speed_M
   666 ;; This function uses a non-reentrant model
   667 ;;
   668                           
   669                           
   670                           ;psect for function ___awdiv
   671  001B                     ___awdiv:
   672  001B                     l897:	
   673                           ;incstack = 0
   674                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   675                           
   676  001B  1283               	bcf	3,5	;RP0=0, select bank0
   677  001C  1303               	bcf	3,6	;RP1=0, select bank0
   678  001D  01A1               	clrf	___awdiv@sign
   679  001E                     l899:
   680  001E  1FF3               	btfss	___awdiv@divisor+1,7
   681  001F  2821               	goto	u371
   682  0020  2822               	goto	u370
   683  0021                     u371:
   684  0021  2829               	goto	l905
   685  0022                     u370:
   686  0022                     l901:
   687  0022  09F2               	comf	___awdiv@divisor,f
   688  0023  09F3               	comf	___awdiv@divisor+1,f
   689  0024  0AF2               	incf	___awdiv@divisor,f
   690  0025  1903               	skipnz
   691  0026  0AF3               	incf	___awdiv@divisor+1,f
   692  0027                     l903:
   693  0027  01A1               	clrf	___awdiv@sign
   694  0028  0AA1               	incf	___awdiv@sign,f
   695  0029                     l905:
   696  0029  1FF5               	btfss	___awdiv@dividend+1,7
   697  002A  282C               	goto	u381
   698  002B  282D               	goto	u380
   699  002C                     u381:
   700  002C  2836               	goto	l911
   701  002D                     u380:
   702  002D                     l907:
   703  002D  09F4               	comf	___awdiv@dividend,f
   704  002E  09F5               	comf	___awdiv@dividend+1,f
   705  002F  0AF4               	incf	___awdiv@dividend,f
   706  0030  1903               	skipnz
   707  0031  0AF5               	incf	___awdiv@dividend+1,f
   708  0032                     l909:
   709  0032  3001               	movlw	1
   710  0033  00F6               	movwf	??___awdiv
   711  0034  0876               	movf	??___awdiv,w
   712  0035  06A1               	xorwf	___awdiv@sign,f
   713  0036                     l911:
   714  0036  01A2               	clrf	___awdiv@quotient
   715  0037  01A3               	clrf	___awdiv@quotient+1
   716  0038                     l913:
   717  0038  0872               	movf	___awdiv@divisor,w
   718  0039  0473               	iorwf	___awdiv@divisor+1,w
   719  003A  1903               	btfsc	3,2
   720  003B  283D               	goto	u391
   721  003C  283E               	goto	u390
   722  003D                     u391:
   723  003D  2875               	goto	l933
   724  003E                     u390:
   725  003E                     l915:
   726  003E  01A0               	clrf	___awdiv@counter
   727  003F  0AA0               	incf	___awdiv@counter,f
   728  0040  284C               	goto	l921
   729  0041                     l917:
   730  0041  3001               	movlw	1
   731  0042                     u405:
   732  0042  1003               	clrc
   733  0043  0DF2               	rlf	___awdiv@divisor,f
   734  0044  0DF3               	rlf	___awdiv@divisor+1,f
   735  0045  3EFF               	addlw	-1
   736  0046  1D03               	skipz
   737  0047  2842               	goto	u405
   738  0048                     l919:
   739  0048  3001               	movlw	1
   740  0049  00F6               	movwf	??___awdiv
   741  004A  0876               	movf	??___awdiv,w
   742  004B  07A0               	addwf	___awdiv@counter,f
   743  004C                     l921:
   744  004C  1FF3               	btfss	___awdiv@divisor+1,7
   745  004D  284F               	goto	u411
   746  004E  2850               	goto	u410
   747  004F                     u411:
   748  004F  2841               	goto	l917
   749  0050                     u410:
   750  0050                     l923:
   751  0050  3001               	movlw	1
   752  0051                     u425:
   753  0051  1003               	clrc
   754  0052  0DA2               	rlf	___awdiv@quotient,f
   755  0053  0DA3               	rlf	___awdiv@quotient+1,f
   756  0054  3EFF               	addlw	-1
   757  0055  1D03               	skipz
   758  0056  2851               	goto	u425
   759  0057  0873               	movf	___awdiv@divisor+1,w
   760  0058  0275               	subwf	___awdiv@dividend+1,w
   761  0059  1D03               	skipz
   762  005A  285D               	goto	u435
   763  005B  0872               	movf	___awdiv@divisor,w
   764  005C  0274               	subwf	___awdiv@dividend,w
   765  005D                     u435:
   766  005D  1C03               	skipc
   767  005E  2860               	goto	u431
   768  005F  2861               	goto	u430
   769  0060                     u431:
   770  0060  2868               	goto	l929
   771  0061                     u430:
   772  0061                     l925:
   773  0061  0872               	movf	___awdiv@divisor,w
   774  0062  02F4               	subwf	___awdiv@dividend,f
   775  0063  0873               	movf	___awdiv@divisor+1,w
   776  0064  1C03               	skipc
   777  0065  03F5               	decf	___awdiv@dividend+1,f
   778  0066  02F5               	subwf	___awdiv@dividend+1,f
   779  0067                     l927:
   780  0067  1422               	bsf	___awdiv@quotient,0
   781  0068                     l929:
   782  0068  3001               	movlw	1
   783  0069                     u445:
   784  0069  1003               	clrc
   785  006A  0CF3               	rrf	___awdiv@divisor+1,f
   786  006B  0CF2               	rrf	___awdiv@divisor,f
   787  006C  3EFF               	addlw	-1
   788  006D  1D03               	skipz
   789  006E  2869               	goto	u445
   790  006F                     l931:
   791  006F  3001               	movlw	1
   792  0070  02A0               	subwf	___awdiv@counter,f
   793  0071  1D03               	btfss	3,2
   794  0072  2874               	goto	u451
   795  0073  2875               	goto	u450
   796  0074                     u451:
   797  0074  2850               	goto	l923
   798  0075                     u450:
   799  0075                     l933:
   800  0075  0821               	movf	___awdiv@sign,w
   801  0076  1903               	btfsc	3,2
   802  0077  2879               	goto	u461
   803  0078  287A               	goto	u460
   804  0079                     u461:
   805  0079  287F               	goto	l937
   806  007A                     u460:
   807  007A                     l935:
   808  007A  09A2               	comf	___awdiv@quotient,f
   809  007B  09A3               	comf	___awdiv@quotient+1,f
   810  007C  0AA2               	incf	___awdiv@quotient,f
   811  007D  1903               	skipnz
   812  007E  0AA3               	incf	___awdiv@quotient+1,f
   813  007F                     l937:
   814  007F  0823               	movf	___awdiv@quotient+1,w
   815  0080  00F3               	movwf	?___awdiv+1
   816  0081  0822               	movf	___awdiv@quotient,w
   817  0082  00F2               	movwf	?___awdiv
   818  0083                     l292:
   819  0083  0008               	return
   820  0084                     __end_of___awdiv:
   821                           
   822                           	psect	text3
   823  0152                     __ptext3:	
   824 ;; *************** function _Reverse_Motor *****************
   825 ;; Defined at:
   826 ;;		line 68 in file "newmain.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;  i               2    2[COMMON] int 
   829 ;; Auto vars:     Size  Location     Type
   830 ;;		None
   831 ;; Return value:  Size  Location     Type
   832 ;;                  1    wreg      void 
   833 ;; Registers used:
   834 ;;		None
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   840 ;;      Params:         2       0       0       0       0
   841 ;;      Locals:         0       0       0       0       0
   842 ;;      Temps:          0       0       0       0       0
   843 ;;      Totals:         2       0       0       0       0
   844 ;;Total ram usage:        2 bytes
   845 ;; Hardware stack levels used: 1
   846 ;; Hardware stack levels required when called: 1
   847 ;; This function calls:
   848 ;;		Nothing
   849 ;; This function is called by:
   850 ;;		_main
   851 ;; This function uses a non-reentrant model
   852 ;;
   853                           
   854                           
   855                           ;psect for function _Reverse_Motor
   856  0152                     _Reverse_Motor:
   857  0152                     l833:	
   858                           ;incstack = 0
   859                           ; Regs used in _Reverse_Motor: []
   860                           
   861                           
   862                           ;newmain.c: 68: void Reverse_Motor(int i);newmain.c: 69: {;newmain.c: 70:     if(i%2 == 
      +                          0)
   863  0152  1872               	btfsc	Reverse_Motor@i,0
   864  0153  2955               	goto	u311
   865  0154  2956               	goto	u310
   866  0155                     u311:
   867  0155  295A               	goto	l30
   868  0156                     u310:
   869  0156                     l835:
   870                           
   871                           ;newmain.c: 71:     {;newmain.c: 72:         PORTBbits.RB1 = 0;
   872  0156  1283               	bcf	3,5	;RP0=0, select bank0
   873  0157  1303               	bcf	3,6	;RP1=0, select bank0
   874  0158  1086               	bcf	6,1	;volatile
   875                           
   876                           ;newmain.c: 73:     }
   877  0159  295D               	goto	l32
   878  015A                     l30:	
   879                           ;newmain.c: 74:     else PORTBbits.RB1 = 1;
   880                           
   881  015A  1283               	bcf	3,5	;RP0=0, select bank0
   882  015B  1303               	bcf	3,6	;RP1=0, select bank0
   883  015C  1486               	bsf	6,1	;volatile
   884  015D                     l32:
   885  015D  0008               	return
   886  015E                     __end_of_Reverse_Motor:
   887                           
   888                           	psect	text4
   889  0123                     __ptext4:	
   890 ;; *************** function _ISR *****************
   891 ;; Defined at:
   892 ;;		line 121 in file "newmain.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;		None
   895 ;; Auto vars:     Size  Location     Type
   896 ;;		None
   897 ;; Return value:  Size  Location     Type
   898 ;;                  1    wreg      void 
   899 ;; Registers used:
   900 ;;		wreg, status,2
   901 ;; Tracked objects:
   902 ;;		On entry : 0/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   906 ;;      Params:         0       0       0       0       0
   907 ;;      Locals:         0       0       0       0       0
   908 ;;      Temps:          2       0       0       0       0
   909 ;;      Totals:         2       0       0       0       0
   910 ;;Total ram usage:        2 bytes
   911 ;; Hardware stack levels used: 1
   912 ;; This function calls:
   913 ;;		Nothing
   914 ;; This function is called by:
   915 ;;		Interrupt level 1
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           
   920                           ;psect for function _ISR
   921  0123                     _ISR:
   922  0123                     i1l885:
   923                           
   924                           ;newmain.c: 123:     if(INTCONbits.TMR0IF)
   925  0123  1D0B               	btfss	11,2	;volatile
   926  0124  2926               	goto	u34_21
   927  0125  2927               	goto	u34_20
   928  0126                     u34_21:
   929  0126  294B               	goto	i1l53
   930  0127                     u34_20:
   931  0127                     i1l887:
   932                           
   933                           ;newmain.c: 124:     {;newmain.c: 125:         TMR0 = 217;
   934  0127  30D9               	movlw	217
   935  0128  1283               	bcf	3,5	;RP0=0, select bank0
   936  0129  1303               	bcf	3,6	;RP1=0, select bank0
   937  012A  0081               	movwf	1	;volatile
   938  012B                     i1l889:
   939                           
   940                           ;newmain.c: 126:         INTCONbits.TMR0IF = 0;
   941  012B  110B               	bcf	11,2	;volatile
   942                           
   943                           ;newmain.c: 128:         u16Count_timer0++;
   944  012C  3001               	movlw	1
   945  012D  07F9               	addwf	_u16Count_timer0,f
   946  012E  1803               	skipnc
   947  012F  0AFA               	incf	_u16Count_timer0+1,f
   948  0130  3000               	movlw	0
   949  0131  07FA               	addwf	_u16Count_timer0+1,f
   950                           
   951                           ;newmain.c: 129:         if (u16Count_timer0 <= u16Count_TOP) PORTBbits.RB2 = 1;
   952  0132  087A               	movf	_u16Count_timer0+1,w
   953  0133  022D               	subwf	_u16Count_TOP+1,w
   954  0134  1D03               	skipz
   955  0135  2938               	goto	u35_25
   956  0136  0879               	movf	_u16Count_timer0,w
   957  0137  022C               	subwf	_u16Count_TOP,w
   958  0138                     u35_25:
   959  0138  1C03               	skipc
   960  0139  293B               	goto	u35_21
   961  013A  293C               	goto	u35_20
   962  013B                     u35_21:
   963  013B  293E               	goto	i1l50
   964  013C                     u35_20:
   965  013C                     i1l891:
   966  013C  1506               	bsf	6,2	;volatile
   967  013D  293F               	goto	i1l893
   968  013E                     i1l50:	
   969                           ;newmain.c: 130:         else PORTBbits.RB2 = 0;
   970                           
   971  013E  1106               	bcf	6,2	;volatile
   972  013F                     i1l893:
   973                           
   974                           ;newmain.c: 131:         if (u16Count_timer0 >= u16Count_BOT)
   975  013F  082B               	movf	_u16Count_BOT+1,w
   976  0140  027A               	subwf	_u16Count_timer0+1,w
   977  0141  1D03               	skipz
   978  0142  2945               	goto	u36_25
   979  0143  082A               	movf	_u16Count_BOT,w
   980  0144  0279               	subwf	_u16Count_timer0,w
   981  0145                     u36_25:
   982  0145  1C03               	skipc
   983  0146  2948               	goto	u36_21
   984  0147  2949               	goto	u36_20
   985  0148                     u36_21:
   986  0148  294B               	goto	i1l53
   987  0149                     u36_20:
   988  0149                     i1l895:
   989                           
   990                           ;newmain.c: 132:         {;newmain.c: 133:             u16Count_timer0 = 0;
   991  0149  01F9               	clrf	_u16Count_timer0
   992  014A  01FA               	clrf	_u16Count_timer0+1
   993  014B                     i1l53:
   994  014B  0871               	movf	??_ISR+1,w
   995  014C  008A               	movwf	10
   996  014D  0E70               	swapf	??_ISR,w
   997  014E  0083               	movwf	3
   998  014F  0EFE               	swapf	btemp,f
   999  0150  0E7E               	swapf	btemp,w
  1000  0151  0009               	retfie
  1001  0152                     __end_of_ISR:
  1002  007E                     btemp	set	126	;btemp
  1003  007E                     wtemp0	set	126
  1004                           
  1005                           	psect	intentry
  1006  0004                     __pintentry:	
  1007                           ;incstack = 0
  1008                           ; Regs used in _ISR: [wreg+status,2]
  1009                           
  1010  0004                     interrupt_function:
  1011  007E                     saved_w	set	btemp
  1012  0004  00FE               	movwf	btemp
  1013  0005  0E03               	swapf	3,w
  1014  0006  00F0               	movwf	??_ISR
  1015  0007  080A               	movf	10,w
  1016  0008  00F1               	movwf	??_ISR+1
  1017  0009  120A  118A  2923   	ljmp	_ISR
  1018                           
  1019                           	psect	config
  1020                           
  1021                           ;Config register CONFIG @ 0x2007
  1022                           ;	Oscillator Selection bits
  1023                           ;	FOSC = HS, HS oscillator
  1024                           ;	Watchdog Timer Enable bit
  1025                           ;	WDTE = OFF, WDT disabled
  1026                           ;	Power-up Timer Enable bit
  1027                           ;	PWRTE = OFF, PWRT disabled
  1028                           ;	Brown-out Reset Enable bit
  1029                           ;	BOREN = OFF, BOR disabled
  1030                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1031                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1032                           ;	Data EEPROM Memory Code Protection bit
  1033                           ;	CPD = OFF, Data EEPROM code protection off
  1034                           ;	Flash Program Memory Write Enable bits
  1035                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1036                           ;	In-Circuit Debugger Mode bit
  1037                           ;	DEBUG = 0x1, unprogrammed default
  1038                           ;	Flash Program Memory Code Protection bit
  1039                           ;	CP = OFF, Code protection off
  1040  2007                     	org	8199
  1041  2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     10      14
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Speed_M
    _Speed_M->___awdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Speed_M
    _Speed_M->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1036
                                              6 BANK0      4     4      0
                      _Reverse_Motor
                            _Speed_M
 ---------------------------------------------------------------------------------
 (1) _Speed_M                                              4     2      2     901
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     625
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Reverse_Motor                                        2     0      2      98
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Reverse_Motor
   _Speed_M
     ___awdiv

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      19       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      A       E       5       17.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      19      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Apr 22 10:32:31 2022

                     l30 015A                       l32 015D                       l27 0122  
                     l39 00C3             ___awdiv@sign 0021                      l292 0083  
                    l901 0022                      l911 0036                      l903 0027  
                    l833 0152                      l921 004C                      l913 0038  
                    l905 0029                      l835 0156                      l931 006F  
                    l923 0050                      l915 003E                      l907 002D  
                    l925 0061                      l917 0041                      l933 0075  
                    l909 0032                      l941 00D6                      l935 007A  
                    l927 0067                      l919 0048                      l951 0109  
                    l943 00DC                      l937 007F                      l929 0068  
                    l953 010C                      l945 00DD                      l961 0088  
                    l955 0110                      l947 00E8                      l971 008F  
                    l963 008B                      l957 011C                      l949 00FC  
                    l981 0096                      l973 0090                      l965 008C  
                    l991 009D                      l983 0099                      l975 0093  
                    l967 008D                      l959 0084                      l897 001B  
                    l993 00A1                      l985 009A                      l977 0094  
                    l969 008E                      l899 001E                      l995 00A2  
                    l987 009B                      l979 0095                      l997 00A3  
                    l989 009C                      l999 00A4                      u310 0156  
                    u311 0155                      u410 0050                      u411 004F  
                    u500 00C9                      u405 0042                      u501 00C8  
                    u430 0061                      u431 0060                      u425 0051  
                    u450 0075                      u370 0022                      u451 0074  
                    u435 005D                      u371 0021                      u460 007A  
                    u380 002D                      _ISR 0123                      u461 0079  
                    u445 0069                      u381 002C                      u517 00BF  
                    u390 003E                      u470 00DC                      u391 003D  
                    u471 00DB                      u480 0109                      u481 0108  
                    u490 00B3                      u491 00B2                      u485 0105  
         Reverse_Motor@i 0072                     ?_ISR 0070                     l1001 00AD  
                   l1003 00B3                     l1005 00C9                     i1l50 013E  
                   i1l53 014B                     _TMR0 0001                     _main 0084  
                   btemp 007E                     start 000C                    ??_ISR 0070  
        __end_of_Speed_M 0123                    ?_main 0070          __end_of___awdiv 0084  
        ___awdiv@divisor 0072                    i1l891 013C                    i1l893 013F  
                  i1l885 0123                    i1l895 0149                    i1l887 0127  
                  i1l889 012B          ___awdiv@counter 0020                    u34_20 0127  
                  u34_21 0126                    u35_20 013C                    u35_21 013B  
                  u35_25 0138                    u36_20 0149                    u36_21 0148  
                  u36_25 0145                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 00D6  
  __end_of_Reverse_Motor 015E                   ??_main 0026         ___awdiv@dividend 0074  
              ??_Speed_M 0077                ??___awdiv 0076         ___awdiv@quotient 0022  
                 saved_w 007E  __end_of__initialization 0017           __pcstackCOMMON 0070  
         _OPTION_REGbits 0081               __pbssBANK0 002A               __pmaintext 0084  
             __pintentry 0004                  _Speed_M 00D6                  ___awdiv 001B  
                __ptext1 00D6                  __ptext2 001B                  __ptext3 0152  
                __ptext4 0123             __size_of_ISR 002F             _u16Count_BOT 002A  
           _u16Count_TOP 002C     end_of_initialization 0017                _PORTBbits 0006  
              _PORTDbits 0008                _TRISBbits 0086          _u16Count_timer0 0079  
 __size_of_Reverse_Motor 000C      start_initialization 000F              __end_of_ISR 0152  
          _Reverse_Motor 0152              __pbssCOMMON 0079                ___latbits 0002  
          __pcstackBANK0 0020                 ?_Speed_M 0024                 ?___awdiv 0072  
         ?_Reverse_Motor 0072        interrupt_function 0004                main@count 0028  
               Speed_M@x 0024         __size_of_Speed_M 004D          ??_Reverse_Motor 0074  
       __size_of___awdiv 0069            __size_of_main 0052               _INTCONbits 000B  
               intlevel1 0000  
