

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Mar 03 15:39:21 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=3
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.32
    38                           ; Generated 02/02/2021 GMT
    39                           ; 
    40                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F877A Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0007                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0088                     	;# 
   112  0089                     	;# 
   113  008C                     	;# 
   114  008D                     	;# 
   115  008E                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0098                     	;# 
   121  0099                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  000E                     	;# 
   148  000F                     	;# 
   149  0010                     	;# 
   150  0011                     	;# 
   151  0012                     	;# 
   152  0013                     	;# 
   153  0014                     	;# 
   154  0015                     	;# 
   155  0015                     	;# 
   156  0016                     	;# 
   157  0017                     	;# 
   158  0018                     	;# 
   159  0019                     	;# 
   160  001A                     	;# 
   161  001B                     	;# 
   162  001B                     	;# 
   163  001C                     	;# 
   164  001D                     	;# 
   165  001E                     	;# 
   166  001F                     	;# 
   167  0081                     	;# 
   168  0085                     	;# 
   169  0086                     	;# 
   170  0087                     	;# 
   171  0088                     	;# 
   172  0089                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0098                     	;# 
   181  0099                     	;# 
   182  009C                     	;# 
   183  009D                     	;# 
   184  009E                     	;# 
   185  009F                     	;# 
   186  010C                     	;# 
   187  010D                     	;# 
   188  010E                     	;# 
   189  010F                     	;# 
   190  018C                     	;# 
   191  018D                     	;# 
   192                           
   193                           	psect	strings
   194  0003                     __pstrings:
   195  0003                     stringtab:
   196  0003                     __stringtab:
   197                           
   198                           ;	String table - string pointers are 1 byte each
   199  0003  1BFF               	btfsc	btemp+1,7
   200  0004  280D               	ljmp	stringcode
   201  0005  1383               	bcf	3,7
   202  0006  187F               	btfsc	btemp+1,0
   203  0007  1783               	bsf	3,7
   204  0008  0800               	movf	0,w
   205  0009  0A84               	incf	4,f
   206  000A  1903               	skipnz
   207  000B  0AFF               	incf	btemp+1,f
   208  000C  0008               	return
   209  000D                     stringcode:
   210  000D                     stringdir:
   211  000D  3000               	movlw	high stringdir
   212  000E  008A               	movwf	10
   213  000F  0804               	movf	4,w
   214  0010  0A84               	incf	4,f
   215  0011  0782               	addwf	2,f
   216  0012                     __stringbase:
   217  0012  3400               	retlw	0
   218  0013                     __end_of__stringtab:
   219  0013                     _hexpowers:
   220  0013  3401               	retlw	1
   221  0014  3400               	retlw	0
   222  0015  3410               	retlw	16
   223  0016  3400               	retlw	0
   224  0017  3400               	retlw	0
   225  0018  3401               	retlw	1
   226  0019  3400               	retlw	0
   227  001A  3410               	retlw	16
   228  001B                     __end_of_hexpowers:
   229  0019                     _TXREG	set	25
   230  000B                     _INTCONbits	set	11
   231  000C                     _PIR1bits	set	12
   232  0013                     _SSPBUF	set	19
   233  0014                     _SSPCONbits	set	20
   234  0007                     _PORTCbits	set	7
   235  00C4                     _CREN	set	196
   236  00C7                     _SPEN	set	199
   237  0099                     _SPBRG	set	153
   238  0094                     _SSPSTATbits	set	148
   239  0087                     _TRISCbits	set	135
   240  04C1                     _TRMT	set	1217
   241  0465                     _RCIE	set	1125
   242  04C5                     _TXEN	set	1221
   243  001B                     STR_3:
   244  001B  3459               	retlw	89	;'Y'
   245  001C  346F               	retlw	111	;'o'
   246  001D  3475               	retlw	117	;'u'
   247  001E  3472               	retlw	114	;'r'
   248  001F  3420               	retlw	32	;' '
   249  0020  3463               	retlw	99	;'c'
   250  0021  3461               	retlw	97	;'a'
   251  0022  3472               	retlw	114	;'r'
   252  0023  3464               	retlw	100	;'d'
   253  0024  3427               	retlw	39	;'''
   254  0025  3473               	retlw	115	;'s'
   255  0026  3420               	retlw	32	;' '
   256  0027  346E               	retlw	110	;'n'
   257  0028  3475               	retlw	117	;'u'
   258  0029  346D               	retlw	109	;'m'
   259  002A  3462               	retlw	98	;'b'
   260  002B  3465               	retlw	101	;'e'
   261  002C  3472               	retlw	114	;'r'
   262  002D  3420               	retlw	32	;' '
   263  002E  3461               	retlw	97	;'a'
   264  002F  3472               	retlw	114	;'r'
   265  0030  3465               	retlw	101	;'e'
   266  0031  343A               	retlw	58	;':'
   267  0032  3420               	retlw	32	;' '
   268  0033  3425               	retlw	37	;'%'
   269  0034  3478               	retlw	120	;'x'
   270  0035  342C               	retlw	44	;','
   271  0036  3420               	retlw	32	;' '
   272  0037  3425               	retlw	37	;'%'
   273  0038  3478               	retlw	120	;'x'
   274  0039  342C               	retlw	44	;','
   275  003A  3420               	retlw	32	;' '
   276  003B  3425               	retlw	37	;'%'
   277  003C  3478               	retlw	120	;'x'
   278  003D  342C               	retlw	44	;','
   279  003E  3420               	retlw	32	;' '
   280  003F  3425               	retlw	37	;'%'
   281  0040  3478               	retlw	120	;'x'
   282  0041  342C               	retlw	44	;','
   283  0042  3420               	retlw	32	;' '
   284  0043  3425               	retlw	37	;'%'
   285  0044  3478               	retlw	120	;'x'
   286  0045  3420               	retlw	32	;' '
   287  0046  340D               	retlw	13
   288  0047  340A               	retlw	10
   289  0048  3400               	retlw	0
   290  0049                     STR_2:
   291  0049  3446               	retlw	70	;'F'
   292  004A  3469               	retlw	105	;'i'
   293  004B  346E               	retlw	110	;'n'
   294  004C  3464               	retlw	100	;'d'
   295  004D  3420               	retlw	32	;' '
   296  004E  346F               	retlw	111	;'o'
   297  004F  3475               	retlw	117	;'u'
   298  0050  3474               	retlw	116	;'t'
   299  0051  3420               	retlw	32	;' '
   300  0052  3461               	retlw	97	;'a'
   301  0053  3420               	retlw	32	;' '
   302  0054  3463               	retlw	99	;'c'
   303  0055  3461               	retlw	97	;'a'
   304  0056  3472               	retlw	114	;'r'
   305  0057  3464               	retlw	100	;'d'
   306  0058  343A               	retlw	58	;':'
   307  0059  3420               	retlw	32	;' '
   308  005A  3425               	retlw	37	;'%'
   309  005B  3478               	retlw	120	;'x'
   310  005C  342C               	retlw	44	;','
   311  005D  3420               	retlw	32	;' '
   312  005E  3425               	retlw	37	;'%'
   313  005F  3478               	retlw	120	;'x'
   314  0060  340D               	retlw	13
   315  0061  340A               	retlw	10
   316  0062  3400               	retlw	0
   317  0063                     STR_1:
   318  0063  3457               	retlw	87	;'W'
   319  0064  3461               	retlw	97	;'a'
   320  0065  3469               	retlw	105	;'i'
   321  0066  3474               	retlw	116	;'t'
   322  0067  3469               	retlw	105	;'i'
   323  0068  346E               	retlw	110	;'n'
   324  0069  3467               	retlw	103	;'g'
   325  006A  3420               	retlw	32	;' '
   326  006B  3479               	retlw	121	;'y'
   327  006C  346F               	retlw	111	;'o'
   328  006D  3475               	retlw	117	;'u'
   329  006E  3472               	retlw	114	;'r'
   330  006F  3420               	retlw	32	;' '
   331  0070  3443               	retlw	67	;'C'
   332  0071  3461               	retlw	97	;'a'
   333  0072  3472               	retlw	114	;'r'
   334  0073  3464               	retlw	100	;'d'
   335  0074  3421               	retlw	33	;'!'
   336  0075  3420               	retlw	32	;' '
   337  0076  340D               	retlw	13
   338  0077  340A               	retlw	10
   339  0078  3400               	retlw	0
   340  0079                     STR_4:
   341  0079  3430               	retlw	48	;'0'
   342  007A  3431               	retlw	49	;'1'
   343  007B  3432               	retlw	50	;'2'
   344  007C  3433               	retlw	51	;'3'
   345  007D  3434               	retlw	52	;'4'
   346  007E  3435               	retlw	53	;'5'
   347  007F  3436               	retlw	54	;'6'
   348  0080  3437               	retlw	55	;'7'
   349  0081  3438               	retlw	56	;'8'
   350  0082  3439               	retlw	57	;'9'
   351  0083  3461               	retlw	97	;'a'
   352  0084  3462               	retlw	98	;'b'
   353  0085  3463               	retlw	99	;'c'
   354  0086  3464               	retlw	100	;'d'
   355  0087  3465               	retlw	101	;'e'
   356  0088  3466               	retlw	102	;'f'
   357  0089  3400               	retlw	0
   358                           
   359                           	psect	cinit
   360  07E9                     start_initialization:	
   361                           ; #config settings
   362                           
   363  07E9                     __initialization:
   364                           
   365                           ; Clear objects allocated to COMMON
   366  07E9  01FC               	clrf	__pbssCOMMON& (0+127)
   367                           
   368                           ; Clear objects allocated to BANK1
   369  07EA  1383               	bcf	3,7	;select IRP bank0
   370  07EB  30D2               	movlw	low __pbssBANK1
   371  07EC  0084               	movwf	4
   372  07ED  30E8               	movlw	low (__pbssBANK1+22)
   373  07EE  120A  118A  2266  120A  118A  	fcall	clear_ram0
   374                           
   375                           ; Clear objects allocated to BANK3
   376  07F3  1783               	bsf	3,7	;select IRP bank2
   377  07F4  3090               	movlw	low __pbssBANK3
   378  07F5  0084               	movwf	4
   379  07F6  30C2               	movlw	low (__pbssBANK3+50)
   380  07F7  120A  118A  2266  120A  118A  	fcall	clear_ram0
   381  07FC                     end_of_initialization:	
   382                           ;End of C runtime variable initialization code
   383                           
   384  07FC                     __end_of__initialization:
   385  07FC  0183               	clrf	3
   386  07FD  120A  118A  2D78   	ljmp	_main	;jump to C main() function
   387                           
   388                           	psect	bssCOMMON
   389  007C                     __pbssCOMMON:
   390  007C                     _rx_index:
   391  007C                     	ds	1
   392                           
   393                           	psect	bssBANK1
   394  00D2                     __pbssBANK1:
   395  00D2                     _status:
   396  00D2                     	ds	1
   397  00D3                     _str:
   398  00D3                     	ds	16
   399  00E3                     _serNum:
   400  00E3                     	ds	5
   401                           
   402                           	psect	bssBANK3
   403  0190                     __pbssBANK3:
   404  0190                     _RX_Buffer:
   405  0190                     	ds	50
   406                           
   407                           	psect	clrtext
   408  0266                     clear_ram0:	
   409                           ;	Called with FSR containing the base address, and
   410                           ;	W with the last address+1
   411                           
   412  0266  0064               	clrwdt	;clear the watchdog before getting into this loop
   413  0267                     clrloop0:
   414  0267  0180               	clrf	0	;clear RAM location pointed to by FSR
   415  0268  0A84               	incf	4,f	;increment pointer
   416  0269  0604               	xorwf	4,w	;XOR with final address
   417  026A  1903               	btfsc	3,2	;have we reached the end yet?
   418  026B  3400               	retlw	0	;all done for this memory range, return
   419  026C  0604               	xorwf	4,w	;XOR again to restore value
   420  026D  2A67               	goto	clrloop0	;do the next byte
   421                           
   422                           	psect	cstackBANK1
   423  00A0                     __pcstackBANK1:
   424  00A0                     main@tx:
   425                           
   426                           ; 50 bytes @ 0x0
   427  00A0                     	ds	50
   428                           
   429                           	psect	cstackCOMMON
   430  0070                     __pcstackCOMMON:
   431  0070                     ?_memcpy:
   432  0070                     ?_SPI_Init:	
   433                           ; 1 bytes @ 0x0
   434                           
   435  0070                     ??_SPI_Init:	
   436                           ; 1 bytes @ 0x0
   437                           
   438  0070                     ?_SPI_Write:	
   439                           ; 1 bytes @ 0x0
   440                           
   441  0070                     ??_SPI_Write:	
   442                           ; 1 bytes @ 0x0
   443                           
   444  0070                     ?_SPI_Read:	
   445                           ; 1 bytes @ 0x0
   446                           
   447  0070                     ??_SPI_Read:	
   448                           ; 1 bytes @ 0x0
   449                           
   450  0070                     ?_MFRC522_Rd:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_MFRC522_Reset:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ?_MFRC522_AntennaOn:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ?_MFRC522_Init:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ?_MFRC522_AntiColl:	
   463                           ; 1 bytes @ 0x0
   464                           
   465  0070                     ?_IO_Init:	
   466                           ; 1 bytes @ 0x0
   467                           
   468  0070                     ??_IO_Init:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_UART_Init:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ??_UART_Init:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_UART_Transmit:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ??_UART_Transmit:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_main:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?___lwdiv:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     SPI_Write@Tvalue:	
   490                           ; 2 bytes @ 0x0
   491                           
   492  0070                     UART_Transmit@c:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     memcpy@s1:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ___lwdiv@divisor:	
   499                           ; 1 bytes @ 0x0
   500                           
   501                           
   502                           ; 2 bytes @ 0x0
   503  0070                     	ds	1
   504  0071                     ??_MFRC522_Rd:
   505  0071                     ?_UART_Transmit_Text:	
   506                           ; 1 bytes @ 0x1
   507                           
   508  0071                     UART_Transmit_Text@str:	
   509                           ; 1 bytes @ 0x1
   510                           
   511  0071                     memcpy@n:	
   512                           ; 2 bytes @ 0x1
   513                           
   514                           
   515                           ; 2 bytes @ 0x1
   516  0071                     	ds	1
   517  0072                     MFRC522_Rd@addr:
   518  0072                     ___lwdiv@dividend:	
   519                           ; 1 bytes @ 0x2
   520                           
   521                           
   522                           ; 2 bytes @ 0x2
   523  0072                     	ds	1
   524  0073                     ??_memcpy:
   525  0073                     ??_UART_Transmit_Text:	
   526                           ; 1 bytes @ 0x3
   527                           
   528  0073                     MFRC522_Rd@value:	
   529                           ; 1 bytes @ 0x3
   530                           
   531                           
   532                           ; 1 bytes @ 0x3
   533  0073                     	ds	1
   534  0074                     ?_MFRC522_Wr:
   535  0074                     ??___lwdiv:	
   536                           ; 1 bytes @ 0x4
   537                           
   538  0074                     MFRC522_Wr@value:	
   539                           ; 1 bytes @ 0x4
   540                           
   541  0074                     UART_Transmit_Text@i:	
   542                           ; 1 bytes @ 0x4
   543                           
   544  0074                     memcpy@tmp:	
   545                           ; 1 bytes @ 0x4
   546                           
   547                           
   548                           ; 1 bytes @ 0x4
   549  0074                     	ds	1
   550  0075                     ??_MFRC522_Wr:
   551  0075                     memcpy@d1:	
   552                           ; 1 bytes @ 0x5
   553                           
   554  0075                     ___lwdiv@quotient:	
   555                           ; 1 bytes @ 0x5
   556                           
   557                           
   558                           ; 2 bytes @ 0x5
   559  0075                     	ds	1
   560  0076                     MFRC522_Wr@addr:
   561  0076                     memcpy@d:	
   562                           ; 1 bytes @ 0x6
   563                           
   564                           
   565                           ; 1 bytes @ 0x6
   566  0076                     	ds	1
   567  0077                     ?_MFRC522_Clear_Bit:
   568  0077                     ?_MFRC522_Set_Bit:	
   569                           ; 1 bytes @ 0x7
   570                           
   571  0077                     ??_MFRC522_Reset:	
   572                           ; 1 bytes @ 0x7
   573                           
   574  0077                     MFRC522_Clear_Bit@mask:	
   575                           ; 1 bytes @ 0x7
   576                           
   577  0077                     MFRC522_Set_Bit@mask:	
   578                           ; 1 bytes @ 0x7
   579                           
   580  0077                     ___lwdiv@counter:	
   581                           ; 1 bytes @ 0x7
   582                           
   583  0077                     memcpy@s:	
   584                           ; 1 bytes @ 0x7
   585                           
   586                           
   587                           ; 1 bytes @ 0x7
   588  0077                     	ds	1
   589  0078                     ??_sprintf:
   590  0078                     ??_MFRC522_Clear_Bit:	
   591                           ; 1 bytes @ 0x8
   592                           
   593  0078                     ??_MFRC522_Set_Bit:	
   594                           ; 1 bytes @ 0x8
   595                           
   596                           
   597                           ; 1 bytes @ 0x8
   598  0078                     	ds	1
   599  0079                     MFRC522_Set_Bit@addr:
   600                           
   601                           ; 1 bytes @ 0x9
   602  0079                     	ds	1
   603  007A                     ??_MFRC522_AntennaOn:
   604  007A                     MFRC522_Clear_Bit@addr:	
   605                           ; 1 bytes @ 0xA
   606                           
   607                           
   608                           ; 1 bytes @ 0xA
   609  007A                     	ds	1
   610  007B                     ??_MFRC522_Init:
   611  007B                     ?_MFRC522_Request:	
   612                           ; 1 bytes @ 0xB
   613                           
   614  007B                     MFRC522_Request@TagType:	
   615                           ; 1 bytes @ 0xB
   616                           
   617                           
   618                           ; 1 bytes @ 0xB
   619  007B                     	ds	1
   620                           
   621                           	psect	cstackBANK0
   622  0020                     __pcstackBANK0:
   623  0020                     ?_MFRC522_ToCard:
   624  0020                     ?_sprintf:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0020                     MFRC522_ToCard@sendData:	
   628                           ; 2 bytes @ 0x0
   629                           
   630  0020                     sprintf@f:	
   631                           ; 1 bytes @ 0x0
   632                           
   633                           
   634                           ; 1 bytes @ 0x0
   635  0020                     	ds	1
   636  0021                     MFRC522_ToCard@sendLen:
   637                           
   638                           ; 1 bytes @ 0x1
   639  0021                     	ds	1
   640  0022                     MFRC522_ToCard@backData:
   641                           
   642                           ; 1 bytes @ 0x2
   643  0022                     	ds	1
   644  0023                     MFRC522_ToCard@backLen:
   645                           
   646                           ; 1 bytes @ 0x3
   647  0023                     	ds	1
   648  0024                     ??_MFRC522_ToCard:
   649                           
   650                           ; 1 bytes @ 0x4
   651  0024                     	ds	6
   652  002A                     MFRC522_ToCard@waitIRq:
   653                           
   654                           ; 1 bytes @ 0xA
   655  002A                     	ds	1
   656  002B                     MFRC522_ToCard@_status:
   657  002B                     sprintf@idx:	
   658                           ; 1 bytes @ 0xB
   659                           
   660                           
   661                           ; 1 bytes @ 0xB
   662  002B                     	ds	1
   663  002C                     MFRC522_ToCard@lastBits:
   664  002C                     sprintf@ap:	
   665                           ; 1 bytes @ 0xC
   666                           
   667                           
   668                           ; 1 bytes @ 0xC
   669  002C                     	ds	1
   670  002D                     MFRC522_ToCard@irqEn:
   671  002D                     sprintf@val:	
   672                           ; 1 bytes @ 0xD
   673                           
   674                           
   675                           ; 2 bytes @ 0xD
   676  002D                     	ds	1
   677  002E                     MFRC522_ToCard@command:
   678                           
   679                           ; 1 bytes @ 0xE
   680  002E                     	ds	1
   681  002F                     sprintf@prec:
   682  002F                     MFRC522_ToCard@i:	
   683                           ; 1 bytes @ 0xF
   684                           
   685                           
   686                           ; 2 bytes @ 0xF
   687  002F                     	ds	1
   688  0030                     sprintf@sp:
   689                           
   690                           ; 1 bytes @ 0x10
   691  0030                     	ds	1
   692  0031                     MFRC522_ToCard@n:
   693  0031                     sprintf@c:	
   694                           ; 1 bytes @ 0x11
   695                           
   696                           
   697                           ; 1 bytes @ 0x11
   698  0031                     	ds	1
   699  0032                     ??_MFRC522_Request:
   700  0032                     ??_MFRC522_AntiColl:	
   701                           ; 1 bytes @ 0x12
   702                           
   703                           
   704                           ; 1 bytes @ 0x12
   705  0032                     	ds	4
   706  0036                     MFRC522_Request@reqMode:
   707                           
   708                           ; 1 bytes @ 0x16
   709  0036                     	ds	1
   710  0037                     MFRC522_Request@_status:
   711  0037                     MFRC522_AntiColl@serNumCheck:	
   712                           ; 1 bytes @ 0x17
   713                           
   714                           
   715                           ; 1 bytes @ 0x17
   716  0037                     	ds	1
   717  0038                     MFRC522_Request@backBits:
   718  0038                     MFRC522_AntiColl@unLen:	
   719                           ; 2 bytes @ 0x18
   720                           
   721                           
   722                           ; 2 bytes @ 0x18
   723  0038                     	ds	2
   724  003A                     MFRC522_AntiColl@_status:
   725                           
   726                           ; 1 bytes @ 0x1A
   727  003A                     	ds	1
   728  003B                     MFRC522_AntiColl@i:
   729                           
   730                           ; 1 bytes @ 0x1B
   731  003B                     	ds	1
   732  003C                     MFRC522_AntiColl@serNum:
   733                           
   734                           ; 1 bytes @ 0x1C
   735  003C                     	ds	1
   736  003D                     ??_main:
   737                           
   738                           ; 1 bytes @ 0x1D
   739  003D                     	ds	11
   740                           
   741                           	psect	maintext
   742  0578                     __pmaintext:	
   743 ;;
   744 ;;Main: autosize = 0, tempsize = 11, incstack = 0, save=0
   745 ;;
   746 ;; *************** function _main *****************
   747 ;; Defined at:
   748 ;;		line 78 in file "newmain.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;  tx             50    0[BANK1 ] unsigned char [50]
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : B00/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   762 ;;      Params:         0       0       0       0       0
   763 ;;      Locals:         0       0      50       0       0
   764 ;;      Temps:          0      11       0       0       0
   765 ;;      Totals:         0      11      50       0       0
   766 ;;Total ram usage:       61 bytes
   767 ;; Hardware stack levels required when called: 5
   768 ;; This function calls:
   769 ;;		_IO_Init
   770 ;;		_MFRC522_AntiColl
   771 ;;		_MFRC522_Init
   772 ;;		_MFRC522_Request
   773 ;;		_SPI_Init
   774 ;;		_UART_Init
   775 ;;		_UART_Transmit_Text
   776 ;;		_memcpy
   777 ;;		_sprintf
   778 ;; This function is called by:
   779 ;;		Startup code after reset
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           
   784                           ;psect for function _main
   785  0578                     _main:
   786  0578                     l1797:	
   787                           ;incstack = 0
   788                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   789                           
   790                           
   791                           ;newmain.c: 80:     char tx[50];;newmain.c: 81:     IO_Init();
   792  0578  120A  118A  2261  120A  118A  	fcall	_IO_Init
   793  057D                     l1799:
   794                           
   795                           ;newmain.c: 82:     UART_Init();
   796  057D  120A  118A  22B5  120A  118A  	fcall	_UART_Init
   797  0582                     l1801:
   798                           
   799                           ;newmain.c: 83:     SPI_Init();
   800  0582  120A  118A  22F3  120A  118A  	fcall	_SPI_Init
   801                           
   802                           ;newmain.c: 84:     MFRC522_Init();
   803  0587  120A  118A  23C2  120A  118A  	fcall	_MFRC522_Init
   804  058C                     l1803:
   805                           
   806                           ;newmain.c: 86:     {;newmain.c: 87:         UART_Transmit_Text("Waiting your Card! \r\n
      +                          ");
   807  058C  3051               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   808  058D  00F1               	movwf	UART_Transmit_Text@str
   809  058E  3080               	movlw	128
   810  058F  00F2               	movwf	UART_Transmit_Text@str+1
   811  0590  120A  118A  2328  120A  118A  	fcall	_UART_Transmit_Text
   812  0595                     l1805:
   813                           
   814                           ;newmain.c: 89:   status = MFRC522_Request(0x26, str);
   815  0595  30D3               	movlw	(low (_str| 0))& (0+255)
   816  0596  1283               	bcf	3,5	;RP0=0, select bank0
   817  0597  1303               	bcf	3,6	;RP1=0, select bank0
   818  0598  00BD               	movwf	??_main
   819  0599  083D               	movf	??_main,w
   820  059A  00FB               	movwf	MFRC522_Request@TagType
   821  059B  3026               	movlw	38
   822  059C  120A  118A  2381  120A  118A  	fcall	_MFRC522_Request
   823  05A1  1283               	bcf	3,5	;RP0=0, select bank0
   824  05A2  1303               	bcf	3,6	;RP1=0, select bank0
   825  05A3  00BE               	movwf	??_main+1
   826  05A4  083E               	movf	??_main+1,w
   827  05A5  1683               	bsf	3,5	;RP0=1, select bank1
   828  05A6  1303               	bcf	3,6	;RP1=0, select bank1
   829  05A7  00D2               	movwf	_status^(0+128)
   830  05A8                     l1807:
   831                           
   832                           ;newmain.c: 90:   if (status == 0)
   833  05A8  0852               	movf	_status^(0+128),w
   834  05A9  1D03               	btfss	3,2
   835  05AA  2DAC               	goto	u1131
   836  05AB  2DAD               	goto	u1130
   837  05AC                     u1131:
   838  05AC  2DD8               	goto	l1811
   839  05AD                     u1130:
   840  05AD                     l1809:
   841                           
   842                           ;newmain.c: 91:   {;newmain.c: 92:    sprintf(tx, "Find out a card: %x, %x\r\n",str[0],s
      +                          tr[1]);
   843  05AD  3037               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   844  05AE  1283               	bcf	3,5	;RP0=0, select bank0
   845  05AF  1303               	bcf	3,6	;RP1=0, select bank0
   846  05B0  00BD               	movwf	??_main
   847  05B1  083D               	movf	??_main,w
   848  05B2  00A0               	movwf	sprintf@f
   849  05B3  1683               	bsf	3,5	;RP0=1, select bank1
   850  05B4  1303               	bcf	3,6	;RP1=0, select bank1
   851  05B5  0853               	movf	_str^(0+128),w
   852  05B6  1283               	bcf	3,5	;RP0=0, select bank0
   853  05B7  1303               	bcf	3,6	;RP1=0, select bank0
   854  05B8  00BE               	movwf	??_main+1
   855  05B9  01BF               	clrf	??_main+2
   856  05BA  083E               	movf	??_main+1,w
   857  05BB  00A1               	movwf	?_sprintf+1
   858  05BC  083F               	movf	??_main+2,w
   859  05BD  00A2               	movwf	?_sprintf+2
   860  05BE  1683               	bsf	3,5	;RP0=1, select bank1
   861  05BF  1303               	bcf	3,6	;RP1=0, select bank1
   862  05C0  0854               	movf	(_str^(0+128)+1),w
   863  05C1  1283               	bcf	3,5	;RP0=0, select bank0
   864  05C2  1303               	bcf	3,6	;RP1=0, select bank0
   865  05C3  00C0               	movwf	??_main+3
   866  05C4  01C1               	clrf	??_main+4
   867  05C5  0840               	movf	??_main+3,w
   868  05C6  00A3               	movwf	?_sprintf+3
   869  05C7  0841               	movf	??_main+4,w
   870  05C8  00A4               	movwf	?_sprintf+4
   871  05C9  30A0               	movlw	(low (main@tx| 0))& (0+255)
   872  05CA  120A  118A  24B4  120A  118A  	fcall	_sprintf
   873                           
   874                           ;newmain.c: 93:    UART_Transmit_Text(tx);
   875  05CF  30A0               	movlw	(low (main@tx| 0))& (0+255)
   876  05D0  00F1               	movwf	UART_Transmit_Text@str
   877  05D1  3000               	movlw	0
   878  05D2  00F2               	movwf	UART_Transmit_Text@str+1
   879  05D3  120A  118A  2328  120A  118A  	fcall	_UART_Transmit_Text
   880  05D8                     l1811:
   881                           
   882                           ;newmain.c: 96:   status = MFRC522_AntiColl(str);
   883  05D8  30D3               	movlw	(low (_str| 0))& (0+255)
   884  05D9  120A  118A  244A  120A  118A  	fcall	_MFRC522_AntiColl
   885  05DE  1283               	bcf	3,5	;RP0=0, select bank0
   886  05DF  1303               	bcf	3,6	;RP1=0, select bank0
   887  05E0  00BD               	movwf	??_main
   888  05E1  083D               	movf	??_main,w
   889  05E2  1683               	bsf	3,5	;RP0=1, select bank1
   890  05E3  1303               	bcf	3,6	;RP1=0, select bank1
   891  05E4  00D2               	movwf	_status^(0+128)
   892  05E5                     l1813:
   893                           
   894                           ;newmain.c: 97:   memcpy(serNum, str, 5);
   895  05E5  30D3               	movlw	(low (_str| 0))& (0+255)
   896  05E6  1283               	bcf	3,5	;RP0=0, select bank0
   897  05E7  1303               	bcf	3,6	;RP1=0, select bank0
   898  05E8  00BD               	movwf	??_main
   899  05E9  083D               	movf	??_main,w
   900  05EA  00F0               	movwf	memcpy@s1
   901  05EB  3005               	movlw	5
   902  05EC  00F1               	movwf	memcpy@n
   903  05ED  3000               	movlw	0
   904  05EE  00F2               	movwf	memcpy@n+1
   905  05EF  30E3               	movlw	(low (_serNum| 0))& (0+255)
   906  05F0  120A  118A  2353  120A  118A  	fcall	_memcpy
   907  05F5                     l1815:
   908                           
   909                           ;newmain.c: 98:   if (status == 0)
   910  05F5  1683               	bsf	3,5	;RP0=1, select bank1
   911  05F6  1303               	bcf	3,6	;RP1=0, select bank1
   912  05F7  0852               	movf	_status^(0+128),w
   913  05F8  1D03               	btfss	3,2
   914  05F9  2DFB               	goto	u1141
   915  05FA  2DFC               	goto	u1140
   916  05FB                     u1141:
   917  05FB  2E48               	goto	l1819
   918  05FC                     u1140:
   919  05FC                     l1817:
   920                           
   921                           ;newmain.c: 99:   {;newmain.c: 100:    sprintf(tx, "Your card's number are: %x, %x, %x, 
      +                          %x, %x \r\n",serNum[0], serNum[1], serNum[2], serNum[3],serNum[4]);
   922  05FC  3009               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   923  05FD  1283               	bcf	3,5	;RP0=0, select bank0
   924  05FE  1303               	bcf	3,6	;RP1=0, select bank0
   925  05FF  00BD               	movwf	??_main
   926  0600  083D               	movf	??_main,w
   927  0601  00A0               	movwf	sprintf@f
   928  0602  1683               	bsf	3,5	;RP0=1, select bank1
   929  0603  1303               	bcf	3,6	;RP1=0, select bank1
   930  0604  0863               	movf	_serNum^(0+128),w
   931  0605  1283               	bcf	3,5	;RP0=0, select bank0
   932  0606  1303               	bcf	3,6	;RP1=0, select bank0
   933  0607  00BE               	movwf	??_main+1
   934  0608  01BF               	clrf	??_main+2
   935  0609  083E               	movf	??_main+1,w
   936  060A  00A1               	movwf	?_sprintf+1
   937  060B  083F               	movf	??_main+2,w
   938  060C  00A2               	movwf	?_sprintf+2
   939  060D  1683               	bsf	3,5	;RP0=1, select bank1
   940  060E  1303               	bcf	3,6	;RP1=0, select bank1
   941  060F  0864               	movf	(_serNum^(0+128)+1),w
   942  0610  1283               	bcf	3,5	;RP0=0, select bank0
   943  0611  1303               	bcf	3,6	;RP1=0, select bank0
   944  0612  00C0               	movwf	??_main+3
   945  0613  01C1               	clrf	??_main+4
   946  0614  0840               	movf	??_main+3,w
   947  0615  00A3               	movwf	?_sprintf+3
   948  0616  0841               	movf	??_main+4,w
   949  0617  00A4               	movwf	?_sprintf+4
   950  0618  1683               	bsf	3,5	;RP0=1, select bank1
   951  0619  1303               	bcf	3,6	;RP1=0, select bank1
   952  061A  0865               	movf	(_serNum^(0+128)+2),w
   953  061B  1283               	bcf	3,5	;RP0=0, select bank0
   954  061C  1303               	bcf	3,6	;RP1=0, select bank0
   955  061D  00C2               	movwf	??_main+5
   956  061E  01C3               	clrf	??_main+6
   957  061F  0842               	movf	??_main+5,w
   958  0620  00A5               	movwf	?_sprintf+5
   959  0621  0843               	movf	??_main+6,w
   960  0622  00A6               	movwf	?_sprintf+6
   961  0623  1683               	bsf	3,5	;RP0=1, select bank1
   962  0624  1303               	bcf	3,6	;RP1=0, select bank1
   963  0625  0866               	movf	(_serNum^(0+128)+3),w
   964  0626  1283               	bcf	3,5	;RP0=0, select bank0
   965  0627  1303               	bcf	3,6	;RP1=0, select bank0
   966  0628  00C4               	movwf	??_main+7
   967  0629  01C5               	clrf	??_main+8
   968  062A  0844               	movf	??_main+7,w
   969  062B  00A7               	movwf	?_sprintf+7
   970  062C  0845               	movf	??_main+8,w
   971  062D  00A8               	movwf	?_sprintf+8
   972  062E  1683               	bsf	3,5	;RP0=1, select bank1
   973  062F  1303               	bcf	3,6	;RP1=0, select bank1
   974  0630  0867               	movf	(_serNum^(0+128)+4),w
   975  0631  1283               	bcf	3,5	;RP0=0, select bank0
   976  0632  1303               	bcf	3,6	;RP1=0, select bank0
   977  0633  00C6               	movwf	??_main+9
   978  0634  01C7               	clrf	??_main+10
   979  0635  0846               	movf	??_main+9,w
   980  0636  00A9               	movwf	?_sprintf+9
   981  0637  0847               	movf	??_main+10,w
   982  0638  00AA               	movwf	?_sprintf+10
   983  0639  30A0               	movlw	(low (main@tx| 0))& (0+255)
   984  063A  120A  118A  24B4  120A  118A  	fcall	_sprintf
   985                           
   986                           ;newmain.c: 101:       UART_Transmit_Text(tx);
   987  063F  30A0               	movlw	(low (main@tx| 0))& (0+255)
   988  0640  00F1               	movwf	UART_Transmit_Text@str
   989  0641  3000               	movlw	0
   990  0642  00F2               	movwf	UART_Transmit_Text@str+1
   991  0643  120A  118A  2328  120A  118A  	fcall	_UART_Transmit_Text
   992  0648                     l1819:
   993                           
   994                           ;newmain.c: 103:         _delay((unsigned long)((1000)*(20000000/4000.0)));
   995  0648  301A               	movlw	26
   996  0649  1283               	bcf	3,5	;RP0=0, select bank0
   997  064A  1303               	bcf	3,6	;RP1=0, select bank0
   998  064B  00BF               	movwf	??_main+2
   999  064C  305E               	movlw	94
  1000  064D  00BE               	movwf	??_main+1
  1001  064E  306D               	movlw	109
  1002  064F  00BD               	movwf	??_main
  1003  0650                     u1157:
  1004  0650  0BBD               	decfsz	??_main,f
  1005  0651  2E50               	goto	u1157
  1006  0652  0BBE               	decfsz	??_main+1,f
  1007  0653  2E50               	goto	u1157
  1008  0654  0BBF               	decfsz	??_main+2,f
  1009  0655  2E50               	goto	u1157
  1010  0656  2E57               	nop2
  1011  0657  2D8C               	goto	l1803
  1012  0658  120A  118A  2800   	ljmp	start
  1013  065B                     __end_of_main:
  1014                           
  1015                           	psect	text1
  1016  04B4                     __ptext1:	
  1017 ;; *************** function _sprintf *****************
  1018 ;; Defined at:
  1019 ;;		line 505 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  sp              1    wreg     PTR unsigned char 
  1022 ;;		 -> main@tx(50), 
  1023 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1024 ;;		 -> STR_3(46), STR_2(26), 
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;  sp              1   16[BANK0 ] PTR unsigned char 
  1027 ;;		 -> main@tx(50), 
  1028 ;;  idx             1   11[BANK0 ] unsigned char 
  1029 ;;  tmpval          4    0        struct .
  1030 ;;  val             2   13[BANK0 ] unsigned int 
  1031 ;;  cp              2    0        PTR const unsigned char 
  1032 ;;  len             2    0        unsigned int 
  1033 ;;  c               1   17[BANK0 ] unsigned char 
  1034 ;;  prec            1   15[BANK0 ] char 
  1035 ;;  ap              1   12[BANK0 ] PTR void [1]
  1036 ;;		 -> ?_sprintf(2), 
  1037 ;;  flag            1    0        unsigned char 
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  2    0[BANK0 ] int 
  1040 ;; Registers used:
  1041 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1047 ;;      Params:         0      11       0       0       0
  1048 ;;      Locals:         0       7       0       0       0
  1049 ;;      Temps:          3       0       0       0       0
  1050 ;;      Totals:         3      18       0       0       0
  1051 ;;Total ram usage:       21 bytes
  1052 ;; Hardware stack levels used: 1
  1053 ;; Hardware stack levels required when called: 1
  1054 ;; This function calls:
  1055 ;;		___lwdiv
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           
  1062                           ;psect for function _sprintf
  1063  04B4                     _sprintf:
  1064                           
  1065                           ;incstack = 0
  1066                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1067                           ;sprintf@sp stored from wreg
  1068  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  1069  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  1070  04B6  00B0               	movwf	sprintf@sp
  1071  04B7                     l1605:
  1072                           
  1073                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 505: sprintf(char * sp, 
      +                          const char * f, ...);D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 506:
      +                           {;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 507:  va_list ap;;D:\F
      +                          ile Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 512:  char c;;D:\File Install
      +                           MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 521:  signed char prec;;D:\File Install 
      +                          MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
  1074  04B7  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1075  04B8  00F8               	movwf	??_sprintf
  1076  04B9  0878               	movf	??_sprintf,w
  1077  04BA  00AC               	movwf	sprintf@ap
  1078                           
  1079                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) 
      +                          {
  1080  04BB  2D61               	goto	l1647
  1081  04BC                     l1607:
  1082                           
  1083                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 555:   if(c != '%')
  1084  04BC  3025               	movlw	37
  1085  04BD  0631               	xorwf	sprintf@c,w
  1086  04BE  1903               	btfsc	3,2
  1087  04BF  2CC1               	goto	u901
  1088  04C0  2CC2               	goto	u900
  1089  04C1                     u901:
  1090  04C1  2CCE               	goto	l1613
  1091  04C2                     u900:
  1092  04C2                     l1609:
  1093                           
  1094                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 557:   {;D:\File Install
      +                           MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1095  04C2  0831               	movf	sprintf@c,w
  1096  04C3  00F8               	movwf	??_sprintf
  1097  04C4  0830               	movf	sprintf@sp,w
  1098  04C5  0084               	movwf	4
  1099  04C6  0878               	movf	??_sprintf,w
  1100  04C7  1383               	bcf	3,7	;select IRP bank0
  1101  04C8  0080               	movwf	0
  1102  04C9                     l1611:
  1103  04C9  3001               	movlw	1
  1104  04CA  00F8               	movwf	??_sprintf
  1105  04CB  0878               	movf	??_sprintf,w
  1106  04CC  07B0               	addwf	sprintf@sp,f
  1107                           
  1108                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 559:    continue;
  1109  04CD  2D61               	goto	l1647
  1110  04CE                     l1613:
  1111  04CE                     l1617:	
  1112                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 661:   switch(c = *f++) 
      +                          {
  1113                           
  1114  04CE  3001               	movlw	1
  1115  04CF  07A0               	addwf	sprintf@f,f
  1116  04D0  30FF               	movlw	-1
  1117  04D1  0720               	addwf	sprintf@f,w
  1118  04D2  0084               	movwf	4
  1119  04D3  120A  118A  200D  120A  118A  	fcall	stringdir
  1120  04D8  00B1               	movwf	sprintf@c
  1121  04D9  00F8               	movwf	??_sprintf
  1122  04DA  01F9               	clrf	??_sprintf+1
  1123                           
  1124                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1125                           ; Switch size 1, requested type "simple"
  1126                           ; Number of cases is 1, Range of values is 0 to 0
  1127                           ; switch strategies available:
  1128                           ; Name         Instructions Cycles
  1129                           ; simple_byte            4     3 (average)
  1130                           ; direct_byte           11     8 (fixed)
  1131                           ; jumptable            260     6 (fixed)
  1132                           ;	Chosen strategy is simple_byte
  1133  04DB  0879               	movf	??_sprintf+1,w
  1134  04DC  3A00               	xorlw	0	; case 0
  1135  04DD  1903               	skipnz
  1136  04DE  2CE0               	goto	l1861
  1137  04DF  2D61               	goto	l1647
  1138  04E0                     l1861:
  1139                           
  1140                           ; Switch size 1, requested type "simple"
  1141                           ; Number of cases is 2, Range of values is 0 to 120
  1142                           ; switch strategies available:
  1143                           ; Name         Instructions Cycles
  1144                           ; simple_byte            7     4 (average)
  1145                           ; jumptable            260     6 (fixed)
  1146                           ;	Chosen strategy is simple_byte
  1147  04E0  0878               	movf	??_sprintf,w
  1148  04E1  3A00               	xorlw	0	; case 0
  1149  04E2  1903               	skipnz
  1150  04E3  2D73               	goto	l1649
  1151  04E4  3A78               	xorlw	120	; case 120
  1152  04E5  1903               	skipnz
  1153  04E6  2CE8               	goto	l1619
  1154  04E7  2D61               	goto	l1647
  1155  04E8                     l1619:
  1156                           
  1157                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1299:   {;D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsigned *)__va_arg(
      +                          (*(unsigned **)ap), (unsigned)0));
  1158  04E8  082C               	movf	sprintf@ap,w
  1159  04E9  0084               	movwf	4
  1160  04EA  1383               	bcf	3,7	;select IRP bank0
  1161  04EB  0800               	movf	0,w
  1162  04EC  00AD               	movwf	sprintf@val
  1163  04ED  0A84               	incf	4,f
  1164  04EE  0800               	movf	0,w
  1165  04EF  00AE               	movwf	sprintf@val+1
  1166  04F0                     l1621:
  1167  04F0  3002               	movlw	2
  1168  04F1  00F8               	movwf	??_sprintf
  1169  04F2  0878               	movf	??_sprintf,w
  1170  04F3  07AC               	addwf	sprintf@ap,f
  1171  04F4                     l1623:
  1172                           
  1173                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1313:   };D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1342:    for(c = 1 ; c != sizeof hexpow
      +                          ers/sizeof hexpowers[0] ; c++)
  1174  04F4  01B1               	clrf	sprintf@c
  1175  04F5  0AB1               	incf	sprintf@c,f
  1176  04F6                     l1629:
  1177                           
  1178                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1343:     if(val < hexpo
      +                          wers[c])
  1179  04F6  0831               	movf	sprintf@c,w
  1180  04F7  00F8               	movwf	??_sprintf
  1181  04F8  0778               	addwf	??_sprintf,w
  1182  04F9  3E01               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  1183  04FA  0084               	movwf	4
  1184  04FB  120A  118A  200D  120A  118A  	fcall	stringdir
  1185  0500  00F9               	movwf	??_sprintf+1
  1186  0501  120A  118A  200D  120A  118A  	fcall	stringdir
  1187  0506  00FA               	movwf	??_sprintf+2
  1188  0507  087A               	movf	??_sprintf+2,w
  1189  0508  022E               	subwf	sprintf@val+1,w
  1190  0509  1D03               	skipz
  1191  050A  2D0D               	goto	u915
  1192  050B  0879               	movf	??_sprintf+1,w
  1193  050C  022D               	subwf	sprintf@val,w
  1194  050D                     u915:
  1195  050D  1803               	skipnc
  1196  050E  2D10               	goto	u911
  1197  050F  2D11               	goto	u910
  1198  0510                     u911:
  1199  0510  2D12               	goto	l1633
  1200  0511                     u910:
  1201  0511  2D1C               	goto	l1635
  1202  0512                     l1633:
  1203  0512  3001               	movlw	1
  1204  0513  00F8               	movwf	??_sprintf
  1205  0514  0878               	movf	??_sprintf,w
  1206  0515  07B1               	addwf	sprintf@c,f
  1207  0516  3004               	movlw	4
  1208  0517  0631               	xorwf	sprintf@c,w
  1209  0518  1D03               	btfss	3,2
  1210  0519  2D1B               	goto	u921
  1211  051A  2D1C               	goto	u920
  1212  051B                     u921:
  1213  051B  2CF6               	goto	l1629
  1214  051C                     u920:
  1215  051C                     l1635:
  1216                           
  1217                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1448:   {;D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1495:   };D:\File Install MBLAB IDE\XC8
      +                          \pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1218  051C  0831               	movf	sprintf@c,w
  1219  051D  00F8               	movwf	??_sprintf
  1220  051E  0878               	movf	??_sprintf,w
  1221  051F  00AF               	movwf	sprintf@prec
  1222                           
  1223                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
  1224  0520  2D58               	goto	l1645
  1225  0521                     l1637:
  1226                           
  1227                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1504:    {;D:\File Insta
      +                          ll MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1525:    {;D:\File Install MBLAB IDE\X
      +                          C8\pic\sources\c90\common\doprnt.c: 1526:     unsigned char idx = (val / hexpowers[(unsi
      +                          gned char)prec]) & 0xF;
  1228  0521  082F               	movf	sprintf@prec,w
  1229  0522  00F8               	movwf	??_sprintf
  1230  0523  0778               	addwf	??_sprintf,w
  1231  0524  3E01               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  1232  0525  0084               	movwf	4
  1233  0526  120A  118A  200D  120A  118A  	fcall	stringdir
  1234  052B  00F0               	movwf	___lwdiv@divisor
  1235  052C  120A  118A  200D  120A  118A  	fcall	stringdir
  1236  0531  00F1               	movwf	___lwdiv@divisor+1
  1237  0532  082E               	movf	sprintf@val+1,w
  1238  0533  00F3               	movwf	___lwdiv@dividend+1
  1239  0534  082D               	movf	sprintf@val,w
  1240  0535  00F2               	movwf	___lwdiv@dividend
  1241  0536  120A  118A  2406  120A  118A  	fcall	___lwdiv
  1242  053B  0870               	movf	?___lwdiv,w
  1243  053C  390F               	andlw	15
  1244  053D  00F9               	movwf	??_sprintf+1
  1245  053E  0879               	movf	??_sprintf+1,w
  1246  053F  1283               	bcf	3,5	;RP0=0, select bank0
  1247  0540  1303               	bcf	3,6	;RP1=0, select bank0
  1248  0541  00AB               	movwf	sprintf@idx
  1249  0542                     l1639:
  1250                           
  1251                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1532:     c = "012345678
      +                          9abcdef"[idx];
  1252  0542  082B               	movf	sprintf@idx,w
  1253  0543  3E67               	addlw	low ((STR_4-__stringbase)| (0+32768))
  1254  0544  0084               	movwf	4
  1255  0545  120A  118A  200D  120A  118A  	fcall	stringdir
  1256  054A  00F8               	movwf	??_sprintf
  1257  054B  0878               	movf	??_sprintf,w
  1258  054C  00B1               	movwf	sprintf@c
  1259  054D                     l1641:
  1260                           
  1261                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1534:    };D:\File Insta
      +                          ll MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1549:    };D:\File Install MBLAB IDE\X
      +                          C8\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)));
  1262  054D  0831               	movf	sprintf@c,w
  1263  054E  00F8               	movwf	??_sprintf
  1264  054F  0830               	movf	sprintf@sp,w
  1265  0550  0084               	movwf	4
  1266  0551  0878               	movf	??_sprintf,w
  1267  0552  1383               	bcf	3,7	;select IRP bank0
  1268  0553  0080               	movwf	0
  1269  0554                     l1643:
  1270  0554  3001               	movlw	1
  1271  0555  00F8               	movwf	??_sprintf
  1272  0556  0878               	movf	??_sprintf,w
  1273  0557  07B0               	addwf	sprintf@sp,f
  1274  0558                     l1645:
  1275                           
  1276                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
  1277  0558  30FF               	movlw	255
  1278  0559  00F8               	movwf	??_sprintf
  1279  055A  0878               	movf	??_sprintf,w
  1280  055B  07AF               	addwf	sprintf@prec,f
  1281  055C  0A2F               	incf	sprintf@prec,w
  1282  055D  1D03               	btfss	3,2
  1283  055E  2D60               	goto	u931
  1284  055F  2D61               	goto	u930
  1285  0560                     u931:
  1286  0560  2D21               	goto	l1637
  1287  0561                     u930:
  1288  0561                     l1647:
  1289                           
  1290                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) 
      +                          {
  1291  0561  3001               	movlw	1
  1292  0562  07A0               	addwf	sprintf@f,f
  1293  0563  30FF               	movlw	-1
  1294  0564  0720               	addwf	sprintf@f,w
  1295  0565  0084               	movwf	4
  1296  0566  120A  118A  200D  120A  118A  	fcall	stringdir
  1297  056B  00F8               	movwf	??_sprintf
  1298  056C  0878               	movf	??_sprintf,w
  1299  056D  00B1               	movwf	sprintf@c
  1300  056E  0831               	movf	sprintf@c,w
  1301  056F  1D03               	btfss	3,2
  1302  0570  2D72               	goto	u941
  1303  0571  2D73               	goto	u940
  1304  0572                     u941:
  1305  0572  2CBC               	goto	l1607
  1306  0573                     u940:
  1307  0573                     l1649:
  1308                           
  1309                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1310  0573  0830               	movf	sprintf@sp,w
  1311  0574  0084               	movwf	4
  1312  0575  1383               	bcf	3,7	;select IRP bank0
  1313  0576  0180               	clrf	0
  1314  0577                     l317:
  1315  0577  0008               	return
  1316  0578                     __end_of_sprintf:
  1317                           
  1318                           	psect	text2
  1319  0406                     __ptext2:	
  1320 ;; *************** function ___lwdiv *****************
  1321 ;; Defined at:
  1322 ;;		line 5 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\lwdiv.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;  divisor         2    0[COMMON] unsigned int 
  1325 ;;  dividend        2    2[COMMON] unsigned int 
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;  quotient        2    5[COMMON] unsigned int 
  1328 ;;  counter         1    7[COMMON] unsigned char 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  2    0[COMMON] unsigned int 
  1331 ;; Registers used:
  1332 ;;		wreg, status,2, status,0
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1338 ;;      Params:         4       0       0       0       0
  1339 ;;      Locals:         3       0       0       0       0
  1340 ;;      Temps:          1       0       0       0       0
  1341 ;;      Totals:         8       0       0       0       0
  1342 ;;Total ram usage:        8 bytes
  1343 ;; Hardware stack levels used: 1
  1344 ;; This function calls:
  1345 ;;		Nothing
  1346 ;; This function is called by:
  1347 ;;		_sprintf
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           
  1351                           
  1352                           ;psect for function ___lwdiv
  1353  0406                     ___lwdiv:
  1354  0406                     l1479:	
  1355                           ;incstack = 0
  1356                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1357                           
  1358  0406  01F5               	clrf	___lwdiv@quotient
  1359  0407  01F6               	clrf	___lwdiv@quotient+1
  1360  0408                     l1481:
  1361  0408  0870               	movf	___lwdiv@divisor,w
  1362  0409  0471               	iorwf	___lwdiv@divisor+1,w
  1363  040A  1903               	btfsc	3,2
  1364  040B  2C0D               	goto	u741
  1365  040C  2C0E               	goto	u740
  1366  040D                     u741:
  1367  040D  2C45               	goto	l1501
  1368  040E                     u740:
  1369  040E                     l1483:
  1370  040E  01F7               	clrf	___lwdiv@counter
  1371  040F  0AF7               	incf	___lwdiv@counter,f
  1372  0410  2C1C               	goto	l1489
  1373  0411                     l1485:
  1374  0411  3001               	movlw	1
  1375  0412                     u755:
  1376  0412  1003               	clrc
  1377  0413  0DF0               	rlf	___lwdiv@divisor,f
  1378  0414  0DF1               	rlf	___lwdiv@divisor+1,f
  1379  0415  3EFF               	addlw	-1
  1380  0416  1D03               	skipz
  1381  0417  2C12               	goto	u755
  1382  0418                     l1487:
  1383  0418  3001               	movlw	1
  1384  0419  00F4               	movwf	??___lwdiv
  1385  041A  0874               	movf	??___lwdiv,w
  1386  041B  07F7               	addwf	___lwdiv@counter,f
  1387  041C                     l1489:
  1388  041C  1FF1               	btfss	___lwdiv@divisor+1,7
  1389  041D  2C1F               	goto	u761
  1390  041E  2C20               	goto	u760
  1391  041F                     u761:
  1392  041F  2C11               	goto	l1485
  1393  0420                     u760:
  1394  0420                     l1491:
  1395  0420  3001               	movlw	1
  1396  0421                     u775:
  1397  0421  1003               	clrc
  1398  0422  0DF5               	rlf	___lwdiv@quotient,f
  1399  0423  0DF6               	rlf	___lwdiv@quotient+1,f
  1400  0424  3EFF               	addlw	-1
  1401  0425  1D03               	skipz
  1402  0426  2C21               	goto	u775
  1403  0427  0871               	movf	___lwdiv@divisor+1,w
  1404  0428  0273               	subwf	___lwdiv@dividend+1,w
  1405  0429  1D03               	skipz
  1406  042A  2C2D               	goto	u785
  1407  042B  0870               	movf	___lwdiv@divisor,w
  1408  042C  0272               	subwf	___lwdiv@dividend,w
  1409  042D                     u785:
  1410  042D  1C03               	skipc
  1411  042E  2C30               	goto	u781
  1412  042F  2C31               	goto	u780
  1413  0430                     u781:
  1414  0430  2C38               	goto	l1497
  1415  0431                     u780:
  1416  0431                     l1493:
  1417  0431  0870               	movf	___lwdiv@divisor,w
  1418  0432  02F2               	subwf	___lwdiv@dividend,f
  1419  0433  0871               	movf	___lwdiv@divisor+1,w
  1420  0434  1C03               	skipc
  1421  0435  03F3               	decf	___lwdiv@dividend+1,f
  1422  0436  02F3               	subwf	___lwdiv@dividend+1,f
  1423  0437                     l1495:
  1424  0437  1475               	bsf	___lwdiv@quotient,0
  1425  0438                     l1497:
  1426  0438  3001               	movlw	1
  1427  0439                     u795:
  1428  0439  1003               	clrc
  1429  043A  0CF1               	rrf	___lwdiv@divisor+1,f
  1430  043B  0CF0               	rrf	___lwdiv@divisor,f
  1431  043C  3EFF               	addlw	-1
  1432  043D  1D03               	skipz
  1433  043E  2C39               	goto	u795
  1434  043F                     l1499:
  1435  043F  3001               	movlw	1
  1436  0440  02F7               	subwf	___lwdiv@counter,f
  1437  0441  1D03               	btfss	3,2
  1438  0442  2C44               	goto	u801
  1439  0443  2C45               	goto	u800
  1440  0444                     u801:
  1441  0444  2C20               	goto	l1491
  1442  0445                     u800:
  1443  0445                     l1501:
  1444  0445  0876               	movf	___lwdiv@quotient+1,w
  1445  0446  00F1               	movwf	?___lwdiv+1
  1446  0447  0875               	movf	___lwdiv@quotient,w
  1447  0448  00F0               	movwf	?___lwdiv
  1448  0449                     l593:
  1449  0449  0008               	return
  1450  044A                     __end_of___lwdiv:
  1451                           
  1452                           	psect	text3
  1453  0353                     __ptext3:	
  1454 ;; *************** function _memcpy *****************
  1455 ;; Defined at:
  1456 ;;		line 27 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\memcpy.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;  d1              1    wreg     PTR void 
  1459 ;;		 -> serNum(5), 
  1460 ;;  s1              1    0[COMMON] PTR const void 
  1461 ;;		 -> str(16), 
  1462 ;;  n               2    1[COMMON] unsigned int 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  d1              1    5[COMMON] PTR void 
  1465 ;;		 -> serNum(5), 
  1466 ;;  s               1    7[COMMON] PTR const unsigned char 
  1467 ;;		 -> str(16), 
  1468 ;;  d               1    6[COMMON] PTR unsigned char 
  1469 ;;		 -> serNum(5), 
  1470 ;;  tmp             1    4[COMMON] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      PTR void 
  1473 ;; Registers used:
  1474 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1480 ;;      Params:         3       0       0       0       0
  1481 ;;      Locals:         4       0       0       0       0
  1482 ;;      Temps:          1       0       0       0       0
  1483 ;;      Totals:         8       0       0       0       0
  1484 ;;Total ram usage:        8 bytes
  1485 ;; Hardware stack levels used: 1
  1486 ;; This function calls:
  1487 ;;		Nothing
  1488 ;; This function is called by:
  1489 ;;		_main
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           
  1494                           ;psect for function _memcpy
  1495  0353                     _memcpy:
  1496                           
  1497                           ;incstack = 0
  1498                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  1499                           ;memcpy@d1 stored from wreg
  1500  0353  00F5               	movwf	memcpy@d1
  1501  0354                     l1657:
  1502  0354  0870               	movf	memcpy@s1,w
  1503  0355  00F3               	movwf	??_memcpy
  1504  0356  0873               	movf	??_memcpy,w
  1505  0357  00F7               	movwf	memcpy@s
  1506  0358  0875               	movf	memcpy@d1,w
  1507  0359  00F3               	movwf	??_memcpy
  1508  035A  0873               	movf	??_memcpy,w
  1509  035B  00F6               	movwf	memcpy@d
  1510  035C  2B72               	goto	l772
  1511  035D                     l1659:
  1512  035D  0877               	movf	memcpy@s,w
  1513  035E  0084               	movwf	4
  1514  035F  1383               	bcf	3,7	;select IRP bank0
  1515  0360  0800               	movf	0,w
  1516  0361  00F3               	movwf	??_memcpy
  1517  0362  0873               	movf	??_memcpy,w
  1518  0363  00F4               	movwf	memcpy@tmp
  1519  0364                     l1661:
  1520  0364  3001               	movlw	1
  1521  0365  00F3               	movwf	??_memcpy
  1522  0366  0873               	movf	??_memcpy,w
  1523  0367  07F7               	addwf	memcpy@s,f
  1524  0368                     l1663:
  1525  0368  0874               	movf	memcpy@tmp,w
  1526  0369  00F3               	movwf	??_memcpy
  1527  036A  0876               	movf	memcpy@d,w
  1528  036B  0084               	movwf	4
  1529  036C  0873               	movf	??_memcpy,w
  1530  036D  0080               	movwf	0
  1531  036E  3001               	movlw	1
  1532  036F  00F3               	movwf	??_memcpy
  1533  0370  0873               	movf	??_memcpy,w
  1534  0371  07F6               	addwf	memcpy@d,f
  1535  0372                     l772:
  1536  0372  3001               	movlw	1
  1537  0373  02F1               	subwf	memcpy@n,f
  1538  0374  3000               	movlw	0
  1539  0375  1C03               	skipc
  1540  0376  03F2               	decf	memcpy@n+1,f
  1541  0377  02F2               	subwf	memcpy@n+1,f
  1542  0378  0A71               	incf	memcpy@n,w
  1543  0379  1D03               	skipz
  1544  037A  2B7F               	goto	u951
  1545  037B  0A72               	incf	memcpy@n+1,w
  1546  037C  1D03               	btfss	3,2
  1547  037D  2B7F               	goto	u951
  1548  037E  2B80               	goto	u950
  1549  037F                     u951:
  1550  037F  2B5D               	goto	l1659
  1551  0380                     u950:
  1552  0380                     l775:
  1553  0380  0008               	return
  1554  0381                     __end_of_memcpy:
  1555                           
  1556                           	psect	text4
  1557  0328                     __ptext4:	
  1558 ;; *************** function _UART_Transmit_Text *****************
  1559 ;; Defined at:
  1560 ;;		line 68 in file "newmain.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  str             2    1[COMMON] PTR unsigned char 
  1563 ;;		 -> main@tx(50), STR_1(22), 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  i               1    4[COMMON] unsigned char 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1575 ;;      Params:         2       0       0       0       0
  1576 ;;      Locals:         1       0       0       0       0
  1577 ;;      Temps:          1       0       0       0       0
  1578 ;;      Totals:         4       0       0       0       0
  1579 ;;Total ram usage:        4 bytes
  1580 ;; Hardware stack levels used: 1
  1581 ;; Hardware stack levels required when called: 1
  1582 ;; This function calls:
  1583 ;;		_UART_Transmit
  1584 ;; This function is called by:
  1585 ;;		_main
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           
  1590                           ;psect for function _UART_Transmit_Text
  1591  0328                     _UART_Transmit_Text:
  1592  0328                     l1597:	
  1593                           ;incstack = 0
  1594                           ; Regs used in _UART_Transmit_Text: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1595                           
  1596                           
  1597                           ;newmain.c: 68: void UART_Transmit_Text(char *str);newmain.c: 69: {;newmain.c: 70:     u
      +                          nsigned char i=0;
  1598  0328  01F4               	clrf	UART_Transmit_Text@i
  1599                           
  1600                           ;newmain.c: 71:     while(str[i] != 0)
  1601  0329  2B3F               	goto	l1603
  1602  032A                     l1599:
  1603                           
  1604                           ;newmain.c: 72:     {;newmain.c: 73:         UART_Transmit(str[i]);
  1605  032A  0874               	movf	UART_Transmit_Text@i,w
  1606  032B  0771               	addwf	UART_Transmit_Text@str,w
  1607  032C  0084               	movwf	4
  1608  032D  0872               	movf	UART_Transmit_Text@str+1,w
  1609  032E  1803               	skipnc
  1610  032F  0A72               	incf	UART_Transmit_Text@str+1,w
  1611  0330  00FF               	movwf	btemp+1
  1612  0331  120A  118A  2003  120A  118A  	fcall	stringtab
  1613  0336  120A  118A  2297  120A  118A  	fcall	_UART_Transmit
  1614  033B                     l1601:
  1615                           
  1616                           ;newmain.c: 74:         i++;
  1617  033B  3001               	movlw	1
  1618  033C  00F3               	movwf	??_UART_Transmit_Text
  1619  033D  0873               	movf	??_UART_Transmit_Text,w
  1620  033E  07F4               	addwf	UART_Transmit_Text@i,f
  1621  033F                     l1603:
  1622                           
  1623                           ;newmain.c: 71:     while(str[i] != 0)
  1624  033F  0874               	movf	UART_Transmit_Text@i,w
  1625  0340  0771               	addwf	UART_Transmit_Text@str,w
  1626  0341  0084               	movwf	4
  1627  0342  0872               	movf	UART_Transmit_Text@str+1,w
  1628  0343  1803               	skipnc
  1629  0344  0A72               	incf	UART_Transmit_Text@str+1,w
  1630  0345  1283               	bcf	3,5	;RP0=0, select bank0
  1631  0346  1303               	bcf	3,6	;RP1=0, select bank0
  1632  0347  00FF               	movwf	btemp+1
  1633  0348  120A  118A  2003  120A  118A  	fcall	stringtab
  1634  034D  3A00               	xorlw	0
  1635  034E  1D03               	skipz
  1636  034F  2B51               	goto	u891
  1637  0350  2B52               	goto	u890
  1638  0351                     u891:
  1639  0351  2B2A               	goto	l1599
  1640  0352                     u890:
  1641  0352                     l200:
  1642  0352  0008               	return
  1643  0353                     __end_of_UART_Transmit_Text:
  1644                           
  1645                           	psect	text5
  1646  0297                     __ptext5:	
  1647 ;; *************** function _UART_Transmit *****************
  1648 ;; Defined at:
  1649 ;;		line 63 in file "newmain.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;  c               1    wreg     unsigned char 
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  c               1    0[COMMON] unsigned char 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1663 ;;      Params:         0       0       0       0       0
  1664 ;;      Locals:         1       0       0       0       0
  1665 ;;      Temps:          0       0       0       0       0
  1666 ;;      Totals:         1       0       0       0       0
  1667 ;;Total ram usage:        1 bytes
  1668 ;; Hardware stack levels used: 1
  1669 ;; This function calls:
  1670 ;;		Nothing
  1671 ;; This function is called by:
  1672 ;;		_UART_Transmit_Text
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           
  1677                           ;psect for function _UART_Transmit
  1678  0297                     _UART_Transmit:
  1679                           
  1680                           ;incstack = 0
  1681                           ; Regs used in _UART_Transmit: [wreg]
  1682                           ;UART_Transmit@c stored from wreg
  1683  0297  00F0               	movwf	UART_Transmit@c
  1684  0298                     l1475:
  1685  0298                     l191:	
  1686                           ;newmain.c: 63: void UART_Transmit(char c);newmain.c: 64: {;newmain.c: 65:     while(!TR
      +                          MT);
  1687                           
  1688  0298  1683               	bsf	3,5	;RP0=1, select bank1
  1689  0299  1303               	bcf	3,6	;RP1=0, select bank1
  1690  029A  1C98               	btfss	24,1	;volatile
  1691  029B  2A9D               	goto	u731
  1692  029C  2A9E               	goto	u730
  1693  029D                     u731:
  1694  029D  2A98               	goto	l191
  1695  029E                     u730:
  1696  029E                     l1477:
  1697                           
  1698                           ;newmain.c: 66:     TXREG = c;
  1699  029E  0870               	movf	UART_Transmit@c,w
  1700  029F  1283               	bcf	3,5	;RP0=0, select bank0
  1701  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  1702  02A1  0099               	movwf	25	;volatile
  1703  02A2                     l194:
  1704  02A2  0008               	return
  1705  02A3                     __end_of_UART_Transmit:
  1706                           
  1707                           	psect	text6
  1708  02B5                     __ptext6:	
  1709 ;; *************** function _UART_Init *****************
  1710 ;; Defined at:
  1711 ;;		line 52 in file "newmain.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;		None
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;		None
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1725 ;;      Params:         0       0       0       0       0
  1726 ;;      Locals:         0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0
  1728 ;;      Totals:         0       0       0       0       0
  1729 ;;Total ram usage:        0 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; This function calls:
  1732 ;;		Nothing
  1733 ;; This function is called by:
  1734 ;;		_main
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           
  1739                           ;psect for function _UART_Init
  1740  02B5                     _UART_Init:
  1741  02B5                     l1583:	
  1742                           ;incstack = 0
  1743                           ; Regs used in _UART_Init: [wreg]
  1744                           
  1745                           
  1746                           ;newmain.c: 55:     SPBRG = 32;
  1747  02B5  3020               	movlw	32
  1748  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  1749  02B7  1303               	bcf	3,6	;RP1=0, select bank1
  1750  02B8  0099               	movwf	25	;volatile
  1751  02B9                     l1585:
  1752                           
  1753                           ;newmain.c: 56:     SPEN = 1;
  1754  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1755  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  1756  02BB  1798               	bsf	24,7	;volatile
  1757  02BC                     l1587:
  1758                           
  1759                           ;newmain.c: 57:     TXEN = 1;
  1760  02BC  1683               	bsf	3,5	;RP0=1, select bank1
  1761  02BD  1303               	bcf	3,6	;RP1=0, select bank1
  1762  02BE  1698               	bsf	24,5	;volatile
  1763  02BF                     l1589:
  1764                           
  1765                           ;newmain.c: 58:     CREN = 1;
  1766  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  1767  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  1768  02C1  1618               	bsf	24,4	;volatile
  1769  02C2                     l1591:
  1770                           
  1771                           ;newmain.c: 59:     RCIE = 1;
  1772  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  1773  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  1774  02C4  168C               	bsf	12,5	;volatile
  1775  02C5                     l1593:
  1776                           
  1777                           ;newmain.c: 60:     INTCONbits.GIE = 1;
  1778  02C5  178B               	bsf	11,7	;volatile
  1779  02C6                     l1595:
  1780                           
  1781                           ;newmain.c: 61:     INTCONbits.PEIE = 1;
  1782  02C6  170B               	bsf	11,6	;volatile
  1783  02C7                     l188:
  1784  02C7  0008               	return
  1785  02C8                     __end_of_UART_Init:
  1786                           
  1787                           	psect	text7
  1788  02F3                     __ptext7:	
  1789 ;; *************** function _SPI_Init *****************
  1790 ;; Defined at:
  1791 ;;		line 121 in file "./rfid.h"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;		None
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		None
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1805 ;;      Params:         0       0       0       0       0
  1806 ;;      Locals:         0       0       0       0       0
  1807 ;;      Temps:          0       0       0       0       0
  1808 ;;      Totals:         0       0       0       0       0
  1809 ;;Total ram usage:        0 bytes
  1810 ;; Hardware stack levels used: 1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_main
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           
  1819                           ;psect for function _SPI_Init
  1820  02F3                     _SPI_Init:
  1821  02F3                     l1505:	
  1822                           ;incstack = 0
  1823                           ; Regs used in _SPI_Init: []
  1824                           
  1825                           
  1826                           ;./rfid.h: 124:     TRISCbits.TRISC0 = 0;
  1827  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  1828  02F4  1303               	bcf	3,6	;RP1=0, select bank1
  1829  02F5  1007               	bcf	7,0	;volatile
  1830                           
  1831                           ;./rfid.h: 125:     TRISCbits.TRISC1 = 0;
  1832  02F6  1087               	bcf	7,1	;volatile
  1833                           
  1834                           ;./rfid.h: 126:     PORTCbits.RC0 = 1;
  1835  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  1836  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  1837  02F9  1407               	bsf	7,0	;volatile
  1838                           
  1839                           ;./rfid.h: 127:     PORTCbits.RC1 = 1;
  1840  02FA  1487               	bsf	7,1	;volatile
  1841                           
  1842                           ;./rfid.h: 129:     TRISCbits.TRISC3 = 0;
  1843  02FB  1683               	bsf	3,5	;RP0=1, select bank1
  1844  02FC  1303               	bcf	3,6	;RP1=0, select bank1
  1845  02FD  1187               	bcf	7,3	;volatile
  1846                           
  1847                           ;./rfid.h: 130:     TRISCbits.TRISC4 = 1;
  1848  02FE  1607               	bsf	7,4	;volatile
  1849                           
  1850                           ;./rfid.h: 131:     TRISCbits.TRISC5 = 0;
  1851  02FF  1287               	bcf	7,5	;volatile
  1852                           
  1853                           ;./rfid.h: 133:     SSPSTATbits.SMP = 0;
  1854  0300  1394               	bcf	20,7	;volatile
  1855                           
  1856                           ;./rfid.h: 134:     SSPSTATbits.CKE = 0;
  1857  0301  1314               	bcf	20,6	;volatile
  1858                           
  1859                           ;./rfid.h: 136:     SSPCONbits.WCOL = 0;
  1860  0302  1283               	bcf	3,5	;RP0=0, select bank0
  1861  0303  1303               	bcf	3,6	;RP1=0, select bank0
  1862  0304  1394               	bcf	20,7	;volatile
  1863                           
  1864                           ;./rfid.h: 137:     SSPCONbits.SSPOV = 0;
  1865  0305  1314               	bcf	20,6	;volatile
  1866                           
  1867                           ;./rfid.h: 138:     SSPCONbits.SSPEN = 1;
  1868  0306  1694               	bsf	20,5	;volatile
  1869                           
  1870                           ;./rfid.h: 139:     SSPCONbits.CKP = 0;
  1871  0307  1214               	bcf	20,4	;volatile
  1872                           
  1873                           ;./rfid.h: 140:     SSPCONbits.SSPM3 = 0;
  1874  0308  1194               	bcf	20,3	;volatile
  1875                           
  1876                           ;./rfid.h: 141:     SSPCONbits.SSPM2 = 0;
  1877  0309  1114               	bcf	20,2	;volatile
  1878                           
  1879                           ;./rfid.h: 142:     SSPCONbits.SSPM1 = 0;
  1880  030A  1094               	bcf	20,1	;volatile
  1881                           
  1882                           ;./rfid.h: 143:     SSPCONbits.SSPM0 = 0;
  1883  030B  1014               	bcf	20,0	;volatile
  1884  030C                     l37:
  1885  030C  0008               	return
  1886  030D                     __end_of_SPI_Init:
  1887                           
  1888                           	psect	text8
  1889  0381                     __ptext8:	
  1890 ;; *************** function _MFRC522_Request *****************
  1891 ;; Defined at:
  1892 ;;		line 340 in file "./rfid.h"
  1893 ;; Parameters:    Size  Location     Type
  1894 ;;  reqMode         1    wreg     unsigned char 
  1895 ;;  TagType         1   11[COMMON] PTR unsigned char 
  1896 ;;		 -> str(16), 
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;  reqMode         1   22[BANK0 ] unsigned char 
  1899 ;;  backBits        2   24[BANK0 ] unsigned int 
  1900 ;;  _status         1   23[BANK0 ] unsigned char 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      unsigned char 
  1903 ;; Registers used:
  1904 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1910 ;;      Params:         1       0       0       0       0
  1911 ;;      Locals:         0       4       0       0       0
  1912 ;;      Temps:          0       4       0       0       0
  1913 ;;      Totals:         1       8       0       0       0
  1914 ;;Total ram usage:        9 bytes
  1915 ;; Hardware stack levels used: 1
  1916 ;; Hardware stack levels required when called: 4
  1917 ;; This function calls:
  1918 ;;		_MFRC522_ToCard
  1919 ;;		_MFRC522_Wr
  1920 ;; This function is called by:
  1921 ;;		_main
  1922 ;;		_MFRC522_isCard
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           
  1927                           ;psect for function _MFRC522_Request
  1928  0381                     _MFRC522_Request:
  1929                           
  1930                           ;incstack = 0
  1931                           ; Regs used in _MFRC522_Request: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1932                           ;MFRC522_Request@reqMode stored from wreg
  1933  0381  1283               	bcf	3,5	;RP0=0, select bank0
  1934  0382  1303               	bcf	3,6	;RP1=0, select bank0
  1935  0383  00B6               	movwf	MFRC522_Request@reqMode
  1936  0384                     l1509:
  1937                           
  1938                           ;./rfid.h: 340: char MFRC522_Request( char reqMode, char *TagType );./rfid.h: 341: {;./r
      +                          fid.h: 342:   char _status;;./rfid.h: 343:   unsigned backBits;;./rfid.h: 345:   MFRC522
      +                          _Wr( 0x0D, 0x07 );
  1939  0384  3007               	movlw	7
  1940  0385  00B2               	movwf	??_MFRC522_Request
  1941  0386  0832               	movf	??_MFRC522_Request,w
  1942  0387  00F4               	movwf	MFRC522_Wr@value
  1943  0388  300D               	movlw	13
  1944  0389  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  1945  038E                     l1511:
  1946                           
  1947                           ;./rfid.h: 347:   TagType[0] = reqMode;
  1948  038E  1283               	bcf	3,5	;RP0=0, select bank0
  1949  038F  1303               	bcf	3,6	;RP1=0, select bank0
  1950  0390  0836               	movf	MFRC522_Request@reqMode,w
  1951  0391  00B2               	movwf	??_MFRC522_Request
  1952  0392  087B               	movf	MFRC522_Request@TagType,w
  1953  0393  0084               	movwf	4
  1954  0394  0832               	movf	??_MFRC522_Request,w
  1955  0395  1383               	bcf	3,7	;select IRP bank0
  1956  0396  0080               	movwf	0
  1957  0397                     l1513:
  1958                           
  1959                           ;./rfid.h: 348:   _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  1960  0397  087B               	movf	MFRC522_Request@TagType,w
  1961  0398  00B2               	movwf	??_MFRC522_Request
  1962  0399  0832               	movf	??_MFRC522_Request,w
  1963  039A  00A0               	movwf	MFRC522_ToCard@sendData
  1964  039B  01A1               	clrf	MFRC522_ToCard@sendLen
  1965  039C  0AA1               	incf	MFRC522_ToCard@sendLen,f
  1966  039D  087B               	movf	MFRC522_Request@TagType,w
  1967  039E  00B3               	movwf	??_MFRC522_Request+1
  1968  039F  0833               	movf	??_MFRC522_Request+1,w
  1969  03A0  00A2               	movwf	MFRC522_ToCard@backData
  1970  03A1  3038               	movlw	(low (MFRC522_Request@backBits| 0))& (0+255)
  1971  03A2  00B4               	movwf	??_MFRC522_Request+2
  1972  03A3  0834               	movf	??_MFRC522_Request+2,w
  1973  03A4  00A3               	movwf	MFRC522_ToCard@backLen
  1974  03A5  300C               	movlw	12
  1975  03A6  120A  118A  265B  120A  118A  	fcall	_MFRC522_ToCard
  1976  03AB  1283               	bcf	3,5	;RP0=0, select bank0
  1977  03AC  1303               	bcf	3,6	;RP1=0, select bank0
  1978  03AD  00B5               	movwf	??_MFRC522_Request+3
  1979  03AE  0835               	movf	??_MFRC522_Request+3,w
  1980  03AF  00B7               	movwf	MFRC522_Request@_status
  1981  03B0                     l1515:
  1982                           
  1983                           ;./rfid.h: 350:   if ( (_status != 0) || (backBits != 0x10) )
  1984  03B0  0837               	movf	MFRC522_Request@_status,w
  1985  03B1  1D03               	btfss	3,2
  1986  03B2  2BB4               	goto	u811
  1987  03B3  2BB5               	goto	u810
  1988  03B4                     u811:
  1989  03B4  2BBC               	goto	l1519
  1990  03B5                     u810:
  1991  03B5                     l1517:
  1992  03B5  3010               	movlw	16
  1993  03B6  0638               	xorwf	MFRC522_Request@backBits,w
  1994  03B7  0439               	iorwf	MFRC522_Request@backBits+1,w
  1995  03B8  1903               	btfsc	3,2
  1996  03B9  2BBB               	goto	u821
  1997  03BA  2BBC               	goto	u820
  1998  03BB                     u821:
  1999  03BB  2BC0               	goto	l104
  2000  03BC                     u820:
  2001  03BC                     l1519:
  2002                           
  2003                           ;./rfid.h: 351:   {;./rfid.h: 352:     _status = 2;
  2004  03BC  3002               	movlw	2
  2005  03BD  00B2               	movwf	??_MFRC522_Request
  2006  03BE  0832               	movf	??_MFRC522_Request,w
  2007  03BF  00B7               	movwf	MFRC522_Request@_status
  2008  03C0                     l104:	
  2009                           ;./rfid.h: 353:   }
  2010                           
  2011                           
  2012                           ;./rfid.h: 355:   return _status;
  2013  03C0  0837               	movf	MFRC522_Request@_status,w
  2014  03C1                     l107:
  2015  03C1  0008               	return
  2016  03C2                     __end_of_MFRC522_Request:
  2017                           
  2018                           	psect	text9
  2019  03C2                     __ptext9:	
  2020 ;; *************** function _MFRC522_Init *****************
  2021 ;; Defined at:
  2022 ;;		line 207 in file "./rfid.h"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;		None
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, status,2, status,0, pclath, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2036 ;;      Params:         0       0       0       0       0
  2037 ;;      Locals:         0       0       0       0       0
  2038 ;;      Temps:          1       0       0       0       0
  2039 ;;      Totals:         1       0       0       0       0
  2040 ;;Total ram usage:        1 bytes
  2041 ;; Hardware stack levels used: 1
  2042 ;; Hardware stack levels required when called: 4
  2043 ;; This function calls:
  2044 ;;		_MFRC522_AntennaOn
  2045 ;;		_MFRC522_Reset
  2046 ;;		_MFRC522_Wr
  2047 ;; This function is called by:
  2048 ;;		_main
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           
  2053                           ;psect for function _MFRC522_Init
  2054  03C2                     _MFRC522_Init:
  2055  03C2                     l1507:	
  2056                           ;incstack = 0
  2057                           ; Regs used in _MFRC522_Init: [wreg+status,2+status,0+pclath+cstack]
  2058                           
  2059                           
  2060                           ;./rfid.h: 209:     MFRC522_Reset();
  2061  03C2  120A  118A  228C  120A  118A  	fcall	_MFRC522_Reset
  2062                           
  2063                           ;./rfid.h: 211:     MFRC522_Wr( 0x2A, 0x8D );
  2064  03C7  308D               	movlw	141
  2065  03C8  00FB               	movwf	??_MFRC522_Init
  2066  03C9  087B               	movf	??_MFRC522_Init,w
  2067  03CA  00F4               	movwf	MFRC522_Wr@value
  2068  03CB  302A               	movlw	42
  2069  03CC  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2070                           
  2071                           ;./rfid.h: 212:     MFRC522_Wr( 0x2B, 0x3E );
  2072  03D1  303E               	movlw	62
  2073  03D2  00FB               	movwf	??_MFRC522_Init
  2074  03D3  087B               	movf	??_MFRC522_Init,w
  2075  03D4  00F4               	movwf	MFRC522_Wr@value
  2076  03D5  302B               	movlw	43
  2077  03D6  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2078                           
  2079                           ;./rfid.h: 213:     MFRC522_Wr( 0x2D, 30 );
  2080  03DB  301E               	movlw	30
  2081  03DC  00FB               	movwf	??_MFRC522_Init
  2082  03DD  087B               	movf	??_MFRC522_Init,w
  2083  03DE  00F4               	movwf	MFRC522_Wr@value
  2084  03DF  302D               	movlw	45
  2085  03E0  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2086                           
  2087                           ;./rfid.h: 214:     MFRC522_Wr( 0x2C, 0 );
  2088  03E5  01F4               	clrf	MFRC522_Wr@value
  2089  03E6  302C               	movlw	44
  2090  03E7  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2091                           
  2092                           ;./rfid.h: 216:     MFRC522_Wr( 0x15, 0x40 );
  2093  03EC  3040               	movlw	64
  2094  03ED  00FB               	movwf	??_MFRC522_Init
  2095  03EE  087B               	movf	??_MFRC522_Init,w
  2096  03EF  00F4               	movwf	MFRC522_Wr@value
  2097  03F0  3015               	movlw	21
  2098  03F1  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2099                           
  2100                           ;./rfid.h: 217:     MFRC522_Wr( 0x11, 0x3D );
  2101  03F6  303D               	movlw	61
  2102  03F7  00FB               	movwf	??_MFRC522_Init
  2103  03F8  087B               	movf	??_MFRC522_Init,w
  2104  03F9  00F4               	movwf	MFRC522_Wr@value
  2105  03FA  3011               	movlw	17
  2106  03FB  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2107                           
  2108                           ;./rfid.h: 223:     MFRC522_AntennaOn();
  2109  0400  120A  118A  2281  120A  118A  	fcall	_MFRC522_AntennaOn
  2110  0405                     l73:
  2111  0405  0008               	return
  2112  0406                     __end_of_MFRC522_Init:
  2113                           
  2114                           	psect	text10
  2115  028C                     __ptext10:	
  2116 ;; *************** function _MFRC522_Reset *****************
  2117 ;; Defined at:
  2118 ;;		line 192 in file "./rfid.h"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;		None
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;		None
  2123 ;; Return value:  Size  Location     Type
  2124 ;;                  1    wreg      void 
  2125 ;; Registers used:
  2126 ;;		wreg, status,2, status,0, pclath, cstack
  2127 ;; Tracked objects:
  2128 ;;		On entry : 0/0
  2129 ;;		On exit  : 0/0
  2130 ;;		Unchanged: 0/0
  2131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2132 ;;      Params:         0       0       0       0       0
  2133 ;;      Locals:         0       0       0       0       0
  2134 ;;      Temps:          1       0       0       0       0
  2135 ;;      Totals:         1       0       0       0       0
  2136 ;;Total ram usage:        1 bytes
  2137 ;; Hardware stack levels used: 1
  2138 ;; Hardware stack levels required when called: 2
  2139 ;; This function calls:
  2140 ;;		_MFRC522_Wr
  2141 ;; This function is called by:
  2142 ;;		_MFRC522_Init
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           
  2147                           ;psect for function _MFRC522_Reset
  2148  028C                     _MFRC522_Reset:
  2149  028C                     l1383:	
  2150                           ;incstack = 0
  2151                           ; Regs used in _MFRC522_Reset: [wreg+status,2+status,0+pclath+cstack]
  2152                           
  2153                           
  2154                           ;./rfid.h: 194:     MFRC522_Wr( 0x01, 0x0F );
  2155  028C  300F               	movlw	15
  2156  028D  00F7               	movwf	??_MFRC522_Reset
  2157  028E  0877               	movf	??_MFRC522_Reset,w
  2158  028F  00F4               	movwf	MFRC522_Wr@value
  2159  0290  3001               	movlw	1
  2160  0291  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2161  0296                     l64:
  2162  0296  0008               	return
  2163  0297                     __end_of_MFRC522_Reset:
  2164                           
  2165                           	psect	text11
  2166  0281                     __ptext11:	
  2167 ;; *************** function _MFRC522_AntennaOn *****************
  2168 ;; Defined at:
  2169 ;;		line 197 in file "./rfid.h"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;		None
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;		None
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  1    wreg      void 
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0, pclath, cstack
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2183 ;;      Params:         0       0       0       0       0
  2184 ;;      Locals:         0       0       0       0       0
  2185 ;;      Temps:          1       0       0       0       0
  2186 ;;      Totals:         1       0       0       0       0
  2187 ;;Total ram usage:        1 bytes
  2188 ;; Hardware stack levels used: 1
  2189 ;; Hardware stack levels required when called: 3
  2190 ;; This function calls:
  2191 ;;		_MFRC522_Set_Bit
  2192 ;; This function is called by:
  2193 ;;		_MFRC522_Init
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           
  2198                           ;psect for function _MFRC522_AntennaOn
  2199  0281                     _MFRC522_AntennaOn:
  2200  0281                     l1385:	
  2201                           ;incstack = 0
  2202                           ; Regs used in _MFRC522_AntennaOn: [wreg+status,2+status,0+pclath+cstack]
  2203                           
  2204                           
  2205                           ;./rfid.h: 199:  MFRC522_Set_Bit( 0x14, 0x03 );
  2206  0281  3003               	movlw	3
  2207  0282  00FA               	movwf	??_MFRC522_AntennaOn
  2208  0283  087A               	movf	??_MFRC522_AntennaOn,w
  2209  0284  00F7               	movwf	MFRC522_Set_Bit@mask
  2210  0285  3014               	movlw	20
  2211  0286  120A  118A  22A3  120A  118A  	fcall	_MFRC522_Set_Bit
  2212  028B                     l67:
  2213  028B  0008               	return
  2214  028C                     __end_of_MFRC522_AntennaOn:
  2215                           
  2216                           	psect	text12
  2217  044A                     __ptext12:	
  2218 ;; *************** function _MFRC522_AntiColl *****************
  2219 ;; Defined at:
  2220 ;;		line 522 in file "./rfid.h"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  serNum          1    wreg     PTR unsigned char 
  2223 ;;		 -> str(16), 
  2224 ;; Auto vars:     Size  Location     Type
  2225 ;;  serNum          1   28[BANK0 ] PTR unsigned char 
  2226 ;;		 -> str(16), 
  2227 ;;  unLen           2   24[BANK0 ] unsigned int 
  2228 ;;  i               1   27[BANK0 ] unsigned char 
  2229 ;;  _status         1   26[BANK0 ] unsigned char 
  2230 ;;  serNumCheck     1   23[BANK0 ] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      unsigned char 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2240 ;;      Params:         0       0       0       0       0
  2241 ;;      Locals:         0       6       0       0       0
  2242 ;;      Temps:          0       5       0       0       0
  2243 ;;      Totals:         0      11       0       0       0
  2244 ;;Total ram usage:       11 bytes
  2245 ;; Hardware stack levels used: 1
  2246 ;; Hardware stack levels required when called: 4
  2247 ;; This function calls:
  2248 ;;		_MFRC522_Clear_Bit
  2249 ;;		_MFRC522_ToCard
  2250 ;;		_MFRC522_Wr
  2251 ;; This function is called by:
  2252 ;;		_main
  2253 ;;		_MFRC522_ReadCardSerial
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           
  2258                           ;psect for function _MFRC522_AntiColl
  2259  044A                     _MFRC522_AntiColl:
  2260                           
  2261                           ;incstack = 0
  2262                           ; Regs used in _MFRC522_AntiColl: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2263                           ;MFRC522_AntiColl@serNum stored from wreg
  2264  044A  1283               	bcf	3,5	;RP0=0, select bank0
  2265  044B  1303               	bcf	3,6	;RP1=0, select bank0
  2266  044C  00BC               	movwf	MFRC522_AntiColl@serNum
  2267  044D                     l1549:
  2268                           
  2269                           ;./rfid.h: 522: char MFRC522_AntiColl( char *serNum );./rfid.h: 523: {;./rfid.h: 524:   
      +                          char _status;;./rfid.h: 525:   char i;;./rfid.h: 526:   char serNumCheck = 0;
  2270  044D  01B7               	clrf	MFRC522_AntiColl@serNumCheck
  2271  044E                     l1551:
  2272                           
  2273                           ;./rfid.h: 527:   unsigned unLen;;./rfid.h: 529:   MFRC522_Wr( 0x0D, 0x00 );
  2274  044E  01F4               	clrf	MFRC522_Wr@value
  2275  044F  300D               	movlw	13
  2276  0450  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2277  0455                     l1553:
  2278                           
  2279                           ;./rfid.h: 531:   serNum[0] = 0x93;
  2280  0455  3093               	movlw	147
  2281  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2282  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2283  0458  00B2               	movwf	??_MFRC522_AntiColl
  2284  0459  083C               	movf	MFRC522_AntiColl@serNum,w
  2285  045A  0084               	movwf	4
  2286  045B  0832               	movf	??_MFRC522_AntiColl,w
  2287  045C  1383               	bcf	3,7	;select IRP bank0
  2288  045D  0080               	movwf	0
  2289  045E                     l1555:
  2290                           
  2291                           ;./rfid.h: 532:   serNum[1] = 0x20;
  2292  045E  3020               	movlw	32
  2293  045F  00B2               	movwf	??_MFRC522_AntiColl
  2294  0460  0A3C               	incf	MFRC522_AntiColl@serNum,w
  2295  0461  0084               	movwf	4
  2296  0462  0832               	movf	??_MFRC522_AntiColl,w
  2297  0463  0080               	movwf	0
  2298  0464                     l1557:
  2299                           
  2300                           ;./rfid.h: 533:   MFRC522_Clear_Bit( 0x08, 0x08 );
  2301  0464  3008               	movlw	8
  2302  0465  00B2               	movwf	??_MFRC522_AntiColl
  2303  0466  0832               	movf	??_MFRC522_AntiColl,w
  2304  0467  00F7               	movwf	MFRC522_Clear_Bit@mask
  2305  0468  3008               	movlw	8
  2306  0469  120A  118A  22C8  120A  118A  	fcall	_MFRC522_Clear_Bit
  2307  046E                     l1559:
  2308                           
  2309                           ;./rfid.h: 534:   _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
  2310  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2311  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2312  0470  083C               	movf	MFRC522_AntiColl@serNum,w
  2313  0471  00B2               	movwf	??_MFRC522_AntiColl
  2314  0472  0832               	movf	??_MFRC522_AntiColl,w
  2315  0473  00A0               	movwf	MFRC522_ToCard@sendData
  2316  0474  3002               	movlw	2
  2317  0475  00B3               	movwf	??_MFRC522_AntiColl+1
  2318  0476  0833               	movf	??_MFRC522_AntiColl+1,w
  2319  0477  00A1               	movwf	MFRC522_ToCard@sendLen
  2320  0478  083C               	movf	MFRC522_AntiColl@serNum,w
  2321  0479  00B4               	movwf	??_MFRC522_AntiColl+2
  2322  047A  0834               	movf	??_MFRC522_AntiColl+2,w
  2323  047B  00A2               	movwf	MFRC522_ToCard@backData
  2324  047C  3038               	movlw	(low (MFRC522_AntiColl@unLen| 0))& (0+255)
  2325  047D  00B5               	movwf	??_MFRC522_AntiColl+3
  2326  047E  0835               	movf	??_MFRC522_AntiColl+3,w
  2327  047F  00A3               	movwf	MFRC522_ToCard@backLen
  2328  0480  300C               	movlw	12
  2329  0481  120A  118A  265B  120A  118A  	fcall	_MFRC522_ToCard
  2330  0486  1283               	bcf	3,5	;RP0=0, select bank0
  2331  0487  1303               	bcf	3,6	;RP1=0, select bank0
  2332  0488  00B6               	movwf	??_MFRC522_AntiColl+4
  2333  0489  0836               	movf	??_MFRC522_AntiColl+4,w
  2334  048A  00BA               	movwf	MFRC522_AntiColl@_status
  2335  048B                     l1561:
  2336                           
  2337                           ;./rfid.h: 536:   if (_status == 0)
  2338  048B  083A               	movf	MFRC522_AntiColl@_status,w
  2339  048C  1D03               	btfss	3,2
  2340  048D  2C8F               	goto	u861
  2341  048E  2C90               	goto	u860
  2342  048F                     u861:
  2343  048F  2CB2               	goto	l158
  2344  0490                     u860:
  2345  0490                     l1563:
  2346                           
  2347                           ;./rfid.h: 537:   {;./rfid.h: 538:     for ( i=0; i < 4; i++ )
  2348  0490  01BB               	clrf	MFRC522_AntiColl@i
  2349  0491                     l1569:
  2350                           
  2351                           ;./rfid.h: 539:     {;./rfid.h: 540:       serNumCheck ^= serNum[i];
  2352  0491  083B               	movf	MFRC522_AntiColl@i,w
  2353  0492  073C               	addwf	MFRC522_AntiColl@serNum,w
  2354  0493  00B2               	movwf	??_MFRC522_AntiColl
  2355  0494  0832               	movf	??_MFRC522_AntiColl,w
  2356  0495  0084               	movwf	4
  2357  0496  1383               	bcf	3,7	;select IRP bank0
  2358  0497  0800               	movf	0,w
  2359  0498  00B3               	movwf	??_MFRC522_AntiColl+1
  2360  0499  0833               	movf	??_MFRC522_AntiColl+1,w
  2361  049A  06B7               	xorwf	MFRC522_AntiColl@serNumCheck,f
  2362  049B                     l1571:
  2363                           
  2364                           ;./rfid.h: 541:     }
  2365  049B  3001               	movlw	1
  2366  049C  00B2               	movwf	??_MFRC522_AntiColl
  2367  049D  0832               	movf	??_MFRC522_AntiColl,w
  2368  049E  07BB               	addwf	MFRC522_AntiColl@i,f
  2369  049F                     l1573:
  2370  049F  3004               	movlw	4
  2371  04A0  023B               	subwf	MFRC522_AntiColl@i,w
  2372  04A1  1C03               	skipc
  2373  04A2  2CA4               	goto	u871
  2374  04A3  2CA5               	goto	u870
  2375  04A4                     u871:
  2376  04A4  2C91               	goto	l1569
  2377  04A5                     u870:
  2378  04A5                     l1575:
  2379                           
  2380                           ;./rfid.h: 543:     if ( serNumCheck != serNum[4] )
  2381  04A5  083C               	movf	MFRC522_AntiColl@serNum,w
  2382  04A6  3E04               	addlw	4
  2383  04A7  0084               	movwf	4
  2384  04A8  0800               	movf	0,w
  2385  04A9  0637               	xorwf	MFRC522_AntiColl@serNumCheck,w
  2386  04AA  1903               	skipnz
  2387  04AB  2CAD               	goto	u881
  2388  04AC  2CAE               	goto	u880
  2389  04AD                     u881:
  2390  04AD  2CB2               	goto	l158
  2391  04AE                     u880:
  2392  04AE                     l1577:
  2393                           
  2394                           ;./rfid.h: 544:     {;./rfid.h: 545:       _status = 2;
  2395  04AE  3002               	movlw	2
  2396  04AF  00B2               	movwf	??_MFRC522_AntiColl
  2397  04B0  0832               	movf	??_MFRC522_AntiColl,w
  2398  04B1  00BA               	movwf	MFRC522_AntiColl@_status
  2399  04B2                     l158:	
  2400                           ;./rfid.h: 547:   }
  2401                           
  2402                           
  2403                           ;./rfid.h: 549:   return _status;
  2404  04B2  083A               	movf	MFRC522_AntiColl@_status,w
  2405  04B3                     l162:
  2406  04B3  0008               	return
  2407  04B4                     __end_of_MFRC522_AntiColl:
  2408                           
  2409                           	psect	text13
  2410  065B                     __ptext13:	
  2411 ;; *************** function _MFRC522_ToCard *****************
  2412 ;; Defined at:
  2413 ;;		line 226 in file "./rfid.h"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  command         1    wreg     unsigned char 
  2416 ;;  sendData        1    0[BANK0 ] PTR unsigned char 
  2417 ;;		 -> str(16), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), MFRC522_Halt@buff(4), 
  2418 ;;		 -> MFRC522_SelectTag@buffer(9), 
  2419 ;;  sendLen         1    1[BANK0 ] unsigned char 
  2420 ;;  backData        1    2[BANK0 ] PTR unsigned char 
  2421 ;;		 -> str(16), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), MFRC522_Halt@buff(4), 
  2422 ;;		 -> MFRC522_SelectTag@buffer(9), 
  2423 ;;  backLen         1    3[BANK0 ] PTR unsigned int 
  2424 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
  2425 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  command         1   14[BANK0 ] unsigned char 
  2428 ;;  i               2   15[BANK0 ] unsigned int 
  2429 ;;  n               1   17[BANK0 ] unsigned char 
  2430 ;;  irqEn           1   13[BANK0 ] unsigned char 
  2431 ;;  lastBits        1   12[BANK0 ] unsigned char 
  2432 ;;  _status         1   11[BANK0 ] unsigned char 
  2433 ;;  waitIRq         1   10[BANK0 ] unsigned char 
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      unsigned char 
  2436 ;; Registers used:
  2437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2443 ;;      Params:         0       4       0       0       0
  2444 ;;      Locals:         0       8       0       0       0
  2445 ;;      Temps:          0       6       0       0       0
  2446 ;;      Totals:         0      18       0       0       0
  2447 ;;Total ram usage:       18 bytes
  2448 ;; Hardware stack levels used: 1
  2449 ;; Hardware stack levels required when called: 3
  2450 ;; This function calls:
  2451 ;;		_MFRC522_Clear_Bit
  2452 ;;		_MFRC522_Rd
  2453 ;;		_MFRC522_Set_Bit
  2454 ;;		_MFRC522_Wr
  2455 ;; This function is called by:
  2456 ;;		_MFRC522_Request
  2457 ;;		_MFRC522_AntiColl
  2458 ;;		_MFRC522_SelectTag
  2459 ;;		_MFRC522_Halt
  2460 ;;		_MFRC522_Auth
  2461 ;;		_MFRC522_Write
  2462 ;;		_MFRC522_Read
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           
  2467                           ;psect for function _MFRC522_ToCard
  2468  065B                     _MFRC522_ToCard:
  2469                           
  2470                           ;incstack = 0
  2471                           ; Regs used in _MFRC522_ToCard: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2472                           ;MFRC522_ToCard@command stored from wreg
  2473  065B  1283               	bcf	3,5	;RP0=0, select bank0
  2474  065C  1303               	bcf	3,6	;RP1=0, select bank0
  2475  065D  00AE               	movwf	MFRC522_ToCard@command
  2476  065E                     l1387:
  2477                           
  2478                           ;./rfid.h: 226: char MFRC522_ToCard( char command, char *sendData, char sendLen, char *b
      +                          ackData, unsigned *backLen );./rfid.h: 227: {;./rfid.h: 228:   char _status = 2;
  2479  065E  3002               	movlw	2
  2480  065F  00A4               	movwf	??_MFRC522_ToCard
  2481  0660  0824               	movf	??_MFRC522_ToCard,w
  2482  0661  00AB               	movwf	MFRC522_ToCard@_status
  2483  0662                     l1389:
  2484                           
  2485                           ;./rfid.h: 229:   char irqEn = 0x00;
  2486  0662  01AD               	clrf	MFRC522_ToCard@irqEn
  2487  0663                     l1391:
  2488                           
  2489                           ;./rfid.h: 230:   char waitIRq = 0x00;
  2490  0663  01AA               	clrf	MFRC522_ToCard@waitIRq
  2491                           
  2492                           ;./rfid.h: 231:   char lastBits;;./rfid.h: 232:   char n;;./rfid.h: 233:   unsigned i;;.
      +                          /rfid.h: 235:   switch (command)
  2493  0664  2E77               	goto	l1399
  2494  0665                     l1393:
  2495                           
  2496                           ;./rfid.h: 238:     {;./rfid.h: 239:       irqEn = 0x12;
  2497  0665  3012               	movlw	18
  2498  0666  00A4               	movwf	??_MFRC522_ToCard
  2499  0667  0824               	movf	??_MFRC522_ToCard,w
  2500  0668  00AD               	movwf	MFRC522_ToCard@irqEn
  2501                           
  2502                           ;./rfid.h: 240:       waitIRq = 0x10;
  2503  0669  3010               	movlw	16
  2504  066A  00A4               	movwf	??_MFRC522_ToCard
  2505  066B  0824               	movf	??_MFRC522_ToCard,w
  2506  066C  00AA               	movwf	MFRC522_ToCard@waitIRq
  2507                           
  2508                           ;./rfid.h: 241:       break;
  2509  066D  2E87               	goto	l1401
  2510  066E                     l1395:
  2511                           
  2512                           ;./rfid.h: 244:     {;./rfid.h: 245:       irqEn = 0x77;
  2513  066E  3077               	movlw	119
  2514  066F  00A4               	movwf	??_MFRC522_ToCard
  2515  0670  0824               	movf	??_MFRC522_ToCard,w
  2516  0671  00AD               	movwf	MFRC522_ToCard@irqEn
  2517                           
  2518                           ;./rfid.h: 246:       waitIRq = 0x30;
  2519  0672  3030               	movlw	48
  2520  0673  00A4               	movwf	??_MFRC522_ToCard
  2521  0674  0824               	movf	??_MFRC522_ToCard,w
  2522  0675  00AA               	movwf	MFRC522_ToCard@waitIRq
  2523                           
  2524                           ;./rfid.h: 247:       break;
  2525  0676  2E87               	goto	l1401
  2526  0677                     l1399:
  2527  0677  082E               	movf	MFRC522_ToCard@command,w
  2528  0678  00A4               	movwf	??_MFRC522_ToCard
  2529  0679  01A5               	clrf	??_MFRC522_ToCard+1
  2530                           
  2531                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2532                           ; Switch size 1, requested type "simple"
  2533                           ; Number of cases is 1, Range of values is 0 to 0
  2534                           ; switch strategies available:
  2535                           ; Name         Instructions Cycles
  2536                           ; simple_byte            4     3 (average)
  2537                           ; direct_byte           11     8 (fixed)
  2538                           ; jumptable            260     6 (fixed)
  2539                           ;	Chosen strategy is simple_byte
  2540  067A  0825               	movf	??_MFRC522_ToCard+1,w
  2541  067B  3A00               	xorlw	0	; case 0
  2542  067C  1903               	skipnz
  2543  067D  2E7F               	goto	l1863
  2544  067E  2E87               	goto	l1401
  2545  067F                     l1863:
  2546                           
  2547                           ; Switch size 1, requested type "simple"
  2548                           ; Number of cases is 2, Range of values is 12 to 14
  2549                           ; switch strategies available:
  2550                           ; Name         Instructions Cycles
  2551                           ; simple_byte            7     4 (average)
  2552                           ; direct_byte           20    11 (fixed)
  2553                           ; jumptable            263     9 (fixed)
  2554                           ;	Chosen strategy is simple_byte
  2555  067F  0824               	movf	??_MFRC522_ToCard,w
  2556  0680  3A0C               	xorlw	12	; case 12
  2557  0681  1903               	skipnz
  2558  0682  2E6E               	goto	l1395
  2559  0683  3A02               	xorlw	2	; case 14
  2560  0684  1903               	skipnz
  2561  0685  2E65               	goto	l1393
  2562  0686  2E87               	goto	l1401
  2563  0687                     l1401:
  2564                           
  2565                           ;./rfid.h: 253:   MFRC522_Wr( 0x02, irqEn | 0x80 );
  2566  0687  082D               	movf	MFRC522_ToCard@irqEn,w
  2567  0688  3880               	iorlw	128
  2568  0689  00A4               	movwf	??_MFRC522_ToCard
  2569  068A  0824               	movf	??_MFRC522_ToCard,w
  2570  068B  00F4               	movwf	MFRC522_Wr@value
  2571  068C  3002               	movlw	2
  2572  068D  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2573                           
  2574                           ;./rfid.h: 254:   MFRC522_Clear_Bit( 0x04, 0x80 );
  2575  0692  3080               	movlw	128
  2576  0693  1283               	bcf	3,5	;RP0=0, select bank0
  2577  0694  1303               	bcf	3,6	;RP1=0, select bank0
  2578  0695  00A4               	movwf	??_MFRC522_ToCard
  2579  0696  0824               	movf	??_MFRC522_ToCard,w
  2580  0697  00F7               	movwf	MFRC522_Clear_Bit@mask
  2581  0698  3004               	movlw	4
  2582  0699  120A  118A  22C8  120A  118A  	fcall	_MFRC522_Clear_Bit
  2583                           
  2584                           ;./rfid.h: 255:   MFRC522_Set_Bit( 0x0A, 0x80 );
  2585  069E  3080               	movlw	128
  2586  069F  1283               	bcf	3,5	;RP0=0, select bank0
  2587  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  2588  06A1  00A4               	movwf	??_MFRC522_ToCard
  2589  06A2  0824               	movf	??_MFRC522_ToCard,w
  2590  06A3  00F7               	movwf	MFRC522_Set_Bit@mask
  2591  06A4  300A               	movlw	10
  2592  06A5  120A  118A  22A3  120A  118A  	fcall	_MFRC522_Set_Bit
  2593                           
  2594                           ;./rfid.h: 256:   MFRC522_Wr( 0x01, 0x00 );
  2595  06AA  01F4               	clrf	MFRC522_Wr@value
  2596  06AB  3001               	movlw	1
  2597  06AC  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2598  06B1                     l1403:
  2599                           
  2600                           ;./rfid.h: 259:   for ( i=0; i < sendLen; i++ )
  2601  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  2602  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  2603  06B3  01AF               	clrf	MFRC522_ToCard@i
  2604  06B4  01B0               	clrf	MFRC522_ToCard@i+1
  2605  06B5  2ECE               	goto	l1409
  2606  06B6                     l1405:
  2607                           
  2608                           ;./rfid.h: 260:   {;./rfid.h: 261:     MFRC522_Wr( 0x09, sendData[i] );
  2609  06B6  082F               	movf	MFRC522_ToCard@i,w
  2610  06B7  0720               	addwf	MFRC522_ToCard@sendData,w
  2611  06B8  00A4               	movwf	??_MFRC522_ToCard
  2612  06B9  0824               	movf	??_MFRC522_ToCard,w
  2613  06BA  0084               	movwf	4
  2614  06BB  1383               	bcf	3,7	;select IRP bank0
  2615  06BC  0800               	movf	0,w
  2616  06BD  00A5               	movwf	??_MFRC522_ToCard+1
  2617  06BE  0825               	movf	??_MFRC522_ToCard+1,w
  2618  06BF  00F4               	movwf	MFRC522_Wr@value
  2619  06C0  3009               	movlw	9
  2620  06C1  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2621  06C6                     l1407:
  2622                           
  2623                           ;./rfid.h: 262:   }
  2624  06C6  3001               	movlw	1
  2625  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  2626  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  2627  06C9  07AF               	addwf	MFRC522_ToCard@i,f
  2628  06CA  1803               	skipnc
  2629  06CB  0AB0               	incf	MFRC522_ToCard@i+1,f
  2630  06CC  3000               	movlw	0
  2631  06CD  07B0               	addwf	MFRC522_ToCard@i+1,f
  2632  06CE                     l1409:
  2633  06CE  0821               	movf	MFRC522_ToCard@sendLen,w
  2634  06CF  00A4               	movwf	??_MFRC522_ToCard
  2635  06D0  01A5               	clrf	??_MFRC522_ToCard+1
  2636  06D1  0825               	movf	??_MFRC522_ToCard+1,w
  2637  06D2  0230               	subwf	MFRC522_ToCard@i+1,w
  2638  06D3  1D03               	skipz
  2639  06D4  2ED7               	goto	u605
  2640  06D5  0824               	movf	??_MFRC522_ToCard,w
  2641  06D6  022F               	subwf	MFRC522_ToCard@i,w
  2642  06D7                     u605:
  2643  06D7  1C03               	skipc
  2644  06D8  2EDA               	goto	u601
  2645  06D9  2EDB               	goto	u600
  2646  06DA                     u601:
  2647  06DA  2EB6               	goto	l1405
  2648  06DB                     u600:
  2649  06DB                     l1411:
  2650                           
  2651                           ;./rfid.h: 265:   MFRC522_Wr( 0x01, command );
  2652  06DB  082E               	movf	MFRC522_ToCard@command,w
  2653  06DC  00A4               	movwf	??_MFRC522_ToCard
  2654  06DD  0824               	movf	??_MFRC522_ToCard,w
  2655  06DE  00F4               	movwf	MFRC522_Wr@value
  2656  06DF  3001               	movlw	1
  2657  06E0  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  2658  06E5                     l1413:
  2659                           
  2660                           ;./rfid.h: 267:   if (command == 0x0C )
  2661  06E5  300C               	movlw	12
  2662  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  2663  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  2664  06E8  062E               	xorwf	MFRC522_ToCard@command,w
  2665  06E9  1D03               	btfss	3,2
  2666  06EA  2EEC               	goto	u611
  2667  06EB  2EED               	goto	u610
  2668  06EC                     u611:
  2669  06EC  2EF7               	goto	l1417
  2670  06ED                     u610:
  2671  06ED                     l1415:
  2672                           
  2673                           ;./rfid.h: 268:   {;./rfid.h: 269:     MFRC522_Set_Bit( 0x0D, 0x80 );
  2674  06ED  3080               	movlw	128
  2675  06EE  00A4               	movwf	??_MFRC522_ToCard
  2676  06EF  0824               	movf	??_MFRC522_ToCard,w
  2677  06F0  00F7               	movwf	MFRC522_Set_Bit@mask
  2678  06F1  300D               	movlw	13
  2679  06F2  120A  118A  22A3  120A  118A  	fcall	_MFRC522_Set_Bit
  2680  06F7                     l1417:
  2681                           
  2682                           ;./rfid.h: 274:   i = 0xFFFF;
  2683  06F7  30FF               	movlw	255
  2684  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  2685  06F9  1303               	bcf	3,6	;RP1=0, select bank0
  2686  06FA  00AF               	movwf	MFRC522_ToCard@i
  2687  06FB  30FF               	movlw	255
  2688  06FC  00B0               	movwf	MFRC522_ToCard@i+1
  2689  06FD                     l1419:
  2690                           
  2691                           ;./rfid.h: 276:   {;./rfid.h: 279:     n = MFRC522_Rd( 0x04 );
  2692  06FD  3004               	movlw	4
  2693  06FE  120A  118A  230D  120A  118A  	fcall	_MFRC522_Rd
  2694  0703  1283               	bcf	3,5	;RP0=0, select bank0
  2695  0704  1303               	bcf	3,6	;RP1=0, select bank0
  2696  0705  00A4               	movwf	??_MFRC522_ToCard
  2697  0706  0824               	movf	??_MFRC522_ToCard,w
  2698  0707  00B1               	movwf	MFRC522_ToCard@n
  2699                           
  2700                           ;./rfid.h: 280:     i--;
  2701  0708  3001               	movlw	1
  2702  0709  02AF               	subwf	MFRC522_ToCard@i,f
  2703  070A  3000               	movlw	0
  2704  070B  1C03               	skipc
  2705  070C  03B0               	decf	MFRC522_ToCard@i+1,f
  2706  070D  02B0               	subwf	MFRC522_ToCard@i+1,f
  2707  070E                     l1421:
  2708                           
  2709                           ;./rfid.h: 281:   }
  2710  070E  082F               	movf	MFRC522_ToCard@i,w
  2711  070F  0430               	iorwf	MFRC522_ToCard@i+1,w
  2712  0710  1903               	btfsc	3,2
  2713  0711  2F13               	goto	u621
  2714  0712  2F14               	goto	u620
  2715  0713                     u621:
  2716  0713  2F1E               	goto	l1427
  2717  0714                     u620:
  2718  0714                     l1423:
  2719  0714  1831               	btfsc	MFRC522_ToCard@n,0
  2720  0715  2F17               	goto	u631
  2721  0716  2F18               	goto	u630
  2722  0717                     u631:
  2723  0717  2F1E               	goto	l1427
  2724  0718                     u630:
  2725  0718                     l1425:
  2726  0718  0831               	movf	MFRC522_ToCard@n,w
  2727  0719  052A               	andwf	MFRC522_ToCard@waitIRq,w
  2728  071A  1903               	btfsc	3,2
  2729  071B  2F1D               	goto	u641
  2730  071C  2F1E               	goto	u640
  2731  071D                     u641:
  2732  071D  2EFD               	goto	l1419
  2733  071E                     u640:
  2734  071E                     l1427:
  2735                           
  2736                           ;./rfid.h: 284:   MFRC522_Clear_Bit( 0x0D, 0x80 );
  2737  071E  3080               	movlw	128
  2738  071F  00A4               	movwf	??_MFRC522_ToCard
  2739  0720  0824               	movf	??_MFRC522_ToCard,w
  2740  0721  00F7               	movwf	MFRC522_Clear_Bit@mask
  2741  0722  300D               	movlw	13
  2742  0723  120A  118A  22C8  120A  118A  	fcall	_MFRC522_Clear_Bit
  2743  0728                     l1429:
  2744                           
  2745                           ;./rfid.h: 286:   if (i != 0)
  2746  0728  1283               	bcf	3,5	;RP0=0, select bank0
  2747  0729  1303               	bcf	3,6	;RP1=0, select bank0
  2748  072A  082F               	movf	MFRC522_ToCard@i,w
  2749  072B  0430               	iorwf	MFRC522_ToCard@i+1,w
  2750  072C  1903               	btfsc	3,2
  2751  072D  2F2F               	goto	u651
  2752  072E  2F30               	goto	u650
  2753  072F                     u651:
  2754  072F  2FE7               	goto	l89
  2755  0730                     u650:
  2756  0730                     l1431:
  2757                           
  2758                           ;./rfid.h: 287:   {;./rfid.h: 288:     if( !( MFRC522_Rd( 0x06 ) & 0x1B ) )
  2759  0730  3006               	movlw	6
  2760  0731  120A  118A  230D  120A  118A  	fcall	_MFRC522_Rd
  2761  0736  391B               	andlw	27
  2762  0737  1D03               	btfss	3,2
  2763  0738  2F3A               	goto	u661
  2764  0739  2F3B               	goto	u660
  2765  073A                     u661:
  2766  073A  2FE1               	goto	l1467
  2767  073B                     u660:
  2768  073B                     l1433:
  2769                           
  2770                           ;./rfid.h: 289:     {;./rfid.h: 290:       _status = 0;
  2771  073B  1283               	bcf	3,5	;RP0=0, select bank0
  2772  073C  1303               	bcf	3,6	;RP1=0, select bank0
  2773  073D  01AB               	clrf	MFRC522_ToCard@_status
  2774  073E                     l1435:
  2775                           
  2776                           ;./rfid.h: 291:       if ( n & irqEn & 0x01 )
  2777  073E  082D               	movf	MFRC522_ToCard@irqEn,w
  2778  073F  0531               	andwf	MFRC522_ToCard@n,w
  2779  0740  00A4               	movwf	??_MFRC522_ToCard
  2780  0741  1C24               	btfss	??_MFRC522_ToCard,0
  2781  0742  2F44               	goto	u671
  2782  0743  2F45               	goto	u670
  2783  0744                     u671:
  2784  0744  2F47               	goto	l1439
  2785  0745                     u670:
  2786  0745                     l1437:
  2787                           
  2788                           ;./rfid.h: 292:       {;./rfid.h: 293:         _status = 1;
  2789  0745  01AB               	clrf	MFRC522_ToCard@_status
  2790  0746  0AAB               	incf	MFRC522_ToCard@_status,f
  2791  0747                     l1439:
  2792                           
  2793                           ;./rfid.h: 296:       if ( command == 0x0C )
  2794  0747  300C               	movlw	12
  2795  0748  062E               	xorwf	MFRC522_ToCard@command,w
  2796  0749  1D03               	btfss	3,2
  2797  074A  2F4C               	goto	u681
  2798  074B  2F4D               	goto	u680
  2799  074C                     u681:
  2800  074C  2FE7               	goto	l89
  2801  074D                     u680:
  2802  074D                     l1441:
  2803                           
  2804                           ;./rfid.h: 297:       {;./rfid.h: 298:         n = MFRC522_Rd( 0x0A );
  2805  074D  300A               	movlw	10
  2806  074E  120A  118A  230D  120A  118A  	fcall	_MFRC522_Rd
  2807  0753  1283               	bcf	3,5	;RP0=0, select bank0
  2808  0754  1303               	bcf	3,6	;RP1=0, select bank0
  2809  0755  00A4               	movwf	??_MFRC522_ToCard
  2810  0756  0824               	movf	??_MFRC522_ToCard,w
  2811  0757  00B1               	movwf	MFRC522_ToCard@n
  2812                           
  2813                           ;./rfid.h: 299:         lastBits = MFRC522_Rd( 0x0C ) & 0x07;
  2814  0758  300C               	movlw	12
  2815  0759  120A  118A  230D  120A  118A  	fcall	_MFRC522_Rd
  2816  075E  3907               	andlw	7
  2817  075F  1283               	bcf	3,5	;RP0=0, select bank0
  2818  0760  1303               	bcf	3,6	;RP1=0, select bank0
  2819  0761  00A4               	movwf	??_MFRC522_ToCard
  2820  0762  0824               	movf	??_MFRC522_ToCard,w
  2821  0763  00AC               	movwf	MFRC522_ToCard@lastBits
  2822  0764                     l1443:
  2823                           
  2824                           ;./rfid.h: 300:         if (lastBits)
  2825  0764  082C               	movf	MFRC522_ToCard@lastBits,w
  2826  0765  1903               	btfsc	3,2
  2827  0766  2F68               	goto	u691
  2828  0767  2F69               	goto	u690
  2829  0768                     u691:
  2830  0768  2F8E               	goto	l1447
  2831  0769                     u690:
  2832  0769                     l1445:
  2833                           
  2834                           ;./rfid.h: 301:         {;./rfid.h: 302:           *backLen = (n-1) * 8 + lastBits;
  2835  0769  0831               	movf	MFRC522_ToCard@n,w
  2836  076A  00A4               	movwf	??_MFRC522_ToCard
  2837  076B  01A5               	clrf	??_MFRC522_ToCard+1
  2838  076C  1003               	clrc
  2839  076D  0DA4               	rlf	??_MFRC522_ToCard,f
  2840  076E  0DA5               	rlf	??_MFRC522_ToCard+1,f
  2841  076F  1003               	clrc
  2842  0770  0DA4               	rlf	??_MFRC522_ToCard,f
  2843  0771  0DA5               	rlf	??_MFRC522_ToCard+1,f
  2844  0772  1003               	clrc
  2845  0773  0DA4               	rlf	??_MFRC522_ToCard,f
  2846  0774  0DA5               	rlf	??_MFRC522_ToCard+1,f
  2847  0775  082C               	movf	MFRC522_ToCard@lastBits,w
  2848  0776  0724               	addwf	??_MFRC522_ToCard,w
  2849  0777  00A6               	movwf	??_MFRC522_ToCard+2
  2850  0778  3000               	movlw	0
  2851  0779  1803               	skipnc
  2852  077A  3001               	movlw	1
  2853  077B  0725               	addwf	??_MFRC522_ToCard+1,w
  2854  077C  00A7               	movwf	??_MFRC522_ToCard+3
  2855  077D  0826               	movf	??_MFRC522_ToCard+2,w
  2856  077E  3EF8               	addlw	248
  2857  077F  00A8               	movwf	??_MFRC522_ToCard+4
  2858  0780  0827               	movf	??_MFRC522_ToCard+3,w
  2859  0781  1803               	skipnc
  2860  0782  3E01               	addlw	1
  2861  0783  3EFF               	addlw	255
  2862  0784  00A9               	movwf	??_MFRC522_ToCard+5
  2863  0785  0823               	movf	MFRC522_ToCard@backLen,w
  2864  0786  0084               	movwf	4
  2865  0787  0828               	movf	??_MFRC522_ToCard+4,w
  2866  0788  1383               	bcf	3,7	;select IRP bank0
  2867  0789  0080               	movwf	0
  2868  078A  0A84               	incf	4,f
  2869  078B  0829               	movf	??_MFRC522_ToCard+5,w
  2870  078C  0080               	movwf	0
  2871                           
  2872                           ;./rfid.h: 303:         }
  2873  078D  2FA2               	goto	l1449
  2874  078E                     l1447:
  2875                           
  2876                           ;./rfid.h: 305:         {;./rfid.h: 306:           *backLen = n * 8;
  2877  078E  0831               	movf	MFRC522_ToCard@n,w
  2878  078F  00A4               	movwf	??_MFRC522_ToCard
  2879  0790  01A5               	clrf	??_MFRC522_ToCard+1
  2880  0791  1003               	clrc
  2881  0792  0DA4               	rlf	??_MFRC522_ToCard,f
  2882  0793  0DA5               	rlf	??_MFRC522_ToCard+1,f
  2883  0794  1003               	clrc
  2884  0795  0DA4               	rlf	??_MFRC522_ToCard,f
  2885  0796  0DA5               	rlf	??_MFRC522_ToCard+1,f
  2886  0797  1003               	clrc
  2887  0798  0DA4               	rlf	??_MFRC522_ToCard,f
  2888  0799  0DA5               	rlf	??_MFRC522_ToCard+1,f
  2889  079A  0823               	movf	MFRC522_ToCard@backLen,w
  2890  079B  0084               	movwf	4
  2891  079C  0824               	movf	??_MFRC522_ToCard,w
  2892  079D  1383               	bcf	3,7	;select IRP bank0
  2893  079E  0080               	movwf	0
  2894  079F  0A84               	incf	4,f
  2895  07A0  0825               	movf	??_MFRC522_ToCard+1,w
  2896  07A1  0080               	movwf	0
  2897  07A2                     l1449:
  2898                           
  2899                           ;./rfid.h: 309:         if (n == 0)
  2900  07A2  0831               	movf	MFRC522_ToCard@n,w
  2901  07A3  1D03               	btfss	3,2
  2902  07A4  2FA6               	goto	u701
  2903  07A5  2FA7               	goto	u700
  2904  07A6                     u701:
  2905  07A6  2FA9               	goto	l1453
  2906  07A7                     u700:
  2907  07A7                     l1451:
  2908                           
  2909                           ;./rfid.h: 310:         {;./rfid.h: 311:           n = 1;
  2910  07A7  01B1               	clrf	MFRC522_ToCard@n
  2911  07A8  0AB1               	incf	MFRC522_ToCard@n,f
  2912  07A9                     l1453:
  2913                           
  2914                           ;./rfid.h: 314:         if (n > 16)
  2915  07A9  3011               	movlw	17
  2916  07AA  0231               	subwf	MFRC522_ToCard@n,w
  2917  07AB  1C03               	skipc
  2918  07AC  2FAE               	goto	u711
  2919  07AD  2FAF               	goto	u710
  2920  07AE                     u711:
  2921  07AE  2FB3               	goto	l1457
  2922  07AF                     u710:
  2923  07AF                     l1455:
  2924                           
  2925                           ;./rfid.h: 315:         {;./rfid.h: 316:           n = 16;
  2926  07AF  3010               	movlw	16
  2927  07B0  00A4               	movwf	??_MFRC522_ToCard
  2928  07B1  0824               	movf	??_MFRC522_ToCard,w
  2929  07B2  00B1               	movwf	MFRC522_ToCard@n
  2930  07B3                     l1457:
  2931                           
  2932                           ;./rfid.h: 320:         for (i=0; i < n; i++)
  2933  07B3  01AF               	clrf	MFRC522_ToCard@i
  2934  07B4  01B0               	clrf	MFRC522_ToCard@i+1
  2935  07B5  2FCD               	goto	l1463
  2936  07B6                     l1459:
  2937                           
  2938                           ;./rfid.h: 321:         {;./rfid.h: 322:           backData[i] = MFRC522_Rd( 0x09 );
  2939  07B6  3009               	movlw	9
  2940  07B7  120A  118A  230D  120A  118A  	fcall	_MFRC522_Rd
  2941  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  2942  07BD  1303               	bcf	3,6	;RP1=0, select bank0
  2943  07BE  00A4               	movwf	??_MFRC522_ToCard
  2944  07BF  082F               	movf	MFRC522_ToCard@i,w
  2945  07C0  0722               	addwf	MFRC522_ToCard@backData,w
  2946  07C1  00A5               	movwf	??_MFRC522_ToCard+1
  2947  07C2  0825               	movf	??_MFRC522_ToCard+1,w
  2948  07C3  0084               	movwf	4
  2949  07C4  0824               	movf	??_MFRC522_ToCard,w
  2950  07C5  1383               	bcf	3,7	;select IRP bank0
  2951  07C6  0080               	movwf	0
  2952  07C7                     l1461:
  2953                           
  2954                           ;./rfid.h: 323:         }
  2955  07C7  3001               	movlw	1
  2956  07C8  07AF               	addwf	MFRC522_ToCard@i,f
  2957  07C9  1803               	skipnc
  2958  07CA  0AB0               	incf	MFRC522_ToCard@i+1,f
  2959  07CB  3000               	movlw	0
  2960  07CC  07B0               	addwf	MFRC522_ToCard@i+1,f
  2961  07CD                     l1463:
  2962  07CD  0831               	movf	MFRC522_ToCard@n,w
  2963  07CE  00A4               	movwf	??_MFRC522_ToCard
  2964  07CF  01A5               	clrf	??_MFRC522_ToCard+1
  2965  07D0  0825               	movf	??_MFRC522_ToCard+1,w
  2966  07D1  0230               	subwf	MFRC522_ToCard@i+1,w
  2967  07D2  1D03               	skipz
  2968  07D3  2FD6               	goto	u725
  2969  07D4  0824               	movf	??_MFRC522_ToCard,w
  2970  07D5  022F               	subwf	MFRC522_ToCard@i,w
  2971  07D6                     u725:
  2972  07D6  1C03               	skipc
  2973  07D7  2FD9               	goto	u721
  2974  07D8  2FDA               	goto	u720
  2975  07D9                     u721:
  2976  07D9  2FB6               	goto	l1459
  2977  07DA                     u720:
  2978  07DA                     l1465:
  2979                           
  2980                           ;./rfid.h: 324:             backData[i] = 0;
  2981  07DA  082F               	movf	MFRC522_ToCard@i,w
  2982  07DB  0722               	addwf	MFRC522_ToCard@backData,w
  2983  07DC  00A4               	movwf	??_MFRC522_ToCard
  2984  07DD  0824               	movf	??_MFRC522_ToCard,w
  2985  07DE  0084               	movwf	4
  2986  07DF  0180               	clrf	0
  2987  07E0  2FE7               	goto	l89
  2988  07E1                     l1467:
  2989                           
  2990                           ;./rfid.h: 328:     {;./rfid.h: 329:       _status = 2;
  2991  07E1  3002               	movlw	2
  2992  07E2  1283               	bcf	3,5	;RP0=0, select bank0
  2993  07E3  1303               	bcf	3,6	;RP1=0, select bank0
  2994  07E4  00A4               	movwf	??_MFRC522_ToCard
  2995  07E5  0824               	movf	??_MFRC522_ToCard,w
  2996  07E6  00AB               	movwf	MFRC522_ToCard@_status
  2997  07E7                     l89:	
  2998                           ;./rfid.h: 332:   }
  2999                           
  3000                           
  3001                           ;./rfid.h: 337:   return _status;
  3002  07E7  082B               	movf	MFRC522_ToCard@_status,w
  3003  07E8                     l101:
  3004  07E8  0008               	return
  3005  07E9                     __end_of_MFRC522_ToCard:
  3006                           
  3007                           	psect	text14
  3008  02A3                     __ptext14:	
  3009 ;; *************** function _MFRC522_Set_Bit *****************
  3010 ;; Defined at:
  3011 ;;		line 187 in file "./rfid.h"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;  addr            1    wreg     unsigned char 
  3014 ;;  mask            1    7[COMMON] unsigned char 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  addr            1    9[COMMON] unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, status,2, status,0, pclath, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 0/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3026 ;;      Params:         1       0       0       0       0
  3027 ;;      Locals:         1       0       0       0       0
  3028 ;;      Temps:          1       0       0       0       0
  3029 ;;      Totals:         3       0       0       0       0
  3030 ;;Total ram usage:        3 bytes
  3031 ;; Hardware stack levels used: 1
  3032 ;; Hardware stack levels required when called: 2
  3033 ;; This function calls:
  3034 ;;		_MFRC522_Rd
  3035 ;;		_MFRC522_Wr
  3036 ;; This function is called by:
  3037 ;;		_MFRC522_AntennaOn
  3038 ;;		_MFRC522_ToCard
  3039 ;;		_MFRC522_CRC
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           
  3044                           ;psect for function _MFRC522_Set_Bit
  3045  02A3                     _MFRC522_Set_Bit:
  3046                           
  3047                           ;incstack = 0
  3048                           ; Regs used in _MFRC522_Set_Bit: [wreg+status,2+status,0+pclath+cstack]
  3049                           ;MFRC522_Set_Bit@addr stored from wreg
  3050  02A3  00F9               	movwf	MFRC522_Set_Bit@addr
  3051  02A4                     l1381:
  3052                           
  3053                           ;./rfid.h: 187: void MFRC522_Set_Bit( char addr, char mask );./rfid.h: 188: {;./rfid.h: 
      +                          189:     MFRC522_Wr( addr, MFRC522_Rd( addr ) | mask );
  3054  02A4  0879               	movf	MFRC522_Set_Bit@addr,w
  3055  02A5  120A  118A  230D  120A  118A  	fcall	_MFRC522_Rd
  3056  02AA  0477               	iorwf	MFRC522_Set_Bit@mask,w
  3057  02AB  00F8               	movwf	??_MFRC522_Set_Bit
  3058  02AC  0878               	movf	??_MFRC522_Set_Bit,w
  3059  02AD  00F4               	movwf	MFRC522_Wr@value
  3060  02AE  0879               	movf	MFRC522_Set_Bit@addr,w
  3061  02AF  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  3062  02B4                     l61:
  3063  02B4  0008               	return
  3064  02B5                     __end_of_MFRC522_Set_Bit:
  3065                           
  3066                           	psect	text15
  3067  02C8                     __ptext15:	
  3068 ;; *************** function _MFRC522_Clear_Bit *****************
  3069 ;; Defined at:
  3070 ;;		line 182 in file "./rfid.h"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  addr            1    wreg     unsigned char 
  3073 ;;  mask            1    7[COMMON] unsigned char 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;  addr            1   10[COMMON] unsigned char 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      void 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0, pclath, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3085 ;;      Params:         1       0       0       0       0
  3086 ;;      Locals:         1       0       0       0       0
  3087 ;;      Temps:          2       0       0       0       0
  3088 ;;      Totals:         4       0       0       0       0
  3089 ;;Total ram usage:        4 bytes
  3090 ;; Hardware stack levels used: 1
  3091 ;; Hardware stack levels required when called: 2
  3092 ;; This function calls:
  3093 ;;		_MFRC522_Rd
  3094 ;;		_MFRC522_Wr
  3095 ;; This function is called by:
  3096 ;;		_MFRC522_ToCard
  3097 ;;		_MFRC522_AntiColl
  3098 ;;		_MFRC522_AntennaOff
  3099 ;;		_MFRC522_CRC
  3100 ;;		_MFRC522_Halt
  3101 ;; This function uses a non-reentrant model
  3102 ;;
  3103                           
  3104                           
  3105                           ;psect for function _MFRC522_Clear_Bit
  3106  02C8                     _MFRC522_Clear_Bit:
  3107                           
  3108                           ;incstack = 0
  3109                           ; Regs used in _MFRC522_Clear_Bit: [wreg+status,2+status,0+pclath+cstack]
  3110                           ;MFRC522_Clear_Bit@addr stored from wreg
  3111  02C8  00FA               	movwf	MFRC522_Clear_Bit@addr
  3112  02C9                     l1379:
  3113                           
  3114                           ;./rfid.h: 182: void MFRC522_Clear_Bit( char addr, char mask );./rfid.h: 183: {;./rfid.h
      +                          : 184:     MFRC522_Wr( addr, MFRC522_Rd( addr ) & (~mask) );
  3115  02C9  0977               	comf	MFRC522_Clear_Bit@mask,w
  3116  02CA  00F8               	movwf	??_MFRC522_Clear_Bit
  3117  02CB  087A               	movf	MFRC522_Clear_Bit@addr,w
  3118  02CC  120A  118A  230D  120A  118A  	fcall	_MFRC522_Rd
  3119  02D1  0578               	andwf	??_MFRC522_Clear_Bit,w
  3120  02D2  00F9               	movwf	??_MFRC522_Clear_Bit+1
  3121  02D3  0879               	movf	??_MFRC522_Clear_Bit+1,w
  3122  02D4  00F4               	movwf	MFRC522_Wr@value
  3123  02D5  087A               	movf	MFRC522_Clear_Bit@addr,w
  3124  02D6  120A  118A  22DC  120A  118A  	fcall	_MFRC522_Wr
  3125  02DB                     l58:
  3126  02DB  0008               	return
  3127  02DC                     __end_of_MFRC522_Clear_Bit:
  3128                           
  3129                           	psect	text16
  3130  02DC                     __ptext16:	
  3131 ;; *************** function _MFRC522_Wr *****************
  3132 ;; Defined at:
  3133 ;;		line 164 in file "./rfid.h"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  addr            1    wreg     unsigned char 
  3136 ;;  value           1    4[COMMON] unsigned char 
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;  addr            1    6[COMMON] unsigned char 
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0, pclath, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3148 ;;      Params:         1       0       0       0       0
  3149 ;;      Locals:         1       0       0       0       0
  3150 ;;      Temps:          1       0       0       0       0
  3151 ;;      Totals:         3       0       0       0       0
  3152 ;;Total ram usage:        3 bytes
  3153 ;; Hardware stack levels used: 1
  3154 ;; Hardware stack levels required when called: 1
  3155 ;; This function calls:
  3156 ;;		_SPI_Write
  3157 ;; This function is called by:
  3158 ;;		_MFRC522_Clear_Bit
  3159 ;;		_MFRC522_Set_Bit
  3160 ;;		_MFRC522_Reset
  3161 ;;		_MFRC522_Init
  3162 ;;		_MFRC522_ToCard
  3163 ;;		_MFRC522_Request
  3164 ;;		_MFRC522_AntiColl
  3165 ;;		_MFRC522_CRC
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           
  3170                           ;psect for function _MFRC522_Wr
  3171  02DC                     _MFRC522_Wr:
  3172                           
  3173                           ;incstack = 0
  3174                           ; Regs used in _MFRC522_Wr: [wreg+status,2+status,0+pclath+cstack]
  3175                           ;MFRC522_Wr@addr stored from wreg
  3176  02DC  00F6               	movwf	MFRC522_Wr@addr
  3177  02DD                     l1361:
  3178                           
  3179                           ;./rfid.h: 164: void MFRC522_Wr(char addr, char value);./rfid.h: 165: {;./rfid.h: 166:  
      +                             PORTCbits.RC0 = 0;
  3180  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  3181  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  3182  02DF  1007               	bcf	7,0	;volatile
  3183  02E0                     l1363:
  3184                           
  3185                           ;./rfid.h: 167:     SPI_Write( ( addr << 1 ) & 0x7E );
  3186  02E0  0876               	movf	MFRC522_Wr@addr,w
  3187  02E1  00F5               	movwf	??_MFRC522_Wr
  3188  02E2  0775               	addwf	??_MFRC522_Wr,w
  3189  02E3  397E               	andlw	126
  3190  02E4  120A  118A  2277  120A  118A  	fcall	_SPI_Write
  3191                           
  3192                           ;./rfid.h: 168:     SPI_Write( value );
  3193  02E9  0874               	movf	MFRC522_Wr@value,w
  3194  02EA  120A  118A  2277  120A  118A  	fcall	_SPI_Write
  3195  02EF                     l1365:
  3196                           
  3197                           ;./rfid.h: 169:     PORTCbits.RC0 = 1;
  3198  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  3199  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  3200  02F1  1407               	bsf	7,0	;volatile
  3201  02F2                     l52:
  3202  02F2  0008               	return
  3203  02F3                     __end_of_MFRC522_Wr:
  3204                           
  3205                           	psect	text17
  3206  030D                     __ptext17:	
  3207 ;; *************** function _MFRC522_Rd *****************
  3208 ;; Defined at:
  3209 ;;		line 172 in file "./rfid.h"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  addr            1    wreg     unsigned char 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  addr            1    2[COMMON] unsigned char 
  3214 ;;  value           1    3[COMMON] unsigned char 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  1    wreg      unsigned char 
  3217 ;; Registers used:
  3218 ;;		wreg, status,2, status,0, pclath, cstack
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3224 ;;      Params:         0       0       0       0       0
  3225 ;;      Locals:         2       0       0       0       0
  3226 ;;      Temps:          1       0       0       0       0
  3227 ;;      Totals:         3       0       0       0       0
  3228 ;;Total ram usage:        3 bytes
  3229 ;; Hardware stack levels used: 1
  3230 ;; Hardware stack levels required when called: 1
  3231 ;; This function calls:
  3232 ;;		_SPI_Read
  3233 ;;		_SPI_Write
  3234 ;; This function is called by:
  3235 ;;		_MFRC522_Clear_Bit
  3236 ;;		_MFRC522_Set_Bit
  3237 ;;		_MFRC522_ToCard
  3238 ;;		_MFRC522_CRC
  3239 ;;		_MFRC522_Auth
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           
  3244                           ;psect for function _MFRC522_Rd
  3245  030D                     _MFRC522_Rd:
  3246                           
  3247                           ;incstack = 0
  3248                           ; Regs used in _MFRC522_Rd: [wreg+status,2+status,0+pclath+cstack]
  3249                           ;MFRC522_Rd@addr stored from wreg
  3250  030D  00F2               	movwf	MFRC522_Rd@addr
  3251  030E                     l1367:
  3252                           
  3253                           ;./rfid.h: 172: char MFRC522_Rd(char addr);./rfid.h: 173: {;./rfid.h: 174:     char valu
      +                          e;;./rfid.h: 175:     PORTCbits.RC0 = 0;
  3254  030E  1283               	bcf	3,5	;RP0=0, select bank0
  3255  030F  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0310  1007               	bcf	7,0	;volatile
  3257  0311                     l1369:
  3258                           
  3259                           ;./rfid.h: 176:     SPI_Write( (( addr << 1 ) & 0x7E) | 0x80 );
  3260  0311  0872               	movf	MFRC522_Rd@addr,w
  3261  0312  00F1               	movwf	??_MFRC522_Rd
  3262  0313  0771               	addwf	??_MFRC522_Rd,w
  3263  0314  397E               	andlw	126
  3264  0315  3880               	iorlw	128
  3265  0316  120A  118A  2277  120A  118A  	fcall	_SPI_Write
  3266  031B                     l1371:
  3267                           
  3268                           ;./rfid.h: 177:     value = SPI_Read();
  3269  031B  120A  118A  226E  120A  118A  	fcall	_SPI_Read
  3270  0320  00F1               	movwf	??_MFRC522_Rd
  3271  0321  0871               	movf	??_MFRC522_Rd,w
  3272  0322  00F3               	movwf	MFRC522_Rd@value
  3273  0323                     l1373:
  3274                           
  3275                           ;./rfid.h: 178:     PORTCbits.RC0 = 1;
  3276  0323  1283               	bcf	3,5	;RP0=0, select bank0
  3277  0324  1303               	bcf	3,6	;RP1=0, select bank0
  3278  0325  1407               	bsf	7,0	;volatile
  3279  0326                     l1375:
  3280                           
  3281                           ;./rfid.h: 179:     return value;
  3282  0326  0873               	movf	MFRC522_Rd@value,w
  3283  0327                     l55:
  3284  0327  0008               	return
  3285  0328                     __end_of_MFRC522_Rd:
  3286                           
  3287                           	psect	text18
  3288  0277                     __ptext18:	
  3289 ;; *************** function _SPI_Write *****************
  3290 ;; Defined at:
  3291 ;;		line 146 in file "./rfid.h"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;  Tvalue          1    wreg     unsigned char 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;  Tvalue          1    0[COMMON] unsigned char 
  3296 ;; Return value:  Size  Location     Type
  3297 ;;                  1    wreg      void 
  3298 ;; Registers used:
  3299 ;;		wreg
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3305 ;;      Params:         0       0       0       0       0
  3306 ;;      Locals:         1       0       0       0       0
  3307 ;;      Temps:          0       0       0       0       0
  3308 ;;      Totals:         1       0       0       0       0
  3309 ;;Total ram usage:        1 bytes
  3310 ;; Hardware stack levels used: 1
  3311 ;; This function calls:
  3312 ;;		Nothing
  3313 ;; This function is called by:
  3314 ;;		_MFRC522_Wr
  3315 ;;		_MFRC522_Rd
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           
  3320                           ;psect for function _SPI_Write
  3321  0277                     _SPI_Write:
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _SPI_Write: [wreg]
  3325                           ;SPI_Write@Tvalue stored from wreg
  3326  0277  00F0               	movwf	SPI_Write@Tvalue
  3327  0278                     l1353:
  3328                           
  3329                           ;./rfid.h: 146: void SPI_Write(char Tvalue);./rfid.h: 147: {;./rfid.h: 151:     SSPBUF =
      +                           Tvalue;
  3330  0278  0870               	movf	SPI_Write@Tvalue,w
  3331  0279  1283               	bcf	3,5	;RP0=0, select bank0
  3332  027A  1303               	bcf	3,6	;RP1=0, select bank0
  3333  027B  0093               	movwf	19	;volatile
  3334  027C                     l40:	
  3335                           ;./rfid.h: 153:     while(PIR1bits.SSPIF == 0);
  3336                           
  3337  027C  1D8C               	btfss	12,3	;volatile
  3338  027D  2A7F               	goto	u581
  3339  027E  2A80               	goto	u580
  3340  027F                     u581:
  3341  027F  2A7C               	goto	l40
  3342  0280                     u580:
  3343  0280                     l43:
  3344  0280  0008               	return
  3345  0281                     __end_of_SPI_Write:
  3346                           
  3347                           	psect	text19
  3348  026E                     __ptext19:	
  3349 ;; *************** function _SPI_Read *****************
  3350 ;; Defined at:
  3351 ;;		line 156 in file "./rfid.h"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;		None
  3354 ;; Auto vars:     Size  Location     Type
  3355 ;;		None
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      unsigned char 
  3358 ;; Registers used:
  3359 ;;		wreg, status,2
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3365 ;;      Params:         0       0       0       0       0
  3366 ;;      Locals:         0       0       0       0       0
  3367 ;;      Temps:          0       0       0       0       0
  3368 ;;      Totals:         0       0       0       0       0
  3369 ;;Total ram usage:        0 bytes
  3370 ;; Hardware stack levels used: 1
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_MFRC522_Rd
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           
  3379                           ;psect for function _SPI_Read
  3380  026E                     _SPI_Read:
  3381  026E                     l1355:	
  3382                           ;incstack = 0
  3383                           ; Regs used in _SPI_Read: [wreg+status,2]
  3384                           
  3385                           
  3386                           ;./rfid.h: 158:     SSPBUF = 0x00;
  3387  026E  1283               	bcf	3,5	;RP0=0, select bank0
  3388  026F  1303               	bcf	3,6	;RP1=0, select bank0
  3389  0270  0193               	clrf	19	;volatile
  3390  0271                     l46:	
  3391                           ;./rfid.h: 159:     while(PIR1bits.SSPIF == 0);
  3392                           
  3393  0271  1D8C               	btfss	12,3	;volatile
  3394  0272  2A74               	goto	u591
  3395  0273  2A75               	goto	u590
  3396  0274                     u591:
  3397  0274  2A71               	goto	l46
  3398  0275                     u590:
  3399  0275                     l1357:
  3400                           
  3401                           ;./rfid.h: 161:     return SSPBUF;
  3402  0275  0813               	movf	19,w	;volatile
  3403  0276                     l49:
  3404  0276  0008               	return
  3405  0277                     __end_of_SPI_Read:
  3406                           
  3407                           	psect	text20
  3408  0261                     __ptext20:	
  3409 ;; *************** function _IO_Init *****************
  3410 ;; Defined at:
  3411 ;;		line 47 in file "newmain.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;		None
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		None
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3425 ;;      Params:         0       0       0       0       0
  3426 ;;      Locals:         0       0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0
  3428 ;;      Totals:         0       0       0       0       0
  3429 ;;Total ram usage:        0 bytes
  3430 ;; Hardware stack levels used: 1
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_main
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           
  3439                           ;psect for function _IO_Init
  3440  0261                     _IO_Init:
  3441  0261                     l1581:	
  3442                           ;incstack = 0
  3443                           ; Regs used in _IO_Init: []
  3444                           
  3445                           
  3446                           ;newmain.c: 49:     TRISCbits.TRISC6 = 0;
  3447  0261  1683               	bsf	3,5	;RP0=1, select bank1
  3448  0262  1303               	bcf	3,6	;RP1=0, select bank1
  3449  0263  1307               	bcf	7,6	;volatile
  3450                           
  3451                           ;newmain.c: 50:     TRISCbits.TRISC7 = 1;
  3452  0264  1787               	bsf	7,7	;volatile
  3453  0265                     l185:
  3454  0265  0008               	return
  3455  0266                     __end_of_IO_Init:
  3456  007E                     btemp	set	126	;btemp
  3457  007E                     wtemp0	set	126
  3458                           
  3459                           	psect	config
  3460                           
  3461                           ;Config register CONFIG @ 0x2007
  3462                           ;	Oscillator Selection bits
  3463                           ;	FOSC = HS, HS oscillator
  3464                           ;	Watchdog Timer Enable bit
  3465                           ;	WDTE = OFF, WDT disabled
  3466                           ;	Power-up Timer Enable bit
  3467                           ;	PWRTE = OFF, PWRT disabled
  3468                           ;	Brown-out Reset Enable bit
  3469                           ;	BOREN = OFF, BOR disabled
  3470                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3471                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3472                           ;	Data EEPROM Memory Code Protection bit
  3473                           ;	CPD = OFF, Data EEPROM code protection off
  3474                           ;	Flash Program Memory Write Enable bits
  3475                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  3476                           ;	In-Circuit Debugger Mode bit
  3477                           ;	DEBUG = 0x1, unprogrammed default
  3478                           ;	Flash Program Memory Code Protection bit
  3479                           ;	CP = OFF, Code protection off
  3480  2007                     	org	8199
  3481  2007  3F3A               	dw	16186

Data Sizes:
    Strings     111
    Constant    8
    Data        0
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     40      40
    BANK1            80     50      72
    BANK3            96      0      50
    BANK2            96      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 5
		 -> serNum(BANK1[5]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 5
		 -> serNum(BANK1[5]), 

    memcpy@s1	PTR const void  size(1) Largest target is 16
		 -> str(BANK1[16]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 16
		 -> str(BANK1[16]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 46
		 -> STR_3(CODE[46]), STR_2(CODE[26]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 50
		 -> main@tx(BANK1[50]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__memcpy	PTR void  size(1) Largest target is 5
		 -> serNum(BANK1[5]), 

    UART_Transmit_Text@str	PTR unsigned char  size(2) Largest target is 50
		 -> main@tx(BANK1[50]), STR_1(CODE[22]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK1[16]), 

    MFRC522_Request@TagType	PTR unsigned char  size(1) Largest target is 16
		 -> str(BANK1[16]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(1) Largest target is 18
		 -> str(BANK1[16]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), MFRC522_Halt@buff(COMMON[4]), 
		 -> MFRC522_SelectTag@buffer(COMMON[9]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMMON[2]), MFRC522_Write@recvBits(COMMON[2]), MFRC522_Auth@recvBits(COMMON[2]), 
		 -> MFRC522_Halt@unLen(COMMON[2]), MFRC522_SelectTag@recvBits(COMMON[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(1) Largest target is 18
		 -> str(BANK1[16]), MFRC522_Write@buff(BANK0[18]), MFRC522_Auth@buff(COMMON[12]), MFRC522_Halt@buff(COMMON[4]), 
		 -> MFRC522_SelectTag@buffer(COMMON[9]), 


Critical Paths under _main in COMMON

    _main->_MFRC522_Init
    _main->_MFRC522_Request
    _sprintf->___lwdiv
    _UART_Transmit_Text->_UART_Transmit
    _MFRC522_Init->_MFRC522_AntennaOn
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_AntiColl->_MFRC522_Clear_Bit
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_SPI_Write

Critical Paths under _main in BANK0

    _main->_MFRC522_AntiColl
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_AntiColl->_MFRC522_ToCard

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                61    61      0   28407
                                             29 BANK0     11    11      0
                                              0 BANK1     50    50      0
                            _IO_Init
                   _MFRC522_AntiColl
                       _MFRC522_Init
                    _MFRC522_Request
                           _SPI_Init
                          _UART_Init
                 _UART_Transmit_Text
                             _memcpy
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             30    19     11     941
                                              8 COMMON     3     3      0
                                              0 BANK0     18     7     11
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _memcpy                                               8     5      3     328
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (1) _UART_Transmit_Text                                   4     2      2     340
                                              1 COMMON     4     2      2
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Request                                      9     8      1   10070
                                             11 COMMON     1     0      1
                                             18 BANK0      8     8      0
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         1     1      0    4511
                                             11 COMMON     1     1      0
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        1     1      0    1358
                                              7 COMMON     1     1      0
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    1     1      0    1795
                                             10 COMMON     1     1      0
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (1) _MFRC522_AntiColl                                    11    11      0   12121
                                             18 BANK0     11    11      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_ToCard                                      18    14      4    8378
                                              0 BANK0     18    14      4
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Set_Bit                                      3     2      1    1795
                                              7 COMMON     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_Clear_Bit                                    4     3      1    2023
                                              7 COMMON     4     3      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Wr                                           3     2      1    1358
                                              4 COMMON     3     2      1
                         _MFRC522_Rd (ARG)
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Rd                                           3     3      0      67
                                              1 COMMON     3     3      0
                           _SPI_Read
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SPI_Read                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IO_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IO_Init
   _MFRC522_AntiColl
     _MFRC522_Clear_Bit
       _MFRC522_Rd
         _SPI_Read
         _SPI_Write
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
         _SPI_Write (ARG)
     _MFRC522_ToCard
       _MFRC522_Clear_Bit
       _MFRC522_Rd
       _MFRC522_Set_Bit
         _MFRC522_Rd
         _MFRC522_Wr
       _MFRC522_Wr
     _MFRC522_Wr
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
     _MFRC522_Reset
       _MFRC522_Wr
     _MFRC522_Wr
   _MFRC522_Request
     _MFRC522_ToCard
     _MFRC522_Wr
   _SPI_Init
   _UART_Init
   _UART_Transmit_Text
     _UART_Transmit
   _memcpy
   _sprintf
     ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      AF       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     28      28       5       50.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     32      48       7       90.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      32       9       52.1%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      AF      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Mar 03 15:39:21 2022

                          pc 0002                  _SSPSTATbits 0094                           l40 027C  
                         l43 0280                           l52 02F2                           l61 02B4  
                         l37 030C                           l46 0271                           l55 0327  
                         l64 0296                           l49 0276                           l73 0405  
                         l58 02DB                           l67 028B                           l89 07E7  
                         fsr 0004                          l101 07E8                          l104 03C0  
                        l200 0352                          l107 03C1                          l162 04B3  
                        l317 0577                          l158 04B2                          l191 0298  
                        l185 0265                          l194 02A2                          l188 02C7  
                        l593 0449                          l772 0372                          l775 0380  
                        u600 06DB                          u601 06DA                          u610 06ED  
                        u611 06EC                          u700 07A7                          u620 0714  
                        u701 07A6                          u621 0713                          u605 06D7  
                        u710 07AF                          u630 0718                          u711 07AE  
                        u631 0717                          u720 07DA                          u640 071E  
                        u800 0445                          u721 07D9                          u641 071D  
                        u801 0444                          u650 0730                          u810 03B5  
                        u730 029E                          u651 072F                          u811 03B4  
                        u731 029D                          u580 0280                          u660 073B  
                        u820 03BC                          u740 040E                          u900 04C2  
                        u581 027F                          u725 07D6                          u661 073A  
                        u821 03BB                          u741 040D                          u901 04C1  
                        u590 0275                          u670 0745                          u910 0511  
                        u591 0274                          u671 0744                          u911 0510  
                        u680 074D                          u760 0420                          u920 051C  
                        u681 074C                          u761 041F                          u921 051B  
                        u690 0769                          u930 0561                          u691 0768  
                        u755 0412                          u931 0560                          u915 050D  
                        u860 0490                          u780 0431                          u940 0573  
                        u861 048F                          u781 0430                          u941 0572  
                        u870 04A5                          u950 0380                          u871 04A4  
                        u951 037F                          u775 0421                          u880 04AE  
                        u881 04AD                          u785 042D                          u890 0352  
                        u891 0351                          u795 0439                          fsr0 0004  
                        _str 00D3                          indf 0000               ??_MFRC522_Init 007B  
                       l1401 0687                         l1411 06DB                         l1403 06B1  
                       l1421 070E                         l1413 06E5                         l1405 06B6  
                       l1501 0445                         l1431 0730                         l1423 0714  
                       l1415 06ED                         l1407 06C6                         l1511 038E  
                       l1353 0278                         l1361 02DD                         l1441 074D  
                       l1433 073B                         l1425 0718                         l1417 06F7  
                       l1409 06CE                         l1513 0397                         l1505 02F3  
                       l1601 033B                         l1355 026E                         l1371 031B  
                       l1363 02E0                         l1451 07A7                         l1443 0764  
                       l1435 073E                         l1427 071E                         l1419 06FD  
                       l1507 03C2                         l1515 03B0                         l1603 033F  
                       l1611 04C9                         l1357 0275                         l1373 0323  
                       l1365 02EF                         l1381 02A4                         l1461 07C7  
                       l1453 07A9                         l1445 0769                         l1437 0745  
                       l1429 0728                         l1517 03B5                         l1509 0384  
                       l1621 04F0                         l1613 04CE                         l1605 04B7  
                       l1375 0326                         l1367 030E                         l1463 07CD  
                       l1455 07AF                         l1447 078E                         l1439 0747  
                       l1391 0663                         l1551 044E                         l1383 028C  
                       l1519 03BC                         l1623 04F4                         l1607 04BC  
                       l1369 0311                         l1465 07DA                         l1457 07B3  
                       l1449 07A2                         l1393 0665                         l1561 048B  
                       l1553 0455                         l1385 0281                         l1481 0408  
                       l1641 054D                         l1633 0512                         l1617 04CE  
                       l1609 04C2                         l1801 0582                         l1379 02C9  
                       l1459 07B6                         l1467 07E1                         l1395 066E  
                       l1387 065E                         l1571 049B                         l1563 0490  
                       l1555 045E                         l1475 0298                         l1491 0420  
                       l1483 040E                         l1643 0554                         l1635 051C  
                       l1619 04E8                         l1811 05D8                         l1803 058C  
                       l1581 0261                         l1389 0662                         l1573 049F  
                       l1557 0464                         l1549 044D                         l1477 029E  
                       l1661 0364                         l1493 0431                         l1485 0411  
                       l1637 0521                         l1645 0558                         l1629 04F6  
                       l1813 05E5                         l1805 0595                         l1399 0677  
                       l1575 04A5                         l1559 046E                         l1591 02C2  
                       l1583 02B5                         l1663 0368                         l1495 0437  
                       l1487 0418                         l1479 0406                         l1639 0542  
                       l1647 0561                         l1815 05F5                         l1807 05A8  
                       l1577 04AE                         l1569 0491                         l1593 02C5  
                       l1585 02B9                         l1657 0354                         l1497 0438  
                       l1489 041C                         l1649 0573                         l1817 05FC  
                       l1809 05AD                         l1595 02C6                         l1587 02BC  
                       l1659 035D                         l1499 043F                         l1819 0648  
                       l1589 02BF                         l1597 0328                         l1861 04E0  
                       l1863 067F                         l1599 032A                         l1797 0578  
                       l1799 057D                         STR_1 0063                         STR_2 0049  
                       STR_3 001B                         STR_4 0079                         _CREN 00C4  
                       u1130 05AD                         u1131 05AC                         u1140 05FC  
                       u1141 05FB                         u1157 0650                         _RCIE 0465  
                       _SPEN 00C7                         _TRMT 04C1                         _TXEN 04C5  
            __end_of_IO_Init 0266                         _main 0578        MFRC522_AntiColl@unLen 0038  
                       btemp 007E                         start 0000             _MFRC522_AntiColl 044A  
             MFRC522_Rd@addr 0072   __end_of_UART_Transmit_Text 0353              ??_MFRC522_Reset 0077  
             MFRC522_Wr@addr 0076                        ?_main 0070              __end_of___lwdiv 044A  
                      _SPBRG 0099                        _TXREG 0019          __size_of_MFRC522_Rd 001B  
        __size_of_MFRC522_Wr 0017           __size_of_UART_Init 0013       MFRC522_AntiColl@serNum 003C  
           __end_of_SPI_Init 030D             __end_of_SPI_Read 0277                        pclath 000A  
          _MFRC522_Clear_Bit 02C8                        status 0003                        wtemp0 007E  
            __end_of_sprintf 0578           ?_MFRC522_Clear_Bit 0077           __size_of_SPI_Write 000A  
          _MFRC522_AntennaOn 0281              __initialization 07E9                 __end_of_main 065B  
         ?_MFRC522_AntennaOn 0070          ??_MFRC522_Clear_Bit 0078              MFRC522_Rd@value 0073  
           ??_MFRC522_ToCard 0024     __size_of_MFRC522_Set_Bit 0012     __size_of_MFRC522_Request 0041  
                     ??_main 003D          ??_MFRC522_AntennaOn 007A              MFRC522_ToCard@i 002F  
            MFRC522_ToCard@n 0031        MFRC522_ToCard@backLen 0023                    ??_IO_Init 0070  
            MFRC522_Wr@value 0074    __end_of_MFRC522_Clear_Bit 02DC        MFRC522_ToCard@_status 002B  
      MFRC522_ToCard@command 002E        MFRC522_ToCard@sendLen 0021        MFRC522_ToCard@waitIRq 002A  
                     _SSPBUF 0013    __end_of_MFRC522_AntennaOn 028C            __end_of_UART_Init 02C8  
       __end_of_MFRC522_Init 0406      MFRC522_AntiColl@_status 003A                    ??___lwdiv 0074  
                     _memcpy 0353                       _serNum 00E3                       _status 00D2  
                     main@tx 00A0            __end_of_SPI_Write 0281                    ??_sprintf 0078  
    __end_of__initialization 07FC       MFRC522_Request@TagType 007B                 ??_MFRC522_Rd 0071  
      __end_of_UART_Transmit 02A3                 ??_MFRC522_Wr 0075               __pcstackCOMMON 0070  
                  ?_SPI_Init 0070                    ?_SPI_Read 0070       MFRC522_Request@_status 0037  
     MFRC522_Request@reqMode 0036     __end_of_MFRC522_AntiColl 04B4            ??_MFRC522_Set_Bit 0078  
         __end_of_MFRC522_Rd 0328           __end_of_MFRC522_Wr 02F3            ??_MFRC522_Request 0032  
 __size_of_MFRC522_Clear_Bit 0014                   __pbssBANK1 00D2                   __pbssBANK3 0190  
     MFRC522_ToCard@backData 0022   __size_of_MFRC522_AntennaOn 000B                   __pmaintext 0578  
                    ?_memcpy 0070                   ??_SPI_Init 0070                   ??_SPI_Read 0070  
     MFRC522_ToCard@lastBits 002C           _UART_Transmit_Text 0328       MFRC522_ToCard@sendData 0020  
                    _IO_Init 0261                   __stringtab 0003          ?_UART_Transmit_Text 0071  
      __size_of_MFRC522_Init 0044                      ___lwdiv 0406         ??_UART_Transmit_Text 0073  
            __size_of_memcpy 002E        __end_of_MFRC522_Reset 0297                      __ptext1 04B4  
                    __ptext2 0406                      __ptext3 0353                      __ptext4 0328  
                    __ptext5 0297                      __ptext6 02B5                      __ptext7 02F3  
                    __ptext8 0381                      __ptext9 03C2            __end_of_hexpowers 001B  
                    _sprintf 04B4                      clrloop0 0267                 _MFRC522_Init 03C2  
       end_of_initialization 07FC                      memcpy@d 0076                      memcpy@n 0071  
                    memcpy@s 0077               UART_Transmit@c 0070                    _UART_Init 02B5  
                  _PORTCbits 0007                    _TRISCbits 0087                    _SPI_Write 0277  
                  _RX_Buffer 0190              _MFRC522_Set_Bit 02A3      MFRC522_Request@backBits 0038  
        MFRC522_ToCard@irqEn 002D              _MFRC522_Request 0381                   ?_UART_Init 0070  
             __end_of_memcpy 0381            __size_of_SPI_Init 001A            __size_of_SPI_Read 0009  
        start_initialization 07E9            ?_MFRC522_AntiColl 0070            MFRC522_AntiColl@i 003B  
                 ?_SPI_Write 0070      __size_of_MFRC522_ToCard 018E           ??_MFRC522_AntiColl 0032  
            SPI_Write@Tvalue 0070                     ??_memcpy 0073                  __pbssCOMMON 007C  
                  ___latbits 0002       __size_of_UART_Transmit 000C                __pcstackBANK0 0020  
              __pcstackBANK1 00A0                     ?_IO_Init 0070                  sprintf@prec 002F  
    __end_of_MFRC522_Set_Bit 02B5      __end_of_MFRC522_Request 03C2             ___lwdiv@dividend 0072  
        MFRC522_Set_Bit@addr 0079          MFRC522_Set_Bit@mask 0077                     ?___lwdiv 0070  
                ??_UART_Init 0070                    __pstrings 0003                    _hexpowers 0013  
                ??_SPI_Write 0070             ___lwdiv@quotient 0075                     ?_sprintf 0020  
                  clear_ram0 0266                _UART_Transmit 0297                     _PIR1bits 000C  
        UART_Transmit_Text@i 0074  __size_of_UART_Transmit_Text 002B                     _SPI_Init 02F3  
                   _SPI_Read 026E                  __stringbase 0012               _MFRC522_ToCard 065B  
           __size_of_IO_Init 0005       __size_of_MFRC522_Reset 000B               ?_UART_Transmit 0070  
           ?_MFRC522_Set_Bit 0077        MFRC522_Clear_Bit@addr 007A             ?_MFRC522_Request 007B  
      MFRC522_Clear_Bit@mask 0077                    memcpy@tmp 0074             __size_of___lwdiv 0044  
         __end_of__stringtab 0013                   sprintf@idx 002B                   sprintf@val 002D  
     __end_of_MFRC522_ToCard 07E9              ___lwdiv@divisor 0070              ___lwdiv@counter 0077  
                   __ptext10 028C                     __ptext11 0281                     __ptext20 0261  
                   __ptext12 044A                     __ptext13 065B                     __ptext14 02A3  
                   __ptext15 02C8                     __ptext16 02DC                     __ptext17 030D  
                   __ptext18 0277                     __ptext19 026E  MFRC522_AntiColl@serNumCheck 0037  
           __size_of_sprintf 00C4                __size_of_main 00E3                   _MFRC522_Rd 030D  
                 _MFRC522_Wr 02DC    __size_of_MFRC522_AntiColl 006A                     _rx_index 007C  
              _MFRC522_Reset 028C                   _INTCONbits 000B              ?_MFRC522_ToCard 0020  
                   memcpy@d1 0075                     memcpy@s1 0070                    sprintf@ap 002C  
                  sprintf@sp 0030              ??_UART_Transmit 0070                    stringcode 000D  
             ?_MFRC522_Reset 0070        UART_Transmit_Text@str 0071                     sprintf@c 0031  
                   sprintf@f 0020                     stringdir 000D                     stringtab 0003  
              ?_MFRC522_Init 0070                   _SSPCONbits 0014                  ?_MFRC522_Rd 0070  
                ?_MFRC522_Wr 0074  
