

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Oct 01 19:08:35 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27     0000                     
    28                           ; Version 2.40
    29                           ; Generated 04/07/2022 GMT
    30                           ; 
    31                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F877A Definitions
    61                           ; 
    62                           ; SFR Addresses
    63     0000                     	;# 
    64     0001                     	;# 
    65     0002                     	;# 
    66     0003                     	;# 
    67     0004                     	;# 
    68     0005                     	;# 
    69     0006                     	;# 
    70     0007                     	;# 
    71     0008                     	;# 
    72     0009                     	;# 
    73     000A                     	;# 
    74     000B                     	;# 
    75     000C                     	;# 
    76     000D                     	;# 
    77     000E                     	;# 
    78     000E                     	;# 
    79     000F                     	;# 
    80     0010                     	;# 
    81     0011                     	;# 
    82     0012                     	;# 
    83     0013                     	;# 
    84     0014                     	;# 
    85     0015                     	;# 
    86     0015                     	;# 
    87     0016                     	;# 
    88     0017                     	;# 
    89     0018                     	;# 
    90     0019                     	;# 
    91     001A                     	;# 
    92     001B                     	;# 
    93     001B                     	;# 
    94     001C                     	;# 
    95     001D                     	;# 
    96     001E                     	;# 
    97     001F                     	;# 
    98     0081                     	;# 
    99     0085                     	;# 
   100     0086                     	;# 
   101     0087                     	;# 
   102     0088                     	;# 
   103     0089                     	;# 
   104     008C                     	;# 
   105     008D                     	;# 
   106     008E                     	;# 
   107     0091                     	;# 
   108     0092                     	;# 
   109     0093                     	;# 
   110     0094                     	;# 
   111     0098                     	;# 
   112     0099                     	;# 
   113     009C                     	;# 
   114     009D                     	;# 
   115     009E                     	;# 
   116     009F                     	;# 
   117     010C                     	;# 
   118     010D                     	;# 
   119     010E                     	;# 
   120     010F                     	;# 
   121     018C                     	;# 
   122     018D                     	;# 
   123     0000                     	;# 
   124     0001                     	;# 
   125     0002                     	;# 
   126     0003                     	;# 
   127     0004                     	;# 
   128     0005                     	;# 
   129     0006                     	;# 
   130     0007                     	;# 
   131     0008                     	;# 
   132     0009                     	;# 
   133     000A                     	;# 
   134     000B                     	;# 
   135     000C                     	;# 
   136     000D                     	;# 
   137     000E                     	;# 
   138     000E                     	;# 
   139     000F                     	;# 
   140     0010                     	;# 
   141     0011                     	;# 
   142     0012                     	;# 
   143     0013                     	;# 
   144     0014                     	;# 
   145     0015                     	;# 
   146     0015                     	;# 
   147     0016                     	;# 
   148     0017                     	;# 
   149     0018                     	;# 
   150     0019                     	;# 
   151     001A                     	;# 
   152     001B                     	;# 
   153     001B                     	;# 
   154     001C                     	;# 
   155     001D                     	;# 
   156     001E                     	;# 
   157     001F                     	;# 
   158     0081                     	;# 
   159     0085                     	;# 
   160     0086                     	;# 
   161     0087                     	;# 
   162     0088                     	;# 
   163     0089                     	;# 
   164     008C                     	;# 
   165     008D                     	;# 
   166     008E                     	;# 
   167     0091                     	;# 
   168     0092                     	;# 
   169     0093                     	;# 
   170     0094                     	;# 
   171     0098                     	;# 
   172     0099                     	;# 
   173     009C                     	;# 
   174     009D                     	;# 
   175     009E                     	;# 
   176     009F                     	;# 
   177     010C                     	;# 
   178     010D                     	;# 
   179     010E                     	;# 
   180     010F                     	;# 
   181     018C                     	;# 
   182     018D                     	;# 
   183                           
   184                           	psect	strings
   185     023C                     __pstrings:
   186     023C                     stringtab:
   187     023C                     __stringtab:
   188     023C                     stringcode:	
   189                           ;	String table - string pointers are 1 byte each
   190                           
   191     023C                     stringdir:
   192     023C  3002               	movlw	high stringdir
   193     023D  008A               	movwf	10
   194     023E  0804               	movf	4,w
   195     023F  0A84               	incf	4,f
   196     0240  0782               	addwf	2,f
   197     0241                     __stringbase:
   198     0241  3400               	retlw	0
   199     0242                     __end_of__stringtab:
   200     0242                     _dpowers:
   201     0242  3401               	retlw	1
   202     0243  3400               	retlw	0
   203     0244  340A               	retlw	10
   204     0245  3400               	retlw	0
   205     0246  3464               	retlw	100
   206     0247  3400               	retlw	0
   207     0248  34E8               	retlw	232
   208     0249  3403               	retlw	3
   209     024A  3410               	retlw	16
   210     024B  3427               	retlw	39
   211     024C                     __end_of_dpowers:
   212     001E                     _ADRESH	set	30
   213     001F                     _ADCON0	set	31
   214     001A                     _RCREG	set	26
   215     0019                     _TXREG	set	25
   216     000B                     _INTCONbits	set	11
   217     0006                     _PORTB	set	6
   218     00FA                     _GO_nDONE	set	250
   219     0065                     _RCIF	set	101
   220     00C4                     _CREN	set	196
   221     00C7                     _SPEN	set	199
   222     009E                     _ADRESL	set	158
   223     009F                     _ADCON1	set	159
   224     0085                     _TRISA	set	133
   225     0099                     _SPBRG	set	153
   226     0086                     _TRISB	set	134
   227     0087                     _TRISCbits	set	135
   228     04C1                     _TRMT	set	1217
   229     0465                     _RCIE	set	1125
   230     04C5                     _TXEN	set	1221
   231     024C                     STR_1:
   232     024C  3448               	retlw	72	;'H'
   233     024D  3465               	retlw	101	;'e'
   234     024E  346C               	retlw	108	;'l'
   235     024F  346C               	retlw	108	;'l'
   236     0250  346F               	retlw	111	;'o'
   237     0251  3420               	retlw	32	;' '
   238     0252  3457               	retlw	87	;'W'
   239     0253  346F               	retlw	111	;'o'
   240     0254  3472               	retlw	114	;'r'
   241     0255  346C               	retlw	108	;'l'
   242     0256  3464               	retlw	100	;'d'
   243     0257  3420               	retlw	32	;' '
   244     0258  3425               	retlw	37	;'%'
   245     0259  3464               	retlw	100	;'d'
   246     025A  340D               	retlw	13
   247     025B  340A               	retlw	10
   248     025C  3400               	retlw	0
   249                           
   250                           	psect	cinit
   251     0011                     start_initialization:	
   252                           ; #config settings
   253                           
   254     0011                     __initialization:
   255                           
   256                           ; Clear objects allocated to COMMON
   257     0011  01FA               	clrf	__pbssCOMMON& (0+127)
   258                           
   259                           ; Clear objects allocated to BANK1
   260     0012  1383               	bcf	3,7	;select IRP bank0
   261     0013  30A0               	movlw	low __pbssBANK1
   262     0014  0084               	movwf	4
   263     0015  30D2               	movlw	low (__pbssBANK1+50)
   264     0016  120A  118A  22C3  120A  118A  	fcall	clear_ram0
   265     001B                     end_of_initialization:	
   266                           ;End of C runtime variable initialization code
   267                           
   268     001B                     __end_of__initialization:
   269     001B  0183               	clrf	3
   270     001C  120A  118A  28FB   	ljmp	_main	;jump to C main() function
   271                           
   272                           	psect	bssCOMMON
   273     007A                     __pbssCOMMON:
   274     007A                     _rx_index:
   275     007A                     	ds	1
   276                           
   277                           	psect	bssBANK1
   278     00A0                     __pbssBANK1:
   279     00A0                     _RX_Buffer:
   280     00A0                     	ds	50
   281                           
   282                           	psect	clrtext
   283     02C3                     clear_ram0:	
   284                           ;	Called with FSR containing the base address, and
   285                           ;	W with the last address+1
   286                           
   287     02C3  0064               	clrwdt	;clear the watchdog before getting into this loop
   288     02C4                     clrloop0:
   289     02C4  0180               	clrf	0	;clear RAM location pointed to by FSR
   290     02C5  0A84               	incf	4,f	;increment pointer
   291     02C6  0604               	xorwf	4,w	;XOR with final address
   292     02C7  1903               	btfsc	3,2	;have we reached the end yet?
   293     02C8  3400               	retlw	0	;all done for this memory range, return
   294     02C9  0604               	xorwf	4,w	;XOR again to restore value
   295     02CA  2AC4               	goto	clrloop0	;do the next byte
   296                           
   297                           	psect	cstackCOMMON
   298     0070                     __pcstackCOMMON:
   299     0070                     ?_HandleData:
   300     0070                     ?_ClearRX_Buffer:	
   301                           ; 1 bytes @ 0x0
   302                           
   303     0070                     ??_ClearRX_Buffer:	
   304                           ; 1 bytes @ 0x0
   305                           
   306     0070                     ?_IO_Init:	
   307                           ; 1 bytes @ 0x0
   308                           
   309     0070                     ?_UART_Init:	
   310                           ; 1 bytes @ 0x0
   311                           
   312     0070                     ?_UART_Transmit:	
   313                           ; 1 bytes @ 0x0
   314                           
   315     0070                     ?_UART_Transmit_Text:	
   316                           ; 1 bytes @ 0x0
   317                           
   318     0070                     ?_main:	
   319                           ; 1 bytes @ 0x0
   320                           
   321     0070                     ?_isr1:	
   322                           ; 1 bytes @ 0x0
   323                           
   324     0070                     ?i1_UART_Transmit:	
   325                           ; 1 bytes @ 0x0
   326                           
   327     0070                     ??i1_UART_Transmit:	
   328                           ; 1 bytes @ 0x0
   329                           
   330     0070                     ?i1_UART_Transmit_Text:	
   331                           ; 1 bytes @ 0x0
   332                           
   333     0070                     i1UART_Transmit@c:	
   334                           ; 1 bytes @ 0x0
   335                           
   336                           
   337                           ; 1 bytes @ 0x0
   338     0070                     	ds	1
   339     0071                     ??i1_UART_Transmit_Text:
   340     0071                     ClearRX_Buffer@i:	
   341                           ; 1 bytes @ 0x1
   342                           
   343                           
   344                           ; 1 bytes @ 0x1
   345     0071                     	ds	1
   346     0072                     i1UART_Transmit_Text@str:
   347                           
   348                           ; 1 bytes @ 0x2
   349     0072                     	ds	1
   350     0073                     i1UART_Transmit_Text@i:
   351                           
   352                           ; 1 bytes @ 0x3
   353     0073                     	ds	1
   354     0074                     ??_HandleData:
   355     0074                     HandleData@RX:	
   356                           ; 1 bytes @ 0x4
   357                           
   358                           
   359                           ; 1 bytes @ 0x4
   360     0074                     	ds	1
   361     0075                     ??_isr1:
   362                           
   363                           ; 1 bytes @ 0x5
   364     0075                     	ds	4
   365     0079                     isr1@ReceivedData:
   366                           
   367                           ; 1 bytes @ 0x9
   368     0079                     	ds	1
   369                           
   370                           	psect	cstackBANK0
   371     0020                     __pcstackBANK0:
   372     0020                     ??_IO_Init:
   373     0020                     ??_UART_Init:	
   374                           ; 1 bytes @ 0x0
   375                           
   376     0020                     ??_UART_Transmit:	
   377                           ; 1 bytes @ 0x0
   378                           
   379     0020                     ?___lwdiv:	
   380                           ; 1 bytes @ 0x0
   381                           
   382     0020                     UART_Transmit@c:	
   383                           ; 2 bytes @ 0x0
   384                           
   385     0020                     ___lwdiv@divisor:	
   386                           ; 1 bytes @ 0x0
   387                           
   388                           
   389                           ; 2 bytes @ 0x0
   390     0020                     	ds	1
   391     0021                     ??_UART_Transmit_Text:
   392                           
   393                           ; 1 bytes @ 0x1
   394     0021                     	ds	1
   395     0022                     UART_Transmit_Text@i:
   396     0022                     ___lwdiv@dividend:	
   397                           ; 1 bytes @ 0x2
   398                           
   399                           
   400                           ; 2 bytes @ 0x2
   401     0022                     	ds	1
   402     0023                     UART_Transmit_Text@str:
   403                           
   404                           ; 1 bytes @ 0x3
   405     0023                     	ds	1
   406     0024                     ??___lwdiv:
   407                           
   408                           ; 1 bytes @ 0x4
   409     0024                     	ds	1
   410     0025                     ___lwdiv@quotient:
   411                           
   412                           ; 2 bytes @ 0x5
   413     0025                     	ds	2
   414     0027                     ___lwdiv@counter:
   415                           
   416                           ; 1 bytes @ 0x7
   417     0027                     	ds	1
   418     0028                     ?___lwmod:
   419     0028                     ___lwmod@divisor:	
   420                           ; 2 bytes @ 0x8
   421                           
   422                           
   423                           ; 2 bytes @ 0x8
   424     0028                     	ds	2
   425     002A                     ___lwmod@dividend:
   426                           
   427                           ; 2 bytes @ 0xA
   428     002A                     	ds	2
   429     002C                     ??___lwmod:
   430                           
   431                           ; 1 bytes @ 0xC
   432     002C                     	ds	1
   433     002D                     ___lwmod@counter:
   434                           
   435                           ; 1 bytes @ 0xD
   436     002D                     	ds	1
   437     002E                     ?_sprintf:
   438     002E                     sprintf@f:	
   439                           ; 2 bytes @ 0xE
   440                           
   441                           
   442                           ; 1 bytes @ 0xE
   443     002E                     	ds	3
   444     0031                     ??_sprintf:
   445                           
   446                           ; 1 bytes @ 0x11
   447     0031                     	ds	3
   448     0034                     sprintf@ap:
   449                           
   450                           ; 1 bytes @ 0x14
   451     0034                     	ds	1
   452     0035                     sprintf@flag:
   453                           
   454                           ; 1 bytes @ 0x15
   455     0035                     	ds	1
   456     0036                     sprintf@prec:
   457                           
   458                           ; 1 bytes @ 0x16
   459     0036                     	ds	1
   460     0037                     sprintf@val:
   461                           
   462                           ; 2 bytes @ 0x17
   463     0037                     	ds	2
   464     0039                     sprintf@sp:
   465                           
   466                           ; 1 bytes @ 0x19
   467     0039                     	ds	1
   468     003A                     sprintf@c:
   469                           
   470                           ; 1 bytes @ 0x1A
   471     003A                     	ds	1
   472     003B                     ??_main:
   473                           
   474                           ; 1 bytes @ 0x1B
   475     003B                     	ds	3
   476     003E                     main@text:
   477                           
   478                           ; 20 bytes @ 0x1E
   479     003E                     	ds	20
   480     0052                     main@channel:
   481                           
   482                           ; 2 bytes @ 0x32
   483     0052                     	ds	2
   484     0054                     main@adc:
   485                           
   486                           ; 2 bytes @ 0x34
   487     0054                     	ds	2
   488                           
   489                           	psect	maintext
   490     00FB                     __pmaintext:	
   491 ;;
   492 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   493 ;;
   494 ;; *************** function _main *****************
   495 ;; Defined at:
   496 ;;		line 105 in file "newmain.c"
   497 ;; Parameters:    Size  Location     Type
   498 ;;		None
   499 ;; Auto vars:     Size  Location     Type
   500 ;;  text           20   30[BANK0 ] unsigned char [20]
   501 ;;  adc             2   52[BANK0 ] int 
   502 ;;  channel         2   50[BANK0 ] int 
   503 ;; Return value:  Size  Location     Type
   504 ;;                  1    wreg      void 
   505 ;; Registers used:
   506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   507 ;; Tracked objects:
   508 ;;		On entry : B00/0
   509 ;;		On exit  : 0/0
   510 ;;		Unchanged: 0/0
   511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   512 ;;      Params:         0       0       0       0       0
   513 ;;      Locals:         0      24       0       0       0
   514 ;;      Temps:          0       3       0       0       0
   515 ;;      Totals:         0      27       0       0       0
   516 ;;Total ram usage:       27 bytes
   517 ;; Hardware stack levels required when called: 6
   518 ;; This function calls:
   519 ;;		_IO_Init
   520 ;;		_UART_Init
   521 ;;		_UART_Transmit_Text
   522 ;;		_sprintf
   523 ;; This function is called by:
   524 ;;		Startup code after reset
   525 ;; This function uses a non-reentrant model
   526 ;;
   527                           
   528     00FB                     _main:	
   529                           ;psect for function _main
   530                           
   531     00FB                     l1142:	
   532                           ;incstack = 0
   533                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   534                           
   535                           
   536                           ;newmain.c: 107:     IO_Init();
   537     00FB  120A  118A  22BA  120A  118A  	fcall	_IO_Init
   538     0100                     l1144:
   539                           
   540                           ;newmain.c: 108:     UART_Init();
   541     0100  120A  118A  227B  120A  118A  	fcall	_UART_Init
   542                           
   543                           ;newmain.c: 110:     TRISA = 0xFF;
   544     0105  30FF               	movlw	255
   545     0106  1683               	bsf	3,5	;RP0=1, select bank1
   546     0107  1303               	bcf	3,6	;RP1=0, select bank1
   547     0108  0085               	movwf	5	;volatile
   548                           
   549                           ;newmain.c: 111:     ADCON1 = 0b11000000;
   550     0109  30C0               	movlw	192
   551     010A  009F               	movwf	31	;volatile
   552                           
   553                           ;newmain.c: 112:     ADCON0 = 0b00000001;
   554     010B  3001               	movlw	1
   555     010C  1283               	bcf	3,5	;RP0=0, select bank0
   556     010D  1303               	bcf	3,6	;RP1=0, select bank0
   557     010E  009F               	movwf	31	;volatile
   558     010F                     l1146:
   559                           
   560                           ;newmain.c: 113:     ADRESH = 0;
   561     010F  019E               	clrf	30	;volatile
   562     0110                     l1148:
   563                           
   564                           ;newmain.c: 114:     ADRESL = 0;
   565     0110  1683               	bsf	3,5	;RP0=1, select bank1
   566     0111  1303               	bcf	3,6	;RP1=0, select bank1
   567     0112  019E               	clrf	30	;volatile
   568     0113                     l1150:
   569     0113                     l1152:
   570                           
   571                           ;newmain.c: 116:     int channel = 7;
   572     0113  3007               	movlw	7
   573     0114  1283               	bcf	3,5	;RP0=0, select bank0
   574     0115  1303               	bcf	3,6	;RP1=0, select bank0
   575     0116  00D2               	movwf	main@channel
   576     0117  3000               	movlw	0
   577     0118  00D3               	movwf	main@channel+1
   578     0119                     l1154:
   579                           
   580                           ;newmain.c: 120:     {;newmain.c: 121:         ADCON0 |= channel << 3;
   581     0119  1283               	bcf	3,5	;RP0=0, select bank0
   582     011A  1303               	bcf	3,6	;RP1=0, select bank0
   583     011B  0852               	movf	main@channel,w	;volatile
   584     011C  00BB               	movwf	??_main
   585     011D  3002               	movlw	2
   586     011E                     u605:
   587     011E  1003               	clrc
   588     011F  0DBB               	rlf	??_main,f
   589     0120  3EFF               	addlw	-1
   590     0121  1D03               	skipz
   591     0122  291E               	goto	u605
   592     0123  1003               	clrc
   593     0124  0D3B               	rlf	??_main,w
   594     0125  00BC               	movwf	??_main+1
   595     0126  083C               	movf	??_main+1,w
   596     0127  049F               	iorwf	31,f	;volatile
   597     0128                     l1156:
   598                           
   599                           ;newmain.c: 122:         _delay((unsigned long)((20)*(20000000/4000.0)));
   600     0128  3082               	movlw	130
   601     0129  1283               	bcf	3,5	;RP0=0, select bank0
   602     012A  1303               	bcf	3,6	;RP1=0, select bank0
   603     012B  00BC               	movwf	??_main+1
   604     012C  30DD               	movlw	221
   605     012D  00BB               	movwf	??_main
   606     012E                     u657:
   607     012E  0BBB               	decfsz	??_main,f
   608     012F  292E               	goto	u657
   609     0130  0BBC               	decfsz	??_main+1,f
   610     0131  292E               	goto	u657
   611     0132                     l1158:
   612                           
   613                           ;newmain.c: 123:         GO_nDONE = 1;
   614     0132  1283               	bcf	3,5	;RP0=0, select bank0
   615     0133  1303               	bcf	3,6	;RP1=0, select bank0
   616     0134  151F               	bsf	31,2	;volatile
   617     0135                     l88:	
   618                           ;newmain.c: 124:         while(GO_nDONE);
   619                           
   620     0135  191F               	btfsc	31,2	;volatile
   621     0136  2938               	goto	u611
   622     0137  2939               	goto	u610
   623     0138                     u611:
   624     0138  2935               	goto	l88
   625     0139                     u610:
   626     0139                     l1160:
   627                           
   628                           ;newmain.c: 125:         adc = ((ADRESH<< 8)+ADRESL);
   629     0139  081E               	movf	30,w	;volatile
   630     013A  00D5               	movwf	main@adc+1
   631     013B  1683               	bsf	3,5	;RP0=1, select bank1
   632     013C  1303               	bcf	3,6	;RP1=0, select bank1
   633     013D  081E               	movf	30,w	;volatile
   634     013E  1283               	bcf	3,5	;RP0=0, select bank0
   635     013F  1303               	bcf	3,6	;RP1=0, select bank0
   636     0140  00D4               	movwf	main@adc
   637     0141                     l1162:
   638                           
   639                           ;newmain.c: 127:         sprintf(text, "Hello World %d\r\n", adc);
   640     0141  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   641     0142  00AE               	movwf	sprintf@f
   642     0143  0855               	movf	main@adc+1,w
   643     0144  00B0               	movwf	?_sprintf+2
   644     0145  0854               	movf	main@adc,w
   645     0146  00AF               	movwf	?_sprintf+1
   646     0147  303E               	movlw	(low (main@text| 0))& (0+255)
   647     0148  120A  118A  201F  120A  118A  	fcall	_sprintf
   648     014D                     l1164:
   649                           
   650                           ;newmain.c: 128:         UART_Transmit_Text(text);
   651     014D  303E               	movlw	(low (main@text| 0))& (0+255)
   652     014E  120A  118A  221A  120A  118A  	fcall	_UART_Transmit_Text
   653     0153                     l1166:
   654                           
   655                           ;newmain.c: 129:         _delay((unsigned long)((200)*(20000000/4000.0)));
   656     0153  3006               	movlw	6
   657     0154  1283               	bcf	3,5	;RP0=0, select bank0
   658     0155  1303               	bcf	3,6	;RP1=0, select bank0
   659     0156  00BD               	movwf	??_main+2
   660     0157  3013               	movlw	19
   661     0158  00BC               	movwf	??_main+1
   662     0159  30AD               	movlw	173
   663     015A  00BB               	movwf	??_main
   664     015B                     u667:
   665     015B  0BBB               	decfsz	??_main,f
   666     015C  295B               	goto	u667
   667     015D  0BBC               	decfsz	??_main+1,f
   668     015E  295B               	goto	u667
   669     015F  0BBD               	decfsz	??_main+2,f
   670     0160  295B               	goto	u667
   671     0161  2919               	goto	l1154
   672     0162  120A  118A  280E   	ljmp	start
   673     0165                     __end_of_main:
   674                           
   675                           	psect	text1
   676     001F                     __ptext1:	
   677 ;; *************** function _sprintf *****************
   678 ;; Defined at:
   679 ;;		line 505 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  sp              1    wreg     PTR unsigned char 
   682 ;;		 -> main@text(20), 
   683 ;;  f               1   14[BANK0 ] PTR const unsigned char 
   684 ;;		 -> STR_1(17), 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;  sp              1   25[BANK0 ] PTR unsigned char 
   687 ;;		 -> main@text(20), 
   688 ;;  tmpval          4    0        struct .
   689 ;;  val             2   23[BANK0 ] unsigned int 
   690 ;;  cp              2    0        PTR const unsigned char 
   691 ;;  len             2    0        unsigned int 
   692 ;;  c               1   26[BANK0 ] unsigned char 
   693 ;;  prec            1   22[BANK0 ] char 
   694 ;;  flag            1   21[BANK0 ] unsigned char 
   695 ;;  ap              1   20[BANK0 ] PTR void [1]
   696 ;;		 -> ?_sprintf(2), 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  2   14[BANK0 ] int 
   699 ;; Registers used:
   700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   706 ;;      Params:         0       3       0       0       0
   707 ;;      Locals:         0       7       0       0       0
   708 ;;      Temps:          0       3       0       0       0
   709 ;;      Totals:         0      13       0       0       0
   710 ;;Total ram usage:       13 bytes
   711 ;; Hardware stack levels used: 1
   712 ;; Hardware stack levels required when called: 5
   713 ;; This function calls:
   714 ;;		___lwdiv
   715 ;;		___lwmod
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721     001F                     _sprintf:	
   722                           ;psect for function _sprintf
   723                           
   724                           
   725                           ;incstack = 0
   726                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   727                           ;sprintf@sp stored from wreg
   728     001F  1283               	bcf	3,5	;RP0=0, select bank0
   729     0020  1303               	bcf	3,6	;RP1=0, select bank0
   730     0021  00B9               	movwf	sprintf@sp
   731     0022                     l1068:
   732                           
   733                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 505: sprintf(char * sp, 
      +                          const char * f, ...);D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 506:
      +                           {;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 507:  va_list ap;;D:\F
      +                          ile Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 512:  char c;;D:\File Install
      +                           MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 521:  signed char prec;;D:\File Install 
      +                          MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
   734     0022  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   735     0023  00B4               	movwf	sprintf@ap
   736                           
   737                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) 
      +                          {
   738     0024  28E6               	goto	l1120
   739     0025                     l1070:
   740                           
   741                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 555:   if(c != '%')
   742     0025  3025               	movlw	37
   743     0026  063A               	xorwf	sprintf@c,w
   744     0027  1903               	btfsc	3,2
   745     0028  282A               	goto	u511
   746     0029  282B               	goto	u510
   747     002A                     u511:
   748     002A  2835               	goto	l1076
   749     002B                     u510:
   750     002B                     l1072:
   751                           
   752                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 557:   {;D:\File Install
      +                           MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   753     002B  0839               	movf	sprintf@sp,w
   754     002C  0084               	movwf	4
   755     002D  083A               	movf	sprintf@c,w
   756     002E  1383               	bcf	3,7	;select IRP bank0
   757     002F  0080               	movwf	0
   758     0030                     l1074:
   759     0030  3001               	movlw	1
   760     0031  00B1               	movwf	??_sprintf
   761     0032  0831               	movf	??_sprintf,w
   762     0033  07B9               	addwf	sprintf@sp,f
   763                           
   764                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 559:    continue;
   765     0034  28E6               	goto	l1120
   766     0035                     l1076:
   767                           
   768                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   769     0035  01B5               	clrf	sprintf@flag
   770     0036                     l1080:	
   771                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 661:   switch(c = *f++) 
      +                          {
   772                           
   773     0036  3001               	movlw	1
   774     0037  07AE               	addwf	sprintf@f,f
   775     0038  30FF               	movlw	-1
   776     0039  072E               	addwf	sprintf@f,w
   777     003A  0084               	movwf	4
   778     003B  120A  118A  223C  120A  118A  	fcall	stringdir
   779     0040  00BA               	movwf	sprintf@c
   780     0041  00B1               	movwf	??_sprintf
   781     0042  01B2               	clrf	??_sprintf+1
   782                           
   783                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   784                           ; Switch size 1, requested type "simple"
   785                           ; Number of cases is 1, Range of values is 0 to 0
   786                           ; switch strategies available:
   787                           ; Name         Instructions Cycles
   788                           ; simple_byte            4     3 (average)
   789                           ; direct_byte           11     8 (fixed)
   790                           ; jumptable            260     6 (fixed)
   791                           ;	Chosen strategy is simple_byte
   792     0043  0832               	movf	??_sprintf+1,w
   793     0044  3A00               	xorlw	0	; case 0
   794     0045  1903               	skipnz
   795     0046  2848               	goto	l1202
   796     0047  28E6               	goto	l1120
   797     0048                     l1202:
   798                           
   799                           ; Switch size 1, requested type "simple"
   800                           ; Number of cases is 3, Range of values is 0 to 105
   801                           ; switch strategies available:
   802                           ; Name         Instructions Cycles
   803                           ; simple_byte           10     6 (average)
   804                           ; jumptable            260     6 (fixed)
   805                           ;	Chosen strategy is simple_byte
   806     0048  0831               	movf	??_sprintf,w
   807     0049  3A00               	xorlw	0	; case 0
   808     004A  1903               	skipnz
   809     004B  28F6               	goto	l1122
   810     004C  3A64               	xorlw	100	; case 100
   811     004D  1903               	skipnz
   812     004E  2853               	goto	l1082
   813     004F  3A0D               	xorlw	13	; case 105
   814     0050  1903               	skipnz
   815     0051  2853               	goto	l1082
   816     0052  28E6               	goto	l1120
   817     0053                     l1082:
   818                           
   819                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1279:   {;D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned int)(*(int *)
      +                          __va_arg((*(int **)ap), (int)0));
   820     0053  0834               	movf	sprintf@ap,w
   821     0054  0084               	movwf	4
   822     0055  1383               	bcf	3,7	;select IRP bank0
   823     0056  0800               	movf	0,w
   824     0057  00B7               	movwf	sprintf@val
   825     0058  0A84               	incf	4,f
   826     0059  0800               	movf	0,w
   827     005A  00B8               	movwf	sprintf@val+1
   828     005B                     l1084:
   829     005B  3002               	movlw	2
   830     005C  00B1               	movwf	??_sprintf
   831     005D  0831               	movf	??_sprintf,w
   832     005E  07B4               	addwf	sprintf@ap,f
   833     005F                     l1086:
   834                           
   835                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1287:    if((int)val < 0
      +                          ) {
   836     005F  1FB8               	btfss	sprintf@val+1,7
   837     0060  2862               	goto	u521
   838     0061  2863               	goto	u520
   839     0062                     u521:
   840     0062  286C               	goto	l1092
   841     0063                     u520:
   842     0063                     l1088:
   843                           
   844                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1288:     flag |= 0x03;
   845     0063  3003               	movlw	3
   846     0064  00B1               	movwf	??_sprintf
   847     0065  0831               	movf	??_sprintf,w
   848     0066  04B5               	iorwf	sprintf@flag,f
   849     0067                     l1090:
   850                           
   851                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1289:     val = -val;
   852     0067  09B7               	comf	sprintf@val,f
   853     0068  09B8               	comf	sprintf@val+1,f
   854     0069  0AB7               	incf	sprintf@val,f
   855     006A  1903               	skipnz
   856     006B  0AB8               	incf	sprintf@val+1,f
   857     006C                     l1092:
   858                           
   859                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1292:   };D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c != sizeof dpower
      +                          s/sizeof dpowers[0] ; c++)
   860     006C  01BA               	clrf	sprintf@c
   861     006D  0ABA               	incf	sprintf@c,f
   862     006E                     l1098:
   863                           
   864                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1332:     if(val < dpowe
      +                          rs[c])
   865     006E  083A               	movf	sprintf@c,w
   866     006F  00B1               	movwf	??_sprintf
   867     0070  0731               	addwf	??_sprintf,w
   868     0071  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   869     0072  0084               	movwf	4
   870     0073  120A  118A  223C  120A  118A  	fcall	stringdir
   871     0078  00B2               	movwf	??_sprintf+1
   872     0079  120A  118A  223C  120A  118A  	fcall	stringdir
   873     007E  00B3               	movwf	??_sprintf+2
   874     007F  0833               	movf	??_sprintf+2,w
   875     0080  0238               	subwf	sprintf@val+1,w
   876     0081  1D03               	skipz
   877     0082  2885               	goto	u535
   878     0083  0832               	movf	??_sprintf+1,w
   879     0084  0237               	subwf	sprintf@val,w
   880     0085                     u535:
   881     0085  1803               	skipnc
   882     0086  2888               	goto	u531
   883     0087  2889               	goto	u530
   884     0088                     u531:
   885     0088  288A               	goto	l1102
   886     0089                     u530:
   887     0089  2894               	goto	l1104
   888     008A                     l1102:
   889     008A  3001               	movlw	1
   890     008B  00B1               	movwf	??_sprintf
   891     008C  0831               	movf	??_sprintf,w
   892     008D  07BA               	addwf	sprintf@c,f
   893     008E  3005               	movlw	5
   894     008F  063A               	xorwf	sprintf@c,w
   895     0090  1D03               	btfss	3,2
   896     0091  2893               	goto	u541
   897     0092  2894               	goto	u540
   898     0093                     u541:
   899     0093  286E               	goto	l1098
   900     0094                     u540:
   901     0094                     l1104:
   902                           
   903                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1448:   {;D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   904     0094  0835               	movf	sprintf@flag,w
   905     0095  3903               	andlw	3
   906     0096  1903               	btfsc	3,2
   907     0097  2899               	goto	u551
   908     0098  289A               	goto	u550
   909     0099                     u551:
   910     0099  28A3               	goto	l1110
   911     009A                     u550:
   912     009A                     l1106:
   913                           
   914                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++ = ('-'
      +                          )));
   915     009A  0839               	movf	sprintf@sp,w
   916     009B  0084               	movwf	4
   917     009C  302D               	movlw	45
   918     009D  1383               	bcf	3,7	;select IRP bank0
   919     009E  0080               	movwf	0
   920     009F                     l1108:
   921     009F  3001               	movlw	1
   922     00A0  00B1               	movwf	??_sprintf
   923     00A1  0831               	movf	??_sprintf,w
   924     00A2  07B9               	addwf	sprintf@sp,f
   925     00A3                     l1110:
   926                           
   927                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1495:   };D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   928     00A3  083A               	movf	sprintf@c,w
   929     00A4  00B6               	movwf	sprintf@prec
   930                           
   931                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
   932     00A5  28DD               	goto	l1118
   933     00A6                     l1112:
   934                           
   935                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1504:    {;D:\File Insta
      +                          ll MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpowers[(unsigned
      +                           char)prec]) % 10 + '0';
   936     00A6  300A               	movlw	10
   937     00A7  00A8               	movwf	___lwmod@divisor
   938     00A8  3000               	movlw	0
   939     00A9  00A9               	movwf	___lwmod@divisor+1
   940     00AA  0836               	movf	sprintf@prec,w
   941     00AB  00B1               	movwf	??_sprintf
   942     00AC  0731               	addwf	??_sprintf,w
   943     00AD  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   944     00AE  0084               	movwf	4
   945     00AF  120A  118A  223C  120A  118A  	fcall	stringdir
   946     00B4  00A0               	movwf	___lwdiv@divisor
   947     00B5  120A  118A  223C  120A  118A  	fcall	stringdir
   948     00BA  00A1               	movwf	___lwdiv@divisor+1
   949     00BB  0838               	movf	sprintf@val+1,w
   950     00BC  00A3               	movwf	___lwdiv@dividend+1
   951     00BD  0837               	movf	sprintf@val,w
   952     00BE  00A2               	movwf	___lwdiv@dividend
   953     00BF  120A  118A  2165  120A  118A  	fcall	___lwdiv
   954     00C4  1283               	bcf	3,5	;RP0=0, select bank0
   955     00C5  1303               	bcf	3,6	;RP1=0, select bank0
   956     00C6  0821               	movf	?___lwdiv+1,w
   957     00C7  00AB               	movwf	___lwmod@dividend+1
   958     00C8  0820               	movf	?___lwdiv,w
   959     00C9  00AA               	movwf	___lwmod@dividend
   960     00CA  120A  118A  21AB  120A  118A  	fcall	___lwmod
   961     00CF  1283               	bcf	3,5	;RP0=0, select bank0
   962     00D0  1303               	bcf	3,6	;RP1=0, select bank0
   963     00D1  0828               	movf	?___lwmod,w
   964     00D2  3E30               	addlw	48
   965     00D3  00BA               	movwf	sprintf@c
   966     00D4                     l1114:
   967                           
   968                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1549:    };D:\File Insta
      +                          ll MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)));
   969     00D4  0839               	movf	sprintf@sp,w
   970     00D5  0084               	movwf	4
   971     00D6  083A               	movf	sprintf@c,w
   972     00D7  1383               	bcf	3,7	;select IRP bank0
   973     00D8  0080               	movwf	0
   974     00D9                     l1116:
   975     00D9  3001               	movlw	1
   976     00DA  00B1               	movwf	??_sprintf
   977     00DB  0831               	movf	??_sprintf,w
   978     00DC  07B9               	addwf	sprintf@sp,f
   979     00DD                     l1118:
   980                           
   981                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
   982     00DD  30FF               	movlw	255
   983     00DE  00B1               	movwf	??_sprintf
   984     00DF  0831               	movf	??_sprintf,w
   985     00E0  07B6               	addwf	sprintf@prec,f
   986     00E1  0A36               	incf	sprintf@prec,w
   987     00E2  1D03               	btfss	3,2
   988     00E3  28E5               	goto	u561
   989     00E4  28E6               	goto	u560
   990     00E5                     u561:
   991     00E5  28A6               	goto	l1112
   992     00E6                     u560:
   993     00E6                     l1120:
   994                           
   995                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) 
      +                          {
   996     00E6  3001               	movlw	1
   997     00E7  07AE               	addwf	sprintf@f,f
   998     00E8  30FF               	movlw	-1
   999     00E9  072E               	addwf	sprintf@f,w
  1000     00EA  0084               	movwf	4
  1001     00EB  120A  118A  223C  120A  118A  	fcall	stringdir
  1002     00F0  00BA               	movwf	sprintf@c
  1003     00F1  083A               	movf	sprintf@c,w
  1004     00F2  1D03               	btfss	3,2
  1005     00F3  28F5               	goto	u571
  1006     00F4  28F6               	goto	u570
  1007     00F5                     u571:
  1008     00F5  2825               	goto	l1070
  1009     00F6                     u570:
  1010     00F6                     l1122:
  1011                           
  1012                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1013     00F6  0839               	movf	sprintf@sp,w
  1014     00F7  0084               	movwf	4
  1015     00F8  1383               	bcf	3,7	;select IRP bank0
  1016     00F9  0180               	clrf	0
  1017     00FA                     l212:
  1018     00FA  0008               	return
  1019     00FB                     __end_of_sprintf:
  1020                           
  1021                           	psect	text2
  1022     01AB                     __ptext2:	
  1023 ;; *************** function ___lwmod *****************
  1024 ;; Defined at:
  1025 ;;		line 5 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\lwmod.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;  divisor         2    8[BANK0 ] unsigned int 
  1028 ;;  dividend        2   10[BANK0 ] unsigned int 
  1029 ;; Auto vars:     Size  Location     Type
  1030 ;;  counter         1   13[BANK0 ] unsigned char 
  1031 ;; Return value:  Size  Location     Type
  1032 ;;                  2    8[BANK0 ] unsigned int 
  1033 ;; Registers used:
  1034 ;;		wreg, status,2, status,0
  1035 ;; Tracked objects:
  1036 ;;		On entry : 0/0
  1037 ;;		On exit  : 0/0
  1038 ;;		Unchanged: 0/0
  1039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1040 ;;      Params:         0       4       0       0       0
  1041 ;;      Locals:         0       1       0       0       0
  1042 ;;      Temps:          0       1       0       0       0
  1043 ;;      Totals:         0       6       0       0       0
  1044 ;;Total ram usage:        6 bytes
  1045 ;; Hardware stack levels used: 1
  1046 ;; Hardware stack levels required when called: 4
  1047 ;; This function calls:
  1048 ;;		Nothing
  1049 ;; This function is called by:
  1050 ;;		_sprintf
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054     01AB                     ___lwmod:	
  1055                           ;psect for function ___lwmod
  1056                           
  1057     01AB                     l996:	
  1058                           ;incstack = 0
  1059                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1060                           
  1061     01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1062     01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1063     01AD  0828               	movf	___lwmod@divisor,w
  1064     01AE  0429               	iorwf	___lwmod@divisor+1,w
  1065     01AF  1903               	btfsc	3,2
  1066     01B0  29B2               	goto	u421
  1067     01B1  29B3               	goto	u420
  1068     01B2                     u421:
  1069     01B2  29E2               	goto	l1014
  1070     01B3                     u420:
  1071     01B3                     l998:
  1072     01B3  01AD               	clrf	___lwmod@counter
  1073     01B4  0AAD               	incf	___lwmod@counter,f
  1074     01B5  29C1               	goto	l1004
  1075     01B6                     l1000:
  1076     01B6  3001               	movlw	1
  1077     01B7                     u435:
  1078     01B7  1003               	clrc
  1079     01B8  0DA8               	rlf	___lwmod@divisor,f
  1080     01B9  0DA9               	rlf	___lwmod@divisor+1,f
  1081     01BA  3EFF               	addlw	-1
  1082     01BB  1D03               	skipz
  1083     01BC  29B7               	goto	u435
  1084     01BD                     l1002:
  1085     01BD  3001               	movlw	1
  1086     01BE  00AC               	movwf	??___lwmod
  1087     01BF  082C               	movf	??___lwmod,w
  1088     01C0  07AD               	addwf	___lwmod@counter,f
  1089     01C1                     l1004:
  1090     01C1  1FA9               	btfss	___lwmod@divisor+1,7
  1091     01C2  29C4               	goto	u441
  1092     01C3  29C5               	goto	u440
  1093     01C4                     u441:
  1094     01C4  29B6               	goto	l1000
  1095     01C5                     u440:
  1096     01C5                     l1006:
  1097     01C5  0829               	movf	___lwmod@divisor+1,w
  1098     01C6  022B               	subwf	___lwmod@dividend+1,w
  1099     01C7  1D03               	skipz
  1100     01C8  29CB               	goto	u455
  1101     01C9  0828               	movf	___lwmod@divisor,w
  1102     01CA  022A               	subwf	___lwmod@dividend,w
  1103     01CB                     u455:
  1104     01CB  1C03               	skipc
  1105     01CC  29CE               	goto	u451
  1106     01CD  29CF               	goto	u450
  1107     01CE                     u451:
  1108     01CE  29D5               	goto	l1010
  1109     01CF                     u450:
  1110     01CF                     l1008:
  1111     01CF  0828               	movf	___lwmod@divisor,w
  1112     01D0  02AA               	subwf	___lwmod@dividend,f
  1113     01D1  0829               	movf	___lwmod@divisor+1,w
  1114     01D2  1C03               	skipc
  1115     01D3  03AB               	decf	___lwmod@dividend+1,f
  1116     01D4  02AB               	subwf	___lwmod@dividend+1,f
  1117     01D5                     l1010:
  1118     01D5  3001               	movlw	1
  1119     01D6                     u465:
  1120     01D6  1003               	clrc
  1121     01D7  0CA9               	rrf	___lwmod@divisor+1,f
  1122     01D8  0CA8               	rrf	___lwmod@divisor,f
  1123     01D9  3EFF               	addlw	-1
  1124     01DA  1D03               	skipz
  1125     01DB  29D6               	goto	u465
  1126     01DC                     l1012:
  1127     01DC  3001               	movlw	1
  1128     01DD  02AD               	subwf	___lwmod@counter,f
  1129     01DE  1D03               	btfss	3,2
  1130     01DF  29E1               	goto	u471
  1131     01E0  29E2               	goto	u470
  1132     01E1                     u471:
  1133     01E1  29C5               	goto	l1006
  1134     01E2                     u470:
  1135     01E2                     l1014:
  1136     01E2  082B               	movf	___lwmod@dividend+1,w
  1137     01E3  00A9               	movwf	?___lwmod+1
  1138     01E4  082A               	movf	___lwmod@dividend,w
  1139     01E5  00A8               	movwf	?___lwmod
  1140     01E6                     l498:
  1141     01E6  0008               	return
  1142     01E7                     __end_of___lwmod:
  1143                           
  1144                           	psect	text3
  1145     0165                     __ptext3:	
  1146 ;; *************** function ___lwdiv *****************
  1147 ;; Defined at:
  1148 ;;		line 5 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\lwdiv.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;  divisor         2    0[BANK0 ] unsigned int 
  1151 ;;  dividend        2    2[BANK0 ] unsigned int 
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;  quotient        2    5[BANK0 ] unsigned int 
  1154 ;;  counter         1    7[BANK0 ] unsigned char 
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  2    0[BANK0 ] unsigned int 
  1157 ;; Registers used:
  1158 ;;		wreg, status,2, status,0
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1164 ;;      Params:         0       4       0       0       0
  1165 ;;      Locals:         0       3       0       0       0
  1166 ;;      Temps:          0       1       0       0       0
  1167 ;;      Totals:         0       8       0       0       0
  1168 ;;Total ram usage:        8 bytes
  1169 ;; Hardware stack levels used: 1
  1170 ;; Hardware stack levels required when called: 4
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_sprintf
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178     0165                     ___lwdiv:	
  1179                           ;psect for function ___lwdiv
  1180                           
  1181     0165                     l970:	
  1182                           ;incstack = 0
  1183                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1184                           
  1185     0165  1283               	bcf	3,5	;RP0=0, select bank0
  1186     0166  1303               	bcf	3,6	;RP1=0, select bank0
  1187     0167  01A5               	clrf	___lwdiv@quotient
  1188     0168  01A6               	clrf	___lwdiv@quotient+1
  1189     0169                     l972:
  1190     0169  0820               	movf	___lwdiv@divisor,w
  1191     016A  0421               	iorwf	___lwdiv@divisor+1,w
  1192     016B  1903               	btfsc	3,2
  1193     016C  296E               	goto	u351
  1194     016D  296F               	goto	u350
  1195     016E                     u351:
  1196     016E  29A6               	goto	l992
  1197     016F                     u350:
  1198     016F                     l974:
  1199     016F  01A7               	clrf	___lwdiv@counter
  1200     0170  0AA7               	incf	___lwdiv@counter,f
  1201     0171  297D               	goto	l980
  1202     0172                     l976:
  1203     0172  3001               	movlw	1
  1204     0173                     u365:
  1205     0173  1003               	clrc
  1206     0174  0DA0               	rlf	___lwdiv@divisor,f
  1207     0175  0DA1               	rlf	___lwdiv@divisor+1,f
  1208     0176  3EFF               	addlw	-1
  1209     0177  1D03               	skipz
  1210     0178  2973               	goto	u365
  1211     0179                     l978:
  1212     0179  3001               	movlw	1
  1213     017A  00A4               	movwf	??___lwdiv
  1214     017B  0824               	movf	??___lwdiv,w
  1215     017C  07A7               	addwf	___lwdiv@counter,f
  1216     017D                     l980:
  1217     017D  1FA1               	btfss	___lwdiv@divisor+1,7
  1218     017E  2980               	goto	u371
  1219     017F  2981               	goto	u370
  1220     0180                     u371:
  1221     0180  2972               	goto	l976
  1222     0181                     u370:
  1223     0181                     l982:
  1224     0181  3001               	movlw	1
  1225     0182                     u385:
  1226     0182  1003               	clrc
  1227     0183  0DA5               	rlf	___lwdiv@quotient,f
  1228     0184  0DA6               	rlf	___lwdiv@quotient+1,f
  1229     0185  3EFF               	addlw	-1
  1230     0186  1D03               	skipz
  1231     0187  2982               	goto	u385
  1232     0188  0821               	movf	___lwdiv@divisor+1,w
  1233     0189  0223               	subwf	___lwdiv@dividend+1,w
  1234     018A  1D03               	skipz
  1235     018B  298E               	goto	u395
  1236     018C  0820               	movf	___lwdiv@divisor,w
  1237     018D  0222               	subwf	___lwdiv@dividend,w
  1238     018E                     u395:
  1239     018E  1C03               	skipc
  1240     018F  2991               	goto	u391
  1241     0190  2992               	goto	u390
  1242     0191                     u391:
  1243     0191  2999               	goto	l988
  1244     0192                     u390:
  1245     0192                     l984:
  1246     0192  0820               	movf	___lwdiv@divisor,w
  1247     0193  02A2               	subwf	___lwdiv@dividend,f
  1248     0194  0821               	movf	___lwdiv@divisor+1,w
  1249     0195  1C03               	skipc
  1250     0196  03A3               	decf	___lwdiv@dividend+1,f
  1251     0197  02A3               	subwf	___lwdiv@dividend+1,f
  1252     0198                     l986:
  1253     0198  1425               	bsf	___lwdiv@quotient,0
  1254     0199                     l988:
  1255     0199  3001               	movlw	1
  1256     019A                     u405:
  1257     019A  1003               	clrc
  1258     019B  0CA1               	rrf	___lwdiv@divisor+1,f
  1259     019C  0CA0               	rrf	___lwdiv@divisor,f
  1260     019D  3EFF               	addlw	-1
  1261     019E  1D03               	skipz
  1262     019F  299A               	goto	u405
  1263     01A0                     l990:
  1264     01A0  3001               	movlw	1
  1265     01A1  02A7               	subwf	___lwdiv@counter,f
  1266     01A2  1D03               	btfss	3,2
  1267     01A3  29A5               	goto	u411
  1268     01A4  29A6               	goto	u410
  1269     01A5                     u411:
  1270     01A5  2981               	goto	l982
  1271     01A6                     u410:
  1272     01A6                     l992:
  1273     01A6  0826               	movf	___lwdiv@quotient+1,w
  1274     01A7  00A1               	movwf	?___lwdiv+1
  1275     01A8  0825               	movf	___lwdiv@quotient,w
  1276     01A9  00A0               	movwf	?___lwdiv
  1277     01AA                     l488:
  1278     01AA  0008               	return
  1279     01AB                     __end_of___lwdiv:
  1280                           
  1281                           	psect	text4
  1282     021A                     __ptext4:	
  1283 ;; *************** function _UART_Transmit_Text *****************
  1284 ;; Defined at:
  1285 ;;		line 66 in file "newmain.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;  str             1    wreg     PTR unsigned char 
  1288 ;;		 -> main@text(20), RX_Buffer(50), 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;  str             1    3[BANK0 ] PTR unsigned char 
  1291 ;;		 -> main@text(20), RX_Buffer(50), 
  1292 ;;  i               1    2[BANK0 ] unsigned char 
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1302 ;;      Params:         0       0       0       0       0
  1303 ;;      Locals:         0       2       0       0       0
  1304 ;;      Temps:          0       1       0       0       0
  1305 ;;      Totals:         0       3       0       0       0
  1306 ;;Total ram usage:        3 bytes
  1307 ;; Hardware stack levels used: 1
  1308 ;; Hardware stack levels required when called: 5
  1309 ;; This function calls:
  1310 ;;		_UART_Transmit
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316     021A                     _UART_Transmit_Text:	
  1317                           ;psect for function _UART_Transmit_Text
  1318                           
  1319                           
  1320                           ;incstack = 0
  1321                           ; Regs used in _UART_Transmit_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1322                           ;UART_Transmit_Text@str stored from wreg
  1323     021A  1283               	bcf	3,5	;RP0=0, select bank0
  1324     021B  1303               	bcf	3,6	;RP1=0, select bank0
  1325     021C  00A3               	movwf	UART_Transmit_Text@str
  1326     021D                     l1044:
  1327                           
  1328                           ;newmain.c: 66: void UART_Transmit_Text(char *str);newmain.c: 67: {;newmain.c: 68:     u
      +                          nsigned char i=0;
  1329     021D  01A2               	clrf	UART_Transmit_Text@i
  1330                           
  1331                           ;newmain.c: 69:     while(str[i] != 0)
  1332     021E  2A30               	goto	l1050
  1333     021F                     l1046:
  1334                           
  1335                           ;newmain.c: 70:     {;newmain.c: 71:         UART_Transmit(str[i]);
  1336     021F  0822               	movf	UART_Transmit_Text@i,w
  1337     0220  0723               	addwf	UART_Transmit_Text@str,w
  1338     0221  00A1               	movwf	??_UART_Transmit_Text
  1339     0222  0821               	movf	??_UART_Transmit_Text,w
  1340     0223  0084               	movwf	4
  1341     0224  0800               	movf	0,w
  1342     0225  120A  118A  22A0  120A  118A  	fcall	_UART_Transmit
  1343     022A                     l1048:
  1344                           
  1345                           ;newmain.c: 72:         i++;
  1346     022A  3001               	movlw	1
  1347     022B  1283               	bcf	3,5	;RP0=0, select bank0
  1348     022C  1303               	bcf	3,6	;RP1=0, select bank0
  1349     022D  00A1               	movwf	??_UART_Transmit_Text
  1350     022E  0821               	movf	??_UART_Transmit_Text,w
  1351     022F  07A2               	addwf	UART_Transmit_Text@i,f
  1352     0230                     l1050:
  1353                           
  1354                           ;newmain.c: 69:     while(str[i] != 0)
  1355     0230  0822               	movf	UART_Transmit_Text@i,w
  1356     0231  0723               	addwf	UART_Transmit_Text@str,w
  1357     0232  00A1               	movwf	??_UART_Transmit_Text
  1358     0233  0821               	movf	??_UART_Transmit_Text,w
  1359     0234  0084               	movwf	4
  1360     0235  1383               	bcf	3,7	;select IRP bank0
  1361     0236  0800               	movf	0,w
  1362     0237  1D03               	btfss	3,2
  1363     0238  2A3A               	goto	u491
  1364     0239  2A3B               	goto	u490
  1365     023A                     u491:
  1366     023A  2A1F               	goto	l1046
  1367     023B                     u490:
  1368     023B                     l68:
  1369     023B  0008               	return
  1370     023C                     __end_of_UART_Transmit_Text:
  1371                           
  1372                           	psect	text5
  1373     02A0                     __ptext5:	
  1374 ;; *************** function _UART_Transmit *****************
  1375 ;; Defined at:
  1376 ;;		line 61 in file "newmain.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  c               1    wreg     unsigned char 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  c               1    0[BANK0 ] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1390 ;;      Params:         0       0       0       0       0
  1391 ;;      Locals:         0       1       0       0       0
  1392 ;;      Temps:          0       0       0       0       0
  1393 ;;      Totals:         0       1       0       0       0
  1394 ;;Total ram usage:        1 bytes
  1395 ;; Hardware stack levels used: 1
  1396 ;; Hardware stack levels required when called: 4
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_UART_Transmit_Text
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404     02A0                     _UART_Transmit:	
  1405                           ;psect for function _UART_Transmit
  1406                           
  1407                           
  1408                           ;incstack = 0
  1409                           ; Regs used in _UART_Transmit: [wreg]
  1410                           ;UART_Transmit@c stored from wreg
  1411     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  1412     02A1  1303               	bcf	3,6	;RP1=0, select bank0
  1413     02A2  00A0               	movwf	UART_Transmit@c
  1414     02A3                     l966:
  1415     02A3                     l59:	
  1416                           ;newmain.c: 61: void UART_Transmit(char c);newmain.c: 62: {;newmain.c: 63:     while(!TR
      +                          MT);
  1417                           
  1418     02A3  1683               	bsf	3,5	;RP0=1, select bank1
  1419     02A4  1303               	bcf	3,6	;RP1=0, select bank1
  1420     02A5  1C98               	btfss	24,1	;volatile
  1421     02A6  2AA8               	goto	u341
  1422     02A7  2AA9               	goto	u340
  1423     02A8                     u341:
  1424     02A8  2AA3               	goto	l59
  1425     02A9                     u340:
  1426     02A9                     l968:
  1427                           
  1428                           ;newmain.c: 64:     TXREG = c;
  1429     02A9  1283               	bcf	3,5	;RP0=0, select bank0
  1430     02AA  1303               	bcf	3,6	;RP1=0, select bank0
  1431     02AB  0820               	movf	UART_Transmit@c,w
  1432     02AC  0099               	movwf	25	;volatile
  1433     02AD                     l62:
  1434     02AD  0008               	return
  1435     02AE                     __end_of_UART_Transmit:
  1436                           
  1437                           	psect	text6
  1438     027B                     __ptext6:	
  1439 ;; *************** function _UART_Init *****************
  1440 ;; Defined at:
  1441 ;;		line 50 in file "newmain.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      void 
  1448 ;; Registers used:
  1449 ;;		wreg
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1455 ;;      Params:         0       0       0       0       0
  1456 ;;      Locals:         0       0       0       0       0
  1457 ;;      Temps:          0       0       0       0       0
  1458 ;;      Totals:         0       0       0       0       0
  1459 ;;Total ram usage:        0 bytes
  1460 ;; Hardware stack levels used: 1
  1461 ;; Hardware stack levels required when called: 4
  1462 ;; This function calls:
  1463 ;;		Nothing
  1464 ;; This function is called by:
  1465 ;;		_main
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469     027B                     _UART_Init:	
  1470                           ;psect for function _UART_Init
  1471                           
  1472     027B                     l1030:	
  1473                           ;incstack = 0
  1474                           ; Regs used in _UART_Init: [wreg]
  1475                           
  1476                           
  1477                           ;newmain.c: 53:     SPBRG = 32;
  1478     027B  3020               	movlw	32
  1479     027C  1683               	bsf	3,5	;RP0=1, select bank1
  1480     027D  1303               	bcf	3,6	;RP1=0, select bank1
  1481     027E  0099               	movwf	25	;volatile
  1482     027F                     l1032:
  1483                           
  1484                           ;newmain.c: 54:     SPEN = 1;
  1485     027F  1283               	bcf	3,5	;RP0=0, select bank0
  1486     0280  1303               	bcf	3,6	;RP1=0, select bank0
  1487     0281  1798               	bsf	24,7	;volatile
  1488     0282                     l1034:
  1489                           
  1490                           ;newmain.c: 55:     TXEN = 1;
  1491     0282  1683               	bsf	3,5	;RP0=1, select bank1
  1492     0283  1303               	bcf	3,6	;RP1=0, select bank1
  1493     0284  1698               	bsf	24,5	;volatile
  1494     0285                     l1036:
  1495                           
  1496                           ;newmain.c: 56:     CREN = 1;
  1497     0285  1283               	bcf	3,5	;RP0=0, select bank0
  1498     0286  1303               	bcf	3,6	;RP1=0, select bank0
  1499     0287  1618               	bsf	24,4	;volatile
  1500     0288                     l1038:
  1501                           
  1502                           ;newmain.c: 57:     RCIE = 1;
  1503     0288  1683               	bsf	3,5	;RP0=1, select bank1
  1504     0289  1303               	bcf	3,6	;RP1=0, select bank1
  1505     028A  168C               	bsf	12,5	;volatile
  1506     028B                     l1040:
  1507                           
  1508                           ;newmain.c: 58:     INTCONbits.GIE = 1;
  1509     028B  178B               	bsf	11,7	;volatile
  1510     028C                     l1042:
  1511                           
  1512                           ;newmain.c: 59:     INTCONbits.PEIE = 1;
  1513     028C  170B               	bsf	11,6	;volatile
  1514     028D                     l56:
  1515     028D  0008               	return
  1516     028E                     __end_of_UART_Init:
  1517                           
  1518                           	psect	text7
  1519     02BA                     __ptext7:	
  1520 ;; *************** function _IO_Init *****************
  1521 ;; Defined at:
  1522 ;;		line 43 in file "newmain.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;		None
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;		None
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		status,2
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1536 ;;      Params:         0       0       0       0       0
  1537 ;;      Locals:         0       0       0       0       0
  1538 ;;      Temps:          0       0       0       0       0
  1539 ;;      Totals:         0       0       0       0       0
  1540 ;;Total ram usage:        0 bytes
  1541 ;; Hardware stack levels used: 1
  1542 ;; Hardware stack levels required when called: 4
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_main
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550     02BA                     _IO_Init:	
  1551                           ;psect for function _IO_Init
  1552                           
  1553     02BA                     l1026:	
  1554                           ;incstack = 0
  1555                           ; Regs used in _IO_Init: [status,2]
  1556                           
  1557                           
  1558                           ;newmain.c: 45:     TRISCbits.TRISC6 = 0;
  1559     02BA  1683               	bsf	3,5	;RP0=1, select bank1
  1560     02BB  1303               	bcf	3,6	;RP1=0, select bank1
  1561     02BC  1307               	bcf	7,6	;volatile
  1562                           
  1563                           ;newmain.c: 46:     TRISCbits.TRISC7 = 1;
  1564     02BD  1787               	bsf	7,7	;volatile
  1565     02BE                     l1028:
  1566                           
  1567                           ;newmain.c: 47:     TRISB = 0;
  1568     02BE  0186               	clrf	6	;volatile
  1569                           
  1570                           ;newmain.c: 48:     PORTB = 0x00;
  1571     02BF  1283               	bcf	3,5	;RP0=0, select bank0
  1572     02C0  1303               	bcf	3,6	;RP1=0, select bank0
  1573     02C1  0186               	clrf	6	;volatile
  1574     02C2                     l53:
  1575     02C2  0008               	return
  1576     02C3                     __end_of_IO_Init:
  1577                           
  1578                           	psect	text8
  1579     01E7                     __ptext8:	
  1580 ;; *************** function _isr1 *****************
  1581 ;; Defined at:
  1582 ;;		line 132 in file "newmain.c"
  1583 ;; Parameters:    Size  Location     Type
  1584 ;;		None
  1585 ;; Auto vars:     Size  Location     Type
  1586 ;;  ReceivedData    1    9[COMMON] unsigned char 
  1587 ;; Return value:  Size  Location     Type
  1588 ;;                  1    wreg      void 
  1589 ;; Registers used:
  1590 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1591 ;; Tracked objects:
  1592 ;;		On entry : 0/0
  1593 ;;		On exit  : 0/0
  1594 ;;		Unchanged: 0/0
  1595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1596 ;;      Params:         0       0       0       0       0
  1597 ;;      Locals:         1       0       0       0       0
  1598 ;;      Temps:          4       0       0       0       0
  1599 ;;      Totals:         5       0       0       0       0
  1600 ;;Total ram usage:        5 bytes
  1601 ;; Hardware stack levels used: 1
  1602 ;; Hardware stack levels required when called: 3
  1603 ;; This function calls:
  1604 ;;		_ClearRX_Buffer
  1605 ;;		_HandleData
  1606 ;; This function is called by:
  1607 ;;		Interrupt level 1
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611     01E7                     _isr1:	
  1612                           ;psect for function _isr1
  1613                           
  1614     01E7                     i1l1168:
  1615                           
  1616                           ;newmain.c: 134:     if(RCIE)
  1617     01E7  1683               	bsf	3,5	;RP0=1, select bank1
  1618     01E8  1303               	bcf	3,6	;RP1=0, select bank1
  1619     01E9  1E8C               	btfss	12,5	;volatile
  1620     01EA  29EC               	goto	u62_21
  1621     01EB  29ED               	goto	u62_20
  1622     01EC                     u62_21:
  1623     01EC  2A11               	goto	i1l102
  1624     01ED                     u62_20:
  1625     01ED                     i1l1170:
  1626                           
  1627                           ;newmain.c: 135:     {;newmain.c: 136:         if(RCIF)
  1628     01ED  1283               	bcf	3,5	;RP0=0, select bank0
  1629     01EE  1303               	bcf	3,6	;RP1=0, select bank0
  1630     01EF  1E8C               	btfss	12,5	;volatile
  1631     01F0  29F2               	goto	u63_21
  1632     01F1  29F3               	goto	u63_20
  1633     01F2                     u63_21:
  1634     01F2  2A11               	goto	i1l102
  1635     01F3                     u63_20:
  1636     01F3                     i1l1172:
  1637                           
  1638                           ;newmain.c: 137:         {;newmain.c: 138:             char ReceivedData;;newmain.c: 139
      +                          :             ReceivedData = RCREG;
  1639     01F3  081A               	movf	26,w	;volatile
  1640     01F4  00F9               	movwf	isr1@ReceivedData
  1641     01F5                     i1l1174:
  1642                           
  1643                           ;newmain.c: 140:             if(ReceivedData != '\n')
  1644     01F5  300A               	movlw	10
  1645     01F6  0679               	xorwf	isr1@ReceivedData,w
  1646     01F7  1903               	btfsc	3,2
  1647     01F8  29FA               	goto	u64_21
  1648     01F9  29FB               	goto	u64_20
  1649     01FA                     u64_21:
  1650     01FA  2A06               	goto	i1l1180
  1651     01FB                     u64_20:
  1652     01FB                     i1l1176:
  1653                           
  1654                           ;newmain.c: 141:             {;newmain.c: 142:                 RX_Buffer[rx_index++] = R
      +                          CREG;
  1655     01FB  087A               	movf	_rx_index,w
  1656     01FC  3EA0               	addlw	(low (_RX_Buffer| 0))& (0+255)
  1657     01FD  0084               	movwf	4
  1658     01FE  081A               	movf	26,w	;volatile
  1659     01FF  1383               	bcf	3,7	;select IRP bank1
  1660     0200  0080               	movwf	0
  1661     0201                     i1l1178:
  1662     0201  3001               	movlw	1
  1663     0202  00F5               	movwf	??_isr1
  1664     0203  0875               	movf	??_isr1,w
  1665     0204  07FA               	addwf	_rx_index,f
  1666                           
  1667                           ;newmain.c: 143:             }
  1668     0205  2A11               	goto	i1l102
  1669     0206                     i1l1180:
  1670                           
  1671                           ;newmain.c: 145:             {;newmain.c: 146:                 HandleData(RX_Buffer);
  1672     0206  30A0               	movlw	(low (_RX_Buffer| 0))& (0+255)
  1673     0207  120A  118A  22CB  120A  118A  	fcall	_HandleData
  1674                           
  1675                           ;newmain.c: 147:                 ClearRX_Buffer();
  1676     020C  120A  118A  228E  120A  118A  	fcall	_ClearRX_Buffer
  1677     0211                     i1l102:
  1678     0211  0878               	movf	??_isr1+3,w
  1679     0212  008A               	movwf	10
  1680     0213  0877               	movf	??_isr1+2,w
  1681     0214  0084               	movwf	4
  1682     0215  0E76               	swapf	??_isr1+1,w
  1683     0216  0083               	movwf	3
  1684     0217  0EFE               	swapf	btemp,f
  1685     0218  0E7E               	swapf	btemp,w
  1686     0219  0009               	retfie
  1687     021A                     __end_of_isr1:
  1688                           
  1689                           	psect	intentry
  1690     0004                     __pintentry:	
  1691                           ;incstack = 0
  1692                           ; Regs used in _isr1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1693                           
  1694     0004                     interrupt_function:
  1695     007E                     saved_w	set	btemp
  1696     0004  00FE               	movwf	btemp
  1697     0005  0E03               	swapf	3,w
  1698     0006  00F6               	movwf	??_isr1+1
  1699     0007  0804               	movf	4,w
  1700     0008  00F7               	movwf	??_isr1+2
  1701     0009  080A               	movf	10,w
  1702     000A  00F8               	movwf	??_isr1+3
  1703     000B  120A  118A  29E7   	ljmp	_isr1
  1704                           
  1705                           	psect	text9
  1706     02CB                     __ptext9:	
  1707 ;; *************** function _HandleData *****************
  1708 ;; Defined at:
  1709 ;;		line 92 in file "newmain.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  RX              1    wreg     PTR unsigned char 
  1712 ;;		 -> RX_Buffer(50), 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  RX              1    4[COMMON] PTR unsigned char 
  1715 ;;		 -> RX_Buffer(50), 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  1    wreg      void 
  1718 ;; Registers used:
  1719 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1725 ;;      Params:         0       0       0       0       0
  1726 ;;      Locals:         1       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0
  1728 ;;      Totals:         1       0       0       0       0
  1729 ;;Total ram usage:        1 bytes
  1730 ;; Hardware stack levels used: 1
  1731 ;; Hardware stack levels required when called: 2
  1732 ;; This function calls:
  1733 ;;		i1_UART_Transmit_Text
  1734 ;; This function is called by:
  1735 ;;		_isr1
  1736 ;;		_UART_Receive
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740     02CB                     _HandleData:	
  1741                           ;psect for function _HandleData
  1742                           
  1743                           
  1744                           ;incstack = 0
  1745                           ; Regs used in _HandleData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1746                           ;HandleData@RX stored from wreg
  1747     02CB  00F4               	movwf	HandleData@RX
  1748     02CC                     i1l1052:
  1749                           
  1750                           ;newmain.c: 92: void HandleData(char *RX);newmain.c: 93: {;newmain.c: 94:     UART_Trans
      +                          mit_Text(RX);
  1751     02CC  0874               	movf	HandleData@RX,w
  1752     02CD  120A  118A  225D  120A  118A  	fcall	i1_UART_Transmit_Text
  1753     02D2                     i1l77:
  1754     02D2  0008               	return
  1755     02D3                     __end_of_HandleData:
  1756                           
  1757                           	psect	text10
  1758     025D                     __ptext10:	
  1759 ;; *************** function i1_UART_Transmit_Text *****************
  1760 ;; Defined at:
  1761 ;;		line 66 in file "newmain.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;  str             1    wreg     PTR unsigned char 
  1764 ;;		 -> main@text(20), RX_Buffer(50), 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  str             1    2[COMMON] PTR unsigned char 
  1767 ;;		 -> main@text(20), RX_Buffer(50), 
  1768 ;;  i               1    3[COMMON] unsigned char 
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  1    wreg      void 
  1771 ;; Registers used:
  1772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1778 ;;      Params:         0       0       0       0       0
  1779 ;;      Locals:         2       0       0       0       0
  1780 ;;      Temps:          1       0       0       0       0
  1781 ;;      Totals:         3       0       0       0       0
  1782 ;;Total ram usage:        3 bytes
  1783 ;; Hardware stack levels used: 1
  1784 ;; Hardware stack levels required when called: 1
  1785 ;; This function calls:
  1786 ;;		i1_UART_Transmit
  1787 ;; This function is called by:
  1788 ;;		_HandleData
  1789 ;; This function uses a non-reentrant model
  1790 ;;
  1791                           
  1792     025D                     i1_UART_Transmit_Text:	
  1793                           ;psect for function i1_UART_Transmit_Text
  1794                           
  1795                           
  1796                           ;incstack = 0
  1797                           ; Regs used in i1_UART_Transmit_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1798                           ;i1UART_Transmit_Text@str stored from wreg
  1799     025D  00F2               	movwf	i1UART_Transmit_Text@str
  1800     025E                     i1l1018:
  1801                           
  1802                           ;newmain.c: 66: void UART_Transmit_Text(char *str);newmain.c: 67: {;newmain.c: 68:     u
      +                          nsigned char i=0;
  1803     025E  01F3               	clrf	i1UART_Transmit_Text@i
  1804                           
  1805                           ;newmain.c: 69:     while(str[i] != 0)
  1806     025F  2A6F               	goto	i1l1024
  1807     0260                     i1l1020:
  1808                           
  1809                           ;newmain.c: 70:     {;newmain.c: 71:         UART_Transmit(str[i]);
  1810     0260  0873               	movf	i1UART_Transmit_Text@i,w
  1811     0261  0772               	addwf	i1UART_Transmit_Text@str,w
  1812     0262  00F1               	movwf	??i1_UART_Transmit_Text
  1813     0263  0871               	movf	??i1_UART_Transmit_Text,w
  1814     0264  0084               	movwf	4
  1815     0265  0800               	movf	0,w
  1816     0266  120A  118A  22AE  120A  118A  	fcall	i1_UART_Transmit
  1817     026B                     i1l1022:
  1818                           
  1819                           ;newmain.c: 72:         i++;
  1820     026B  3001               	movlw	1
  1821     026C  00F1               	movwf	??i1_UART_Transmit_Text
  1822     026D  0871               	movf	??i1_UART_Transmit_Text,w
  1823     026E  07F3               	addwf	i1UART_Transmit_Text@i,f
  1824     026F                     i1l1024:
  1825                           
  1826                           ;newmain.c: 69:     while(str[i] != 0)
  1827     026F  0873               	movf	i1UART_Transmit_Text@i,w
  1828     0270  0772               	addwf	i1UART_Transmit_Text@str,w
  1829     0271  00F1               	movwf	??i1_UART_Transmit_Text
  1830     0272  0871               	movf	??i1_UART_Transmit_Text,w
  1831     0273  0084               	movwf	4
  1832     0274  1383               	bcf	3,7	;select IRP bank0
  1833     0275  0800               	movf	0,w
  1834     0276  1D03               	btfss	3,2
  1835     0277  2A79               	goto	u48_21
  1836     0278  2A7A               	goto	u48_20
  1837     0279                     u48_21:
  1838     0279  2A60               	goto	i1l1020
  1839     027A                     u48_20:
  1840     027A                     i1l68:
  1841     027A  0008               	return
  1842     027B                     __end_ofi1_UART_Transmit_Text:
  1843                           
  1844                           	psect	text11
  1845     02AE                     __ptext11:	
  1846 ;; *************** function i1_UART_Transmit *****************
  1847 ;; Defined at:
  1848 ;;		line 61 in file "newmain.c"
  1849 ;; Parameters:    Size  Location     Type
  1850 ;;  c               1    wreg     unsigned char 
  1851 ;; Auto vars:     Size  Location     Type
  1852 ;;  c               1    0[COMMON] unsigned char 
  1853 ;; Return value:  Size  Location     Type
  1854 ;;                  1    wreg      void 
  1855 ;; Registers used:
  1856 ;;		wreg
  1857 ;; Tracked objects:
  1858 ;;		On entry : 0/0
  1859 ;;		On exit  : 0/0
  1860 ;;		Unchanged: 0/0
  1861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1862 ;;      Params:         0       0       0       0       0
  1863 ;;      Locals:         1       0       0       0       0
  1864 ;;      Temps:          0       0       0       0       0
  1865 ;;      Totals:         1       0       0       0       0
  1866 ;;Total ram usage:        1 bytes
  1867 ;; Hardware stack levels used: 1
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		i1_UART_Transmit_Text
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875     02AE                     i1_UART_Transmit:	
  1876                           ;psect for function i1_UART_Transmit
  1877                           
  1878                           
  1879                           ;incstack = 0
  1880                           ; Regs used in i1_UART_Transmit: [wreg]
  1881                           ;i1UART_Transmit@c stored from wreg
  1882     02AE  00F0               	movwf	i1UART_Transmit@c
  1883     02AF                     i1l962:
  1884     02AF                     i1l59:	
  1885                           ;newmain.c: 61: void UART_Transmit(char c);newmain.c: 62: {;newmain.c: 63:     while(!TR
      +                          MT);
  1886                           
  1887     02AF  1683               	bsf	3,5	;RP0=1, select bank1
  1888     02B0  1303               	bcf	3,6	;RP1=0, select bank1
  1889     02B1  1C98               	btfss	24,1	;volatile
  1890     02B2  2AB4               	goto	u33_21
  1891     02B3  2AB5               	goto	u33_20
  1892     02B4                     u33_21:
  1893     02B4  2AAF               	goto	i1l59
  1894     02B5                     u33_20:
  1895     02B5                     i1l964:
  1896                           
  1897                           ;newmain.c: 64:     TXREG = c;
  1898     02B5  0870               	movf	i1UART_Transmit@c,w
  1899     02B6  1283               	bcf	3,5	;RP0=0, select bank0
  1900     02B7  1303               	bcf	3,6	;RP1=0, select bank0
  1901     02B8  0099               	movwf	25	;volatile
  1902     02B9                     i1l62:
  1903     02B9  0008               	return
  1904     02BA                     __end_ofi1_UART_Transmit:
  1905                           
  1906                           	psect	text12
  1907     028E                     __ptext12:	
  1908 ;; *************** function _ClearRX_Buffer *****************
  1909 ;; Defined at:
  1910 ;;		line 96 in file "newmain.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;  i               1    1[COMMON] unsigned char 
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1924 ;;      Params:         0       0       0       0       0
  1925 ;;      Locals:         1       0       0       0       0
  1926 ;;      Temps:          1       0       0       0       0
  1927 ;;      Totals:         2       0       0       0       0
  1928 ;;Total ram usage:        2 bytes
  1929 ;; Hardware stack levels used: 1
  1930 ;; This function calls:
  1931 ;;		Nothing
  1932 ;; This function is called by:
  1933 ;;		_isr1
  1934 ;;		_UART_Receive
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938     028E                     _ClearRX_Buffer:	
  1939                           ;psect for function _ClearRX_Buffer
  1940                           
  1941     028E                     i1l1054:	
  1942                           ;incstack = 0
  1943                           ; Regs used in _ClearRX_Buffer: [wreg-fsr0h+status,2+status,0]
  1944                           
  1945                           
  1946                           ;newmain.c: 98:  char i;;newmain.c: 99:  for(i = 0; i < 50; i++)
  1947     028E  01F1               	clrf	ClearRX_Buffer@i
  1948     028F                     i1l1060:
  1949                           
  1950                           ;newmain.c: 100:  {;newmain.c: 101:   RX_Buffer[i] = 0;
  1951     028F  0871               	movf	ClearRX_Buffer@i,w
  1952     0290  3EA0               	addlw	(low (_RX_Buffer| 0))& (0+255)
  1953     0291  0084               	movwf	4
  1954     0292  1383               	bcf	3,7	;select IRP bank1
  1955     0293  0180               	clrf	0
  1956     0294                     i1l1062:
  1957                           
  1958                           ;newmain.c: 102:  }
  1959     0294  3001               	movlw	1
  1960     0295  00F0               	movwf	??_ClearRX_Buffer
  1961     0296  0870               	movf	??_ClearRX_Buffer,w
  1962     0297  07F1               	addwf	ClearRX_Buffer@i,f
  1963     0298                     i1l1064:
  1964     0298  3032               	movlw	50
  1965     0299  0271               	subwf	ClearRX_Buffer@i,w
  1966     029A  1C03               	skipc
  1967     029B  2A9D               	goto	u50_21
  1968     029C  2A9E               	goto	u50_20
  1969     029D                     u50_21:
  1970     029D  2A8F               	goto	i1l1060
  1971     029E                     u50_20:
  1972     029E                     i1l1066:
  1973                           
  1974                           ;newmain.c: 103:  rx_index = 0;
  1975     029E  01FA               	clrf	_rx_index
  1976     029F                     i1l82:
  1977     029F  0008               	return
  1978     02A0                     __end_of_ClearRX_Buffer:
  1979     007E                     btemp	set	126	;btemp
  1980     007E                     wtemp0	set	126
  1981                           
  1982                           	psect	config
  1983                           
  1984                           ;Config register CONFIG @ 0x2007
  1985                           ;	Oscillator Selection bits
  1986                           ;	FOSC = HS, HS oscillator
  1987                           ;	Watchdog Timer Enable bit
  1988                           ;	WDTE = OFF, WDT disabled
  1989                           ;	Power-up Timer Enable bit
  1990                           ;	PWRTE = OFF, PWRT disabled
  1991                           ;	Brown-out Reset Enable bit
  1992                           ;	BOREN = OFF, BOR disabled
  1993                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1994                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1995                           ;	Data EEPROM Memory Code Protection bit
  1996                           ;	CPD = OFF, Data EEPROM code protection off
  1997                           ;	Flash Program Memory Write Enable bits
  1998                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1999                           ;	In-Circuit Debugger Mode bit
  2000                           ;	DEBUG = 0x1, unprogrammed default
  2001                           ;	Flash Program Memory Code Protection bit
  2002                           ;	CP = OFF, Code protection off
  2003     2007                     	org	8199
  2004     2007  3F3A               	dw	16186

Data Sizes:
    Strings     17
    Constant    10
    Data        0
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     54      54
    BANK1            80      0      50
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@text(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    HandleData@RX	PTR unsigned char  size(1) Largest target is 50
		 -> RX_Buffer(BANK1[50]), 

    UART_Transmit_Text@str	PTR unsigned char  size(1) Largest target is 50
		 -> main@text(BANK0[20]), RX_Buffer(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr1 in COMMON

    _isr1->_HandleData
    _HandleData->i1_UART_Transmit_Text
    i1_UART_Transmit_Text->i1_UART_Transmit

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_Transmit_Text->_UART_Transmit

Critical Paths under _isr1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr1 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr1 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr1 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0    1492
                                             27 BANK0     27    27      0
                            _IO_Init
                          _UART_Init
                 _UART_Transmit_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_Transmit_Text                                   3     3      0     178
                                              1 BANK0      3     3      0
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IO_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr1                                                 5     5      0     291
                                              5 COMMON     5     5      0
                     _ClearRX_Buffer
                         _HandleData
 ---------------------------------------------------------------------------------
 (4) _HandleData                                           1     1      0     200
                                              4 COMMON     1     1      0
               i1_UART_Transmit_Text
 ---------------------------------------------------------------------------------
 (5) i1_UART_Transmit_Text                                 3     3      0     112
                                              1 COMMON     3     3      0
                    i1_UART_Transmit
 ---------------------------------------------------------------------------------
 (6) i1_UART_Transmit                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ClearRX_Buffer                                       2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IO_Init
   _UART_Init
   _UART_Transmit_Text
     _UART_Transmit
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr1 (ROOT)
   _ClearRX_Buffer
   _HandleData
     i1_UART_Transmit_Text
       i1_UART_Transmit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      73       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     36      36       5       67.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      32       7       62.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      73      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Oct 01 19:08:35 2022

                           pc 0002                            l53 02C2                            l62 02AD  
                          l56 028D                            l59 02A3                            l68 023B  
                          l88 0135                            fsr 0004                           l212 00FA  
                         l488 01AA                           l498 01E6                           l970 0165  
                         l980 017D                           l972 0169                           l966 02A3  
                         l990 01A0                           l982 0181                           l974 016F  
                         l968 02A9                           l984 0192                           l976 0172  
                         l992 01A6                           l986 0198                           l978 0179  
                         l988 0199                           l996 01AB                           l998 01B3  
                         u410 01A6                           u411 01A5                           u340 02A9  
                         u420 01B3                           u341 02A8                           u405 019A  
                         u421 01B2                           u350 016F                           u510 002B  
                         u351 016E                           u511 002A                           u440 01C5  
                         u520 0063                           u441 01C4                           u521 0062  
                         u370 0181                           u450 01CF                           u530 0089  
                         u610 0139                           u371 0180                           u451 01CE  
                         u435 01B7                           u531 0088                           u611 0138  
                         u540 0094                           u365 0173                           u541 0093  
                         u605 011E                           u390 0192                           u470 01E2  
                         u550 009A                           u391 0191                           u471 01E1  
                         u455 01CB                           u551 0099                           u535 0085  
                         u560 00E6                           u385 0182                           u465 01D6  
                         u561 00E5                           u490 023B                           u570 00F6  
                         u491 023A                           u395 018E                           u571 00F5  
                         u657 012E                           u667 015B                           fsr0 0004  
                         indf 0000                   main@channel 0052                          l1000 01B6  
                        l1010 01D5                          l1002 01BD                          l1012 01DC  
                        l1004 01C1                          l1030 027B                          l1006 01C5  
                        l1014 01E2                          l1110 00A3                          l1102 008A  
                        l1040 028B                          l1032 027F                          l1008 01CF  
                        l1112 00A6                          l1104 0094                          l1120 00E6  
                        l1026 02BA                          l1042 028C                          l1034 0282  
                        l1050 0230                          l1114 00D4                          l1106 009A  
                        l1122 00F6                          l1202 0048                          l1028 02BE  
                        l1036 0285                          l1044 021D                          l1116 00D9  
                        l1108 009F                          l1038 0288                          l1046 021F  
                        l1118 00DD                          l1070 0025                          l1150 0113  
                        l1142 00FB                          l1048 022A                          l1080 0036  
                        l1072 002B                          l1160 0139                          l1152 0113  
                        l1144 0100                          l1090 0067                          l1082 0053  
                        l1074 0030                          l1162 0141                          l1154 0119  
                        l1146 010F                          l1092 006C                          l1084 005B  
                        l1076 0035                          l1068 0022                          l1164 014D  
                        l1156 0128                          l1148 0110                          l1086 005F  
                        l1166 0153                          l1158 0132                          l1088 0063  
                        l1098 006E                          STR_1 024C                          _CREN 00C4  
                        _RCIE 0465                          _RCIF 0065                          i1l62 02B9  
                        i1l82 029F                          i1l59 02AF                          i1l68 027A  
                        i1l77 02D2                          _SPEN 00C7                          _TRMT 04C1  
                        _TXEN 04C5               __end_of_IO_Init 02C3                          _isr1 01E7  
                        _main 00FB                          btemp 007E                          start 000E  
  __end_of_UART_Transmit_Text 023C                    _HandleData 02CB                         ?_isr1 0070  
                       ?_main 0070               __end_of___lwdiv 01AB                         i1l102 0211  
             __end_of___lwmod 01E7                         i1l962 02AF                         i1l964 02B5  
                       _RCREG 001A              isr1@ReceivedData 0079                         u33_20 02B5  
                       u33_21 02B4                         u50_20 029E                         u50_21 029D  
                       _SPBRG 0099                         _PORTB 0006                         u62_20 01ED  
                       u62_21 01EC                         u63_20 01F3                         u63_21 01F2  
                       u48_20 027A                         u64_20 01FB                         u48_21 0279  
                       u64_21 01FA                         _TRISA 0085                         _TRISB 0086  
                       _TXREG 0019          i1_UART_Transmit_Text 025D               __end_of_dpowers 024C  
                       pclath 000A                         status 0003                         wtemp0 007E  
             __end_of_sprintf 00FB              ?i1_UART_Transmit 0070               __initialization 0011  
                __end_of_isr1 021A                  __end_of_main 0165                        ??_isr1 0075  
                      ??_main 003B         ?i1_UART_Transmit_Text 0070                     ??_IO_Init 0020  
                      _ADCON0 001F                        _ADCON1 009F                        _ADRESH 001E  
                      _ADRESL 009E                        i1l1020 0260                        i1l1022 026B  
                      i1l1024 026F                        i1l1018 025E                        i1l1060 028F  
                      i1l1052 02CC                        i1l1062 0294                        i1l1054 028E  
                      i1l1064 0298                        i1l1066 029E                        i1l1170 01ED  
                      i1l1180 0206                        i1l1172 01F3                        i1l1174 01F5  
                      i1l1176 01FB                        i1l1168 01E7                        i1l1178 0201  
           __end_of_UART_Init 028E         i1UART_Transmit_Text@i 0073                   ?_HandleData 0070  
                   ??___lwdiv 0024                     ??___lwmod 002C                        saved_w 007E  
                   ??_sprintf 0031              ??_ClearRX_Buffer 0070       __end_of__initialization 001B  
       __end_of_UART_Transmit 02AE                __pcstackCOMMON 0070        ??i1_UART_Transmit_Text 0071  
                  __pbssBANK1 00A0                    __pmaintext 00FB                    __pintentry 0004  
          _UART_Transmit_Text 021A                       _IO_Init 02BA                    __stringtab 023C  
         ?_UART_Transmit_Text 0070                       ___lwdiv 0165                       ___lwmod 01AB  
        ??_UART_Transmit_Text 0021                       __ptext1 001F                       __ptext2 01AB  
                     __ptext3 0165                       __ptext4 021A                       __ptext5 02A0  
                     __ptext6 027B                       __ptext7 02BA                       __ptext8 01E7  
                     __ptext9 02CB                       _dpowers 0242                       main@adc 0054  
                     _sprintf 001F                       clrloop0 02C4          end_of_initialization 001B  
              UART_Transmit@c 0020                  ??_HandleData 0074                     _UART_Init 027B  
                   _TRISCbits 0087            __end_of_HandleData 02D3                     _RX_Buffer 00A0  
                  ?_UART_Init 0070               ClearRX_Buffer@i 0071           start_initialization 0011  
                 __pbssCOMMON 007A                     ___latbits 0002                 __pcstackBANK0 0020  
           ??i1_UART_Transmit 0070                      ?_IO_Init 0070                   sprintf@flag 0035  
                 sprintf@prec 0036              ___lwdiv@dividend 0022                      ?___lwdiv 0020  
                    ?___lwmod 0028                   ??_UART_Init 0020                     __pstrings 023C  
            ___lwdiv@quotient 0025                      ?_sprintf 002E                  HandleData@RX 0074  
           interrupt_function 0004                     clear_ram0 02C3                 _UART_Transmit 02A0  
                    _GO_nDONE 00FA           UART_Transmit_Text@i 0022                   __stringbase 0241  
            i1UART_Transmit@c 0070                ?_UART_Transmit 0070       i1UART_Transmit_Text@str 0072  
          __end_of__stringtab 0242                    sprintf@val 0037               ___lwdiv@divisor 0020  
             ___lwdiv@counter 0027                      __ptext10 025D                      __ptext11 02AE  
                    __ptext12 028E                _ClearRX_Buffer 028E                      _rx_index 007A  
             i1_UART_Transmit 02AE                      main@text 003E                    _INTCONbits 000B  
                    intlevel1 0000                     sprintf@ap 0034                     sprintf@sp 0039  
            ___lwmod@dividend 002A               ??_UART_Transmit 0020  __end_ofi1_UART_Transmit_Text 027B  
      __end_of_ClearRX_Buffer 02A0                     stringcode 023C         UART_Transmit_Text@str 0023  
                    sprintf@c 003A                      sprintf@f 002E               ___lwmod@divisor 0028  
             ___lwmod@counter 002D                      stringdir 023C                      stringtab 023C  
             ?_ClearRX_Buffer 0070       __end_ofi1_UART_Transmit 02BA  
