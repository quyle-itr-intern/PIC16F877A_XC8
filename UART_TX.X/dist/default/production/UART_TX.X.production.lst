

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jan 26 08:40:15 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.32
    29                           ; Generated 02/02/2021 GMT
    30                           ; 
    31                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F877A Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000E                     	;# 
   139  000F                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0013                     	;# 
   144  0014                     	;# 
   145  0015                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0086                     	;# 
   161  0087                     	;# 
   162  0088                     	;# 
   163  0089                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  010F                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183                           
   184                           	psect	strings
   185  0223                     __pstrings:
   186  0223                     stringtab:
   187  0223                     __stringtab:
   188  0223                     stringcode:	
   189                           ;	String table - string pointers are 1 byte each
   190                           
   191  0223                     stringdir:
   192  0223  3002               	movlw	high stringdir
   193  0224  008A               	movwf	10
   194  0225  0804               	movf	4,w
   195  0226  0A84               	incf	4,f
   196  0227  0782               	addwf	2,f
   197  0228                     __stringbase:
   198  0228  3400               	retlw	0
   199  0229                     __end_of__stringtab:
   200  0229                     _dpowers:
   201  0229  3401               	retlw	1
   202  022A  3400               	retlw	0
   203  022B  340A               	retlw	10
   204  022C  3400               	retlw	0
   205  022D  3464               	retlw	100
   206  022E  3400               	retlw	0
   207  022F  34E8               	retlw	232
   208  0230  3403               	retlw	3
   209  0231  3410               	retlw	16
   210  0232  3427               	retlw	39
   211  0233                     __end_of_dpowers:
   212  001A                     _RCREG	set	26
   213  0019                     _TXREG	set	25
   214  000B                     _INTCONbits	set	11
   215  0006                     _PORTB	set	6
   216  0065                     _RCIF	set	101
   217  00C4                     _CREN	set	196
   218  00C7                     _SPEN	set	199
   219  0099                     _SPBRG	set	153
   220  0086                     _TRISB	set	134
   221  0087                     _TRISCbits	set	135
   222  04C1                     _TRMT	set	1217
   223  0465                     _RCIE	set	1125
   224  04C5                     _TXEN	set	1221
   225  0233                     STR_1:
   226  0233  3448               	retlw	72	;'H'
   227  0234  3465               	retlw	101	;'e'
   228  0235  346C               	retlw	108	;'l'
   229  0236  346C               	retlw	108	;'l'
   230  0237  346F               	retlw	111	;'o'
   231  0238  3420               	retlw	32	;' '
   232  0239  3457               	retlw	87	;'W'
   233  023A  346F               	retlw	111	;'o'
   234  023B  3472               	retlw	114	;'r'
   235  023C  346C               	retlw	108	;'l'
   236  023D  3464               	retlw	100	;'d'
   237  023E  3420               	retlw	32	;' '
   238  023F  3425               	retlw	37	;'%'
   239  0240  3464               	retlw	100	;'d'
   240  0241  340D               	retlw	13
   241  0242  340A               	retlw	10
   242  0243  3400               	retlw	0
   243                           
   244                           	psect	cinit
   245  0011                     start_initialization:	
   246                           ; #config settings
   247                           
   248  0011                     __initialization:
   249                           
   250                           ; Clear objects allocated to COMMON
   251  0011  01FA               	clrf	__pbssCOMMON& (0+127)
   252                           
   253                           ; Clear objects allocated to BANK1
   254  0012  1383               	bcf	3,7	;select IRP bank0
   255  0013  30A0               	movlw	low __pbssBANK1
   256  0014  0084               	movwf	4
   257  0015  30D2               	movlw	low (__pbssBANK1+50)
   258  0016  120A  118A  22AA  120A  118A  	fcall	clear_ram0
   259  001B                     end_of_initialization:	
   260                           ;End of C runtime variable initialization code
   261                           
   262  001B                     __end_of__initialization:
   263  001B  0183               	clrf	3
   264  001C  120A  118A  294F   	ljmp	_main	;jump to C main() function
   265                           
   266                           	psect	bssCOMMON
   267  007A                     __pbssCOMMON:
   268  007A                     _rx_index:
   269  007A                     	ds	1
   270                           
   271                           	psect	bssBANK1
   272  00A0                     __pbssBANK1:
   273  00A0                     _RX_Buffer:
   274  00A0                     	ds	50
   275                           
   276                           	psect	clrtext
   277  02AA                     clear_ram0:	
   278                           ;	Called with FSR containing the base address, and
   279                           ;	W with the last address+1
   280                           
   281  02AA  0064               	clrwdt	;clear the watchdog before getting into this loop
   282  02AB                     clrloop0:
   283  02AB  0180               	clrf	0	;clear RAM location pointed to by FSR
   284  02AC  0A84               	incf	4,f	;increment pointer
   285  02AD  0604               	xorwf	4,w	;XOR with final address
   286  02AE  1903               	btfsc	3,2	;have we reached the end yet?
   287  02AF  3400               	retlw	0	;all done for this memory range, return
   288  02B0  0604               	xorwf	4,w	;XOR again to restore value
   289  02B1  2AAB               	goto	clrloop0	;do the next byte
   290                           
   291                           	psect	cstackCOMMON
   292  0070                     __pcstackCOMMON:
   293  0070                     ?_HandleData:
   294  0070                     ?_ClearRX_Buffer:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ??_ClearRX_Buffer:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_IO_Init:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?_UART_Init:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_UART_Transmit:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  0070                     ?_UART_Transmit_Text:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  0070                     ?_main:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ?_isr1:	
   316                           ; 1 bytes @ 0x0
   317                           
   318  0070                     ?i1_UART_Transmit:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ??i1_UART_Transmit:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?i1_UART_Transmit_Text:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     i1UART_Transmit@c:	
   328                           ; 1 bytes @ 0x0
   329                           
   330                           
   331                           ; 1 bytes @ 0x0
   332  0070                     	ds	1
   333  0071                     ??i1_UART_Transmit_Text:
   334  0071                     ClearRX_Buffer@i:	
   335                           ; 1 bytes @ 0x1
   336                           
   337                           
   338                           ; 1 bytes @ 0x1
   339  0071                     	ds	1
   340  0072                     i1UART_Transmit_Text@str:
   341                           
   342                           ; 1 bytes @ 0x2
   343  0072                     	ds	1
   344  0073                     i1UART_Transmit_Text@i:
   345                           
   346                           ; 1 bytes @ 0x3
   347  0073                     	ds	1
   348  0074                     ??_HandleData:
   349  0074                     HandleData@RX:	
   350                           ; 1 bytes @ 0x4
   351                           
   352                           
   353                           ; 1 bytes @ 0x4
   354  0074                     	ds	1
   355  0075                     ??_isr1:
   356                           
   357                           ; 1 bytes @ 0x5
   358  0075                     	ds	4
   359  0079                     isr1@ReceivedData:
   360                           
   361                           ; 1 bytes @ 0x9
   362  0079                     	ds	1
   363                           
   364                           	psect	cstackBANK0
   365  0020                     __pcstackBANK0:
   366  0020                     ??_IO_Init:
   367  0020                     ??_UART_Init:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0020                     ??_UART_Transmit:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  0020                     ?___lwdiv:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  0020                     UART_Transmit@c:	
   377                           ; 2 bytes @ 0x0
   378                           
   379  0020                     ___lwdiv@divisor:	
   380                           ; 1 bytes @ 0x0
   381                           
   382                           
   383                           ; 2 bytes @ 0x0
   384  0020                     	ds	1
   385  0021                     ??_UART_Transmit_Text:
   386                           
   387                           ; 1 bytes @ 0x1
   388  0021                     	ds	1
   389  0022                     UART_Transmit_Text@i:
   390  0022                     ___lwdiv@dividend:	
   391                           ; 1 bytes @ 0x2
   392                           
   393                           
   394                           ; 2 bytes @ 0x2
   395  0022                     	ds	1
   396  0023                     UART_Transmit_Text@str:
   397                           
   398                           ; 1 bytes @ 0x3
   399  0023                     	ds	1
   400  0024                     ??___lwdiv:
   401                           
   402                           ; 1 bytes @ 0x4
   403  0024                     	ds	1
   404  0025                     ___lwdiv@quotient:
   405                           
   406                           ; 2 bytes @ 0x5
   407  0025                     	ds	2
   408  0027                     ___lwdiv@counter:
   409                           
   410                           ; 1 bytes @ 0x7
   411  0027                     	ds	1
   412  0028                     ?___lwmod:
   413  0028                     ___lwmod@divisor:	
   414                           ; 2 bytes @ 0x8
   415                           
   416                           
   417                           ; 2 bytes @ 0x8
   418  0028                     	ds	2
   419  002A                     ___lwmod@dividend:
   420                           
   421                           ; 2 bytes @ 0xA
   422  002A                     	ds	2
   423  002C                     ??___lwmod:
   424                           
   425                           ; 1 bytes @ 0xC
   426  002C                     	ds	1
   427  002D                     ___lwmod@counter:
   428                           
   429                           ; 1 bytes @ 0xD
   430  002D                     	ds	1
   431  002E                     ?_sprintf:
   432  002E                     sprintf@f:	
   433                           ; 2 bytes @ 0xE
   434                           
   435                           
   436                           ; 1 bytes @ 0xE
   437  002E                     	ds	3
   438  0031                     ??_sprintf:
   439                           
   440                           ; 1 bytes @ 0x11
   441  0031                     	ds	3
   442  0034                     sprintf@ap:
   443                           
   444                           ; 1 bytes @ 0x14
   445  0034                     	ds	1
   446  0035                     sprintf@flag:
   447                           
   448                           ; 1 bytes @ 0x15
   449  0035                     	ds	1
   450  0036                     sprintf@prec:
   451                           
   452                           ; 1 bytes @ 0x16
   453  0036                     	ds	1
   454  0037                     sprintf@val:
   455                           
   456                           ; 2 bytes @ 0x17
   457  0037                     	ds	2
   458  0039                     sprintf@sp:
   459                           
   460                           ; 1 bytes @ 0x19
   461  0039                     	ds	1
   462  003A                     sprintf@c:
   463                           
   464                           ; 1 bytes @ 0x1A
   465  003A                     	ds	1
   466  003B                     ??_main:
   467                           
   468                           ; 1 bytes @ 0x1B
   469  003B                     	ds	3
   470  003E                     main@text:
   471                           
   472                           ; 20 bytes @ 0x1E
   473  003E                     	ds	20
   474  0052                     main@i:
   475                           
   476                           ; 2 bytes @ 0x32
   477  0052                     	ds	2
   478                           
   479                           	psect	maintext
   480  014F                     __pmaintext:	
   481 ;;
   482 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   483 ;;
   484 ;; *************** function _main *****************
   485 ;; Defined at:
   486 ;;		line 105 in file "newmain.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;		None
   489 ;; Auto vars:     Size  Location     Type
   490 ;;  text           20   30[BANK0 ] unsigned char [20]
   491 ;;  i               2   50[BANK0 ] unsigned int 
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   496 ;; Tracked objects:
   497 ;;		On entry : B00/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   501 ;;      Params:         0       0       0       0       0
   502 ;;      Locals:         0      22       0       0       0
   503 ;;      Temps:          0       3       0       0       0
   504 ;;      Totals:         0      25       0       0       0
   505 ;;Total ram usage:       25 bytes
   506 ;; Hardware stack levels required when called: 6
   507 ;; This function calls:
   508 ;;		_IO_Init
   509 ;;		_UART_Init
   510 ;;		_UART_Transmit_Text
   511 ;;		_sprintf
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           
   518                           ;psect for function _main
   519  014F                     _main:
   520  014F                     l1115:	
   521                           ;incstack = 0
   522                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   523                           
   524                           
   525                           ;newmain.c: 107:     IO_Init();
   526  014F  120A  118A  22A1  120A  118A  	fcall	_IO_Init
   527  0154                     l1117:
   528                           
   529                           ;newmain.c: 108:     UART_Init();
   530  0154  120A  118A  2262  120A  118A  	fcall	_UART_Init
   531  0159                     l1119:
   532                           
   533                           ;newmain.c: 109:     unsigned int i = 0;
   534  0159  1283               	bcf	3,5	;RP0=0, select bank0
   535  015A  1303               	bcf	3,6	;RP1=0, select bank0
   536  015B  01D2               	clrf	main@i
   537  015C  01D3               	clrf	main@i+1
   538  015D                     l1121:
   539                           
   540                           ;newmain.c: 112:     {;newmain.c: 114:         sprintf(text, "Hello World %d\r\n", i++);
   541  015D  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   542  015E  1283               	bcf	3,5	;RP0=0, select bank0
   543  015F  1303               	bcf	3,6	;RP1=0, select bank0
   544  0160  00BB               	movwf	??_main
   545  0161  083B               	movf	??_main,w
   546  0162  00AE               	movwf	sprintf@f
   547  0163  0853               	movf	main@i+1,w
   548  0164  00B0               	movwf	?_sprintf+2
   549  0165  0852               	movf	main@i,w
   550  0166  00AF               	movwf	?_sprintf+1
   551  0167  303E               	movlw	(low (main@text| 0))& (0+255)
   552  0168  120A  118A  201F  120A  118A  	fcall	_sprintf
   553  016D                     l1123:
   554  016D  3001               	movlw	1
   555  016E  1283               	bcf	3,5	;RP0=0, select bank0
   556  016F  1303               	bcf	3,6	;RP1=0, select bank0
   557  0170  07D2               	addwf	main@i,f
   558  0171  1803               	skipnc
   559  0172  0AD3               	incf	main@i+1,f
   560  0173  3000               	movlw	0
   561  0174  07D3               	addwf	main@i+1,f
   562  0175                     l1125:
   563                           
   564                           ;newmain.c: 115:         UART_Transmit_Text(text);
   565  0175  303E               	movlw	(low (main@text| 0))& (0+255)
   566  0176  120A  118A  2201  120A  118A  	fcall	_UART_Transmit_Text
   567  017B                     l1127:
   568                           
   569                           ;newmain.c: 116:         _delay((unsigned long)((1000)*(20000000/4000.0)));
   570  017B  301A               	movlw	26
   571  017C  1283               	bcf	3,5	;RP0=0, select bank0
   572  017D  1303               	bcf	3,6	;RP1=0, select bank0
   573  017E  00BD               	movwf	??_main+2
   574  017F  305E               	movlw	94
   575  0180  00BC               	movwf	??_main+1
   576  0181  306D               	movlw	109
   577  0182  00BB               	movwf	??_main
   578  0183                     u617:
   579  0183  0BBB               	decfsz	??_main,f
   580  0184  2983               	goto	u617
   581  0185  0BBC               	decfsz	??_main+1,f
   582  0186  2983               	goto	u617
   583  0187  0BBD               	decfsz	??_main+2,f
   584  0188  2983               	goto	u617
   585  0189  298A               	nop2
   586  018A  295D               	goto	l1121
   587  018B  120A  118A  280E   	ljmp	start
   588  018E                     __end_of_main:
   589                           
   590                           	psect	text1
   591  001F                     __ptext1:	
   592 ;; *************** function _sprintf *****************
   593 ;; Defined at:
   594 ;;		line 505 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;  sp              1    wreg     PTR unsigned char 
   597 ;;		 -> main@text(20), 
   598 ;;  f               1   14[BANK0 ] PTR const unsigned char 
   599 ;;		 -> STR_1(17), 
   600 ;; Auto vars:     Size  Location     Type
   601 ;;  sp              1   25[BANK0 ] PTR unsigned char 
   602 ;;		 -> main@text(20), 
   603 ;;  tmpval          4    0        struct .
   604 ;;  val             2   23[BANK0 ] unsigned int 
   605 ;;  cp              2    0        PTR const unsigned char 
   606 ;;  len             2    0        unsigned int 
   607 ;;  c               1   26[BANK0 ] unsigned char 
   608 ;;  prec            1   22[BANK0 ] char 
   609 ;;  flag            1   21[BANK0 ] unsigned char 
   610 ;;  ap              1   20[BANK0 ] PTR void [1]
   611 ;;		 -> ?_sprintf(2), 
   612 ;; Return value:  Size  Location     Type
   613 ;;                  2   14[BANK0 ] int 
   614 ;; Registers used:
   615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   621 ;;      Params:         0       3       0       0       0
   622 ;;      Locals:         0       7       0       0       0
   623 ;;      Temps:          0       3       0       0       0
   624 ;;      Totals:         0      13       0       0       0
   625 ;;Total ram usage:       13 bytes
   626 ;; Hardware stack levels used: 1
   627 ;; Hardware stack levels required when called: 5
   628 ;; This function calls:
   629 ;;		___lwdiv
   630 ;;		___lwmod
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           
   637                           ;psect for function _sprintf
   638  001F                     _sprintf:
   639                           
   640                           ;incstack = 0
   641                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   642                           ;sprintf@sp stored from wreg
   643  001F  1283               	bcf	3,5	;RP0=0, select bank0
   644  0020  1303               	bcf	3,6	;RP1=0, select bank0
   645  0021  00B9               	movwf	sprintf@sp
   646  0022                     l1041:
   647                           
   648                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 505: sprintf(char * sp, 
      +                          const char * f, ...);D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 506:
      +                           {;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 507:  va_list ap;;D:\F
      +                          ile Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 512:  char c;;D:\File Install
      +                           MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 521:  signed char prec;;D:\File Install 
      +                          MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
   649  0022  302F               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   650  0023  00B1               	movwf	??_sprintf
   651  0024  0831               	movf	??_sprintf,w
   652  0025  00B4               	movwf	sprintf@ap
   653                           
   654                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) 
      +                          {
   655  0026  28F2               	goto	l1093
   656  0027                     l1043:
   657                           
   658                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 555:   if(c != '%')
   659  0027  3025               	movlw	37
   660  0028  063A               	xorwf	sprintf@c,w
   661  0029  1903               	btfsc	3,2
   662  002A  282C               	goto	u491
   663  002B  282D               	goto	u490
   664  002C                     u491:
   665  002C  2839               	goto	l1049
   666  002D                     u490:
   667  002D                     l1045:
   668                           
   669                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 557:   {;D:\File Install
      +                           MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   670  002D  083A               	movf	sprintf@c,w
   671  002E  00B1               	movwf	??_sprintf
   672  002F  0839               	movf	sprintf@sp,w
   673  0030  0084               	movwf	4
   674  0031  0831               	movf	??_sprintf,w
   675  0032  1383               	bcf	3,7	;select IRP bank0
   676  0033  0080               	movwf	0
   677  0034                     l1047:
   678  0034  3001               	movlw	1
   679  0035  00B1               	movwf	??_sprintf
   680  0036  0831               	movf	??_sprintf,w
   681  0037  07B9               	addwf	sprintf@sp,f
   682                           
   683                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 559:    continue;
   684  0038  28F2               	goto	l1093
   685  0039                     l1049:
   686                           
   687                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   688  0039  01B5               	clrf	sprintf@flag
   689  003A                     l1053:	
   690                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 661:   switch(c = *f++) 
      +                          {
   691                           
   692  003A  3001               	movlw	1
   693  003B  07AE               	addwf	sprintf@f,f
   694  003C  30FF               	movlw	-1
   695  003D  072E               	addwf	sprintf@f,w
   696  003E  0084               	movwf	4
   697  003F  120A  118A  2223  120A  118A  	fcall	stringdir
   698  0044  00BA               	movwf	sprintf@c
   699  0045  00B1               	movwf	??_sprintf
   700  0046  01B2               	clrf	??_sprintf+1
   701                           
   702                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   703                           ; Switch size 1, requested type "simple"
   704                           ; Number of cases is 1, Range of values is 0 to 0
   705                           ; switch strategies available:
   706                           ; Name         Instructions Cycles
   707                           ; simple_byte            4     3 (average)
   708                           ; direct_byte           11     8 (fixed)
   709                           ; jumptable            260     6 (fixed)
   710                           ;	Chosen strategy is simple_byte
   711  0047  0832               	movf	??_sprintf+1,w
   712  0048  3A00               	xorlw	0	; case 0
   713  0049  1903               	skipnz
   714  004A  284C               	goto	l1163
   715  004B  28F2               	goto	l1093
   716  004C                     l1163:
   717                           
   718                           ; Switch size 1, requested type "simple"
   719                           ; Number of cases is 3, Range of values is 0 to 105
   720                           ; switch strategies available:
   721                           ; Name         Instructions Cycles
   722                           ; simple_byte           10     6 (average)
   723                           ; jumptable            260     6 (fixed)
   724                           ;	Chosen strategy is simple_byte
   725  004C  0831               	movf	??_sprintf,w
   726  004D  3A00               	xorlw	0	; case 0
   727  004E  1903               	skipnz
   728  004F  2904               	goto	l1095
   729  0050  3A64               	xorlw	100	; case 100
   730  0051  1903               	skipnz
   731  0052  2857               	goto	l1055
   732  0053  3A0D               	xorlw	13	; case 105
   733  0054  1903               	skipnz
   734  0055  2857               	goto	l1055
   735  0056  28F2               	goto	l1093
   736  0057                     l1055:
   737                           
   738                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1279:   {;D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned int)(*(int *)
      +                          __va_arg((*(int **)ap), (int)0));
   739  0057  0834               	movf	sprintf@ap,w
   740  0058  0084               	movwf	4
   741  0059  1383               	bcf	3,7	;select IRP bank0
   742  005A  0800               	movf	0,w
   743  005B  00B7               	movwf	sprintf@val
   744  005C  0A84               	incf	4,f
   745  005D  0800               	movf	0,w
   746  005E  00B8               	movwf	sprintf@val+1
   747  005F                     l1057:
   748  005F  3002               	movlw	2
   749  0060  00B1               	movwf	??_sprintf
   750  0061  0831               	movf	??_sprintf,w
   751  0062  07B4               	addwf	sprintf@ap,f
   752  0063                     l1059:
   753                           
   754                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1287:    if((int)val < 0
      +                          ) {
   755  0063  1FB8               	btfss	sprintf@val+1,7
   756  0064  2866               	goto	u501
   757  0065  2867               	goto	u500
   758  0066                     u501:
   759  0066  2870               	goto	l1065
   760  0067                     u500:
   761  0067                     l1061:
   762                           
   763                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1288:     flag |= 0x03;
   764  0067  3003               	movlw	3
   765  0068  00B1               	movwf	??_sprintf
   766  0069  0831               	movf	??_sprintf,w
   767  006A  04B5               	iorwf	sprintf@flag,f
   768  006B                     l1063:
   769                           
   770                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1289:     val = -val;
   771  006B  09B7               	comf	sprintf@val,f
   772  006C  09B8               	comf	sprintf@val+1,f
   773  006D  0AB7               	incf	sprintf@val,f
   774  006E  1903               	skipnz
   775  006F  0AB8               	incf	sprintf@val+1,f
   776  0070                     l1065:
   777                           
   778                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1292:   };D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c != sizeof dpower
      +                          s/sizeof dpowers[0] ; c++)
   779  0070  01BA               	clrf	sprintf@c
   780  0071  0ABA               	incf	sprintf@c,f
   781  0072                     l1071:
   782                           
   783                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1332:     if(val < dpowe
      +                          rs[c])
   784  0072  083A               	movf	sprintf@c,w
   785  0073  00B1               	movwf	??_sprintf
   786  0074  0731               	addwf	??_sprintf,w
   787  0075  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   788  0076  0084               	movwf	4
   789  0077  120A  118A  2223  120A  118A  	fcall	stringdir
   790  007C  00B2               	movwf	??_sprintf+1
   791  007D  120A  118A  2223  120A  118A  	fcall	stringdir
   792  0082  00B3               	movwf	??_sprintf+2
   793  0083  0833               	movf	??_sprintf+2,w
   794  0084  0238               	subwf	sprintf@val+1,w
   795  0085  1D03               	skipz
   796  0086  2889               	goto	u515
   797  0087  0832               	movf	??_sprintf+1,w
   798  0088  0237               	subwf	sprintf@val,w
   799  0089                     u515:
   800  0089  1803               	skipnc
   801  008A  288C               	goto	u511
   802  008B  288D               	goto	u510
   803  008C                     u511:
   804  008C  288E               	goto	l1075
   805  008D                     u510:
   806  008D  2898               	goto	l1077
   807  008E                     l1075:
   808  008E  3001               	movlw	1
   809  008F  00B1               	movwf	??_sprintf
   810  0090  0831               	movf	??_sprintf,w
   811  0091  07BA               	addwf	sprintf@c,f
   812  0092  3005               	movlw	5
   813  0093  063A               	xorwf	sprintf@c,w
   814  0094  1D03               	btfss	3,2
   815  0095  2897               	goto	u521
   816  0096  2898               	goto	u520
   817  0097                     u521:
   818  0097  2872               	goto	l1071
   819  0098                     u520:
   820  0098                     l1077:
   821                           
   822                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1448:   {;D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
   823  0098  0835               	movf	sprintf@flag,w
   824  0099  3903               	andlw	3
   825  009A  1903               	btfsc	3,2
   826  009B  289D               	goto	u531
   827  009C  289E               	goto	u530
   828  009D                     u531:
   829  009D  28A9               	goto	l1083
   830  009E                     u530:
   831  009E                     l1079:
   832                           
   833                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++ = ('-'
      +                          )));
   834  009E  302D               	movlw	45
   835  009F  00B1               	movwf	??_sprintf
   836  00A0  0839               	movf	sprintf@sp,w
   837  00A1  0084               	movwf	4
   838  00A2  0831               	movf	??_sprintf,w
   839  00A3  1383               	bcf	3,7	;select IRP bank0
   840  00A4  0080               	movwf	0
   841  00A5                     l1081:
   842  00A5  3001               	movlw	1
   843  00A6  00B1               	movwf	??_sprintf
   844  00A7  0831               	movf	??_sprintf,w
   845  00A8  07B9               	addwf	sprintf@sp,f
   846  00A9                     l1083:
   847                           
   848                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1495:   };D:\File Instal
      +                          l MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   849  00A9  083A               	movf	sprintf@c,w
   850  00AA  00B1               	movwf	??_sprintf
   851  00AB  0831               	movf	??_sprintf,w
   852  00AC  00B6               	movwf	sprintf@prec
   853                           
   854                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
   855  00AD  28E9               	goto	l1091
   856  00AE                     l1085:
   857                           
   858                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1504:    {;D:\File Insta
      +                          ll MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpowers[(unsigned
      +                           char)prec]) % 10 + '0';
   859  00AE  300A               	movlw	10
   860  00AF  00A8               	movwf	___lwmod@divisor
   861  00B0  3000               	movlw	0
   862  00B1  00A9               	movwf	___lwmod@divisor+1
   863  00B2  0836               	movf	sprintf@prec,w
   864  00B3  00B1               	movwf	??_sprintf
   865  00B4  0731               	addwf	??_sprintf,w
   866  00B5  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   867  00B6  0084               	movwf	4
   868  00B7  120A  118A  2223  120A  118A  	fcall	stringdir
   869  00BC  00A0               	movwf	___lwdiv@divisor
   870  00BD  120A  118A  2223  120A  118A  	fcall	stringdir
   871  00C2  00A1               	movwf	___lwdiv@divisor+1
   872  00C3  0838               	movf	sprintf@val+1,w
   873  00C4  00A3               	movwf	___lwdiv@dividend+1
   874  00C5  0837               	movf	sprintf@val,w
   875  00C6  00A2               	movwf	___lwdiv@dividend
   876  00C7  120A  118A  2109  120A  118A  	fcall	___lwdiv
   877  00CC  1283               	bcf	3,5	;RP0=0, select bank0
   878  00CD  1303               	bcf	3,6	;RP1=0, select bank0
   879  00CE  0821               	movf	?___lwdiv+1,w
   880  00CF  00AB               	movwf	___lwmod@dividend+1
   881  00D0  0820               	movf	?___lwdiv,w
   882  00D1  00AA               	movwf	___lwmod@dividend
   883  00D2  120A  118A  218E  120A  118A  	fcall	___lwmod
   884  00D7  1283               	bcf	3,5	;RP0=0, select bank0
   885  00D8  1303               	bcf	3,6	;RP1=0, select bank0
   886  00D9  0828               	movf	?___lwmod,w
   887  00DA  3E30               	addlw	48
   888  00DB  00B2               	movwf	??_sprintf+1
   889  00DC  0832               	movf	??_sprintf+1,w
   890  00DD  00BA               	movwf	sprintf@c
   891  00DE                     l1087:
   892                           
   893                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1549:    };D:\File Insta
      +                          ll MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)));
   894  00DE  083A               	movf	sprintf@c,w
   895  00DF  00B1               	movwf	??_sprintf
   896  00E0  0839               	movf	sprintf@sp,w
   897  00E1  0084               	movwf	4
   898  00E2  0831               	movf	??_sprintf,w
   899  00E3  1383               	bcf	3,7	;select IRP bank0
   900  00E4  0080               	movwf	0
   901  00E5                     l1089:
   902  00E5  3001               	movlw	1
   903  00E6  00B1               	movwf	??_sprintf
   904  00E7  0831               	movf	??_sprintf,w
   905  00E8  07B9               	addwf	sprintf@sp,f
   906  00E9                     l1091:
   907                           
   908                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1500:   while(prec--) {
   909  00E9  30FF               	movlw	255
   910  00EA  00B1               	movwf	??_sprintf
   911  00EB  0831               	movf	??_sprintf,w
   912  00EC  07B6               	addwf	sprintf@prec,f
   913  00ED  0A36               	incf	sprintf@prec,w
   914  00EE  1D03               	btfss	3,2
   915  00EF  28F1               	goto	u541
   916  00F0  28F2               	goto	u540
   917  00F1                     u541:
   918  00F1  28AE               	goto	l1085
   919  00F2                     u540:
   920  00F2                     l1093:
   921                           
   922                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 553:  while((c = *f++)) 
      +                          {
   923  00F2  3001               	movlw	1
   924  00F3  07AE               	addwf	sprintf@f,f
   925  00F4  30FF               	movlw	-1
   926  00F5  072E               	addwf	sprintf@f,w
   927  00F6  0084               	movwf	4
   928  00F7  120A  118A  2223  120A  118A  	fcall	stringdir
   929  00FC  00B1               	movwf	??_sprintf
   930  00FD  0831               	movf	??_sprintf,w
   931  00FE  00BA               	movwf	sprintf@c
   932  00FF  083A               	movf	sprintf@c,w
   933  0100  1D03               	btfss	3,2
   934  0101  2903               	goto	u551
   935  0102  2904               	goto	u550
   936  0103                     u551:
   937  0103  2827               	goto	l1043
   938  0104                     u550:
   939  0104                     l1095:
   940                           
   941                           ;D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   942  0104  0839               	movf	sprintf@sp,w
   943  0105  0084               	movwf	4
   944  0106  1383               	bcf	3,7	;select IRP bank0
   945  0107  0180               	clrf	0
   946  0108                     l197:
   947  0108  0008               	return
   948  0109                     __end_of_sprintf:
   949                           
   950                           	psect	text2
   951  018E                     __ptext2:	
   952 ;; *************** function ___lwmod *****************
   953 ;; Defined at:
   954 ;;		line 5 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\lwmod.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;  divisor         2    8[BANK0 ] unsigned int 
   957 ;;  dividend        2   10[BANK0 ] unsigned int 
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  counter         1   13[BANK0 ] unsigned char 
   960 ;; Return value:  Size  Location     Type
   961 ;;                  2    8[BANK0 ] unsigned int 
   962 ;; Registers used:
   963 ;;		wreg, status,2, status,0
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   969 ;;      Params:         0       4       0       0       0
   970 ;;      Locals:         0       1       0       0       0
   971 ;;      Temps:          0       1       0       0       0
   972 ;;      Totals:         0       6       0       0       0
   973 ;;Total ram usage:        6 bytes
   974 ;; Hardware stack levels used: 1
   975 ;; Hardware stack levels required when called: 4
   976 ;; This function calls:
   977 ;;		Nothing
   978 ;; This function is called by:
   979 ;;		_sprintf
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           
   984                           ;psect for function ___lwmod
   985  018E                     ___lwmod:
   986  018E                     l969:	
   987                           ;incstack = 0
   988                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
   989                           
   990  018E  1283               	bcf	3,5	;RP0=0, select bank0
   991  018F  1303               	bcf	3,6	;RP1=0, select bank0
   992  0190  0828               	movf	___lwmod@divisor,w
   993  0191  0429               	iorwf	___lwmod@divisor+1,w
   994  0192  1903               	btfsc	3,2
   995  0193  2995               	goto	u401
   996  0194  2996               	goto	u400
   997  0195                     u401:
   998  0195  29C5               	goto	l987
   999  0196                     u400:
  1000  0196                     l971:
  1001  0196  01AD               	clrf	___lwmod@counter
  1002  0197  0AAD               	incf	___lwmod@counter,f
  1003  0198  29A4               	goto	l977
  1004  0199                     l973:
  1005  0199  3001               	movlw	1
  1006  019A                     u415:
  1007  019A  1003               	clrc
  1008  019B  0DA8               	rlf	___lwmod@divisor,f
  1009  019C  0DA9               	rlf	___lwmod@divisor+1,f
  1010  019D  3EFF               	addlw	-1
  1011  019E  1D03               	skipz
  1012  019F  299A               	goto	u415
  1013  01A0                     l975:
  1014  01A0  3001               	movlw	1
  1015  01A1  00AC               	movwf	??___lwmod
  1016  01A2  082C               	movf	??___lwmod,w
  1017  01A3  07AD               	addwf	___lwmod@counter,f
  1018  01A4                     l977:
  1019  01A4  1FA9               	btfss	___lwmod@divisor+1,7
  1020  01A5  29A7               	goto	u421
  1021  01A6  29A8               	goto	u420
  1022  01A7                     u421:
  1023  01A7  2999               	goto	l973
  1024  01A8                     u420:
  1025  01A8                     l979:
  1026  01A8  0829               	movf	___lwmod@divisor+1,w
  1027  01A9  022B               	subwf	___lwmod@dividend+1,w
  1028  01AA  1D03               	skipz
  1029  01AB  29AE               	goto	u435
  1030  01AC  0828               	movf	___lwmod@divisor,w
  1031  01AD  022A               	subwf	___lwmod@dividend,w
  1032  01AE                     u435:
  1033  01AE  1C03               	skipc
  1034  01AF  29B1               	goto	u431
  1035  01B0  29B2               	goto	u430
  1036  01B1                     u431:
  1037  01B1  29B8               	goto	l983
  1038  01B2                     u430:
  1039  01B2                     l981:
  1040  01B2  0828               	movf	___lwmod@divisor,w
  1041  01B3  02AA               	subwf	___lwmod@dividend,f
  1042  01B4  0829               	movf	___lwmod@divisor+1,w
  1043  01B5  1C03               	skipc
  1044  01B6  03AB               	decf	___lwmod@dividend+1,f
  1045  01B7  02AB               	subwf	___lwmod@dividend+1,f
  1046  01B8                     l983:
  1047  01B8  3001               	movlw	1
  1048  01B9                     u445:
  1049  01B9  1003               	clrc
  1050  01BA  0CA9               	rrf	___lwmod@divisor+1,f
  1051  01BB  0CA8               	rrf	___lwmod@divisor,f
  1052  01BC  3EFF               	addlw	-1
  1053  01BD  1D03               	skipz
  1054  01BE  29B9               	goto	u445
  1055  01BF                     l985:
  1056  01BF  3001               	movlw	1
  1057  01C0  02AD               	subwf	___lwmod@counter,f
  1058  01C1  1D03               	btfss	3,2
  1059  01C2  29C4               	goto	u451
  1060  01C3  29C5               	goto	u450
  1061  01C4                     u451:
  1062  01C4  29A8               	goto	l979
  1063  01C5                     u450:
  1064  01C5                     l987:
  1065  01C5  082B               	movf	___lwmod@dividend+1,w
  1066  01C6  00A9               	movwf	?___lwmod+1
  1067  01C7  082A               	movf	___lwmod@dividend,w
  1068  01C8  00A8               	movwf	?___lwmod
  1069  01C9                     l483:
  1070  01C9  0008               	return
  1071  01CA                     __end_of___lwmod:
  1072                           
  1073                           	psect	text3
  1074  0109                     __ptext3:	
  1075 ;; *************** function ___lwdiv *****************
  1076 ;; Defined at:
  1077 ;;		line 5 in file "D:\File Install MBLAB IDE\XC8\pic\sources\c90\common\lwdiv.c"
  1078 ;; Parameters:    Size  Location     Type
  1079 ;;  divisor         2    0[BANK0 ] unsigned int 
  1080 ;;  dividend        2    2[BANK0 ] unsigned int 
  1081 ;; Auto vars:     Size  Location     Type
  1082 ;;  quotient        2    5[BANK0 ] unsigned int 
  1083 ;;  counter         1    7[BANK0 ] unsigned char 
  1084 ;; Return value:  Size  Location     Type
  1085 ;;                  2    0[BANK0 ] unsigned int 
  1086 ;; Registers used:
  1087 ;;		wreg, status,2, status,0
  1088 ;; Tracked objects:
  1089 ;;		On entry : 0/0
  1090 ;;		On exit  : 0/0
  1091 ;;		Unchanged: 0/0
  1092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1093 ;;      Params:         0       4       0       0       0
  1094 ;;      Locals:         0       3       0       0       0
  1095 ;;      Temps:          0       1       0       0       0
  1096 ;;      Totals:         0       8       0       0       0
  1097 ;;Total ram usage:        8 bytes
  1098 ;; Hardware stack levels used: 1
  1099 ;; Hardware stack levels required when called: 4
  1100 ;; This function calls:
  1101 ;;		Nothing
  1102 ;; This function is called by:
  1103 ;;		_sprintf
  1104 ;; This function uses a non-reentrant model
  1105 ;;
  1106                           
  1107                           
  1108                           ;psect for function ___lwdiv
  1109  0109                     ___lwdiv:
  1110  0109                     l943:	
  1111                           ;incstack = 0
  1112                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1113                           
  1114  0109  1283               	bcf	3,5	;RP0=0, select bank0
  1115  010A  1303               	bcf	3,6	;RP1=0, select bank0
  1116  010B  01A5               	clrf	___lwdiv@quotient
  1117  010C  01A6               	clrf	___lwdiv@quotient+1
  1118  010D                     l945:
  1119  010D  0820               	movf	___lwdiv@divisor,w
  1120  010E  0421               	iorwf	___lwdiv@divisor+1,w
  1121  010F  1903               	btfsc	3,2
  1122  0110  2912               	goto	u331
  1123  0111  2913               	goto	u330
  1124  0112                     u331:
  1125  0112  294A               	goto	l965
  1126  0113                     u330:
  1127  0113                     l947:
  1128  0113  01A7               	clrf	___lwdiv@counter
  1129  0114  0AA7               	incf	___lwdiv@counter,f
  1130  0115  2921               	goto	l953
  1131  0116                     l949:
  1132  0116  3001               	movlw	1
  1133  0117                     u345:
  1134  0117  1003               	clrc
  1135  0118  0DA0               	rlf	___lwdiv@divisor,f
  1136  0119  0DA1               	rlf	___lwdiv@divisor+1,f
  1137  011A  3EFF               	addlw	-1
  1138  011B  1D03               	skipz
  1139  011C  2917               	goto	u345
  1140  011D                     l951:
  1141  011D  3001               	movlw	1
  1142  011E  00A4               	movwf	??___lwdiv
  1143  011F  0824               	movf	??___lwdiv,w
  1144  0120  07A7               	addwf	___lwdiv@counter,f
  1145  0121                     l953:
  1146  0121  1FA1               	btfss	___lwdiv@divisor+1,7
  1147  0122  2924               	goto	u351
  1148  0123  2925               	goto	u350
  1149  0124                     u351:
  1150  0124  2916               	goto	l949
  1151  0125                     u350:
  1152  0125                     l955:
  1153  0125  3001               	movlw	1
  1154  0126                     u365:
  1155  0126  1003               	clrc
  1156  0127  0DA5               	rlf	___lwdiv@quotient,f
  1157  0128  0DA6               	rlf	___lwdiv@quotient+1,f
  1158  0129  3EFF               	addlw	-1
  1159  012A  1D03               	skipz
  1160  012B  2926               	goto	u365
  1161  012C  0821               	movf	___lwdiv@divisor+1,w
  1162  012D  0223               	subwf	___lwdiv@dividend+1,w
  1163  012E  1D03               	skipz
  1164  012F  2932               	goto	u375
  1165  0130  0820               	movf	___lwdiv@divisor,w
  1166  0131  0222               	subwf	___lwdiv@dividend,w
  1167  0132                     u375:
  1168  0132  1C03               	skipc
  1169  0133  2935               	goto	u371
  1170  0134  2936               	goto	u370
  1171  0135                     u371:
  1172  0135  293D               	goto	l961
  1173  0136                     u370:
  1174  0136                     l957:
  1175  0136  0820               	movf	___lwdiv@divisor,w
  1176  0137  02A2               	subwf	___lwdiv@dividend,f
  1177  0138  0821               	movf	___lwdiv@divisor+1,w
  1178  0139  1C03               	skipc
  1179  013A  03A3               	decf	___lwdiv@dividend+1,f
  1180  013B  02A3               	subwf	___lwdiv@dividend+1,f
  1181  013C                     l959:
  1182  013C  1425               	bsf	___lwdiv@quotient,0
  1183  013D                     l961:
  1184  013D  3001               	movlw	1
  1185  013E                     u385:
  1186  013E  1003               	clrc
  1187  013F  0CA1               	rrf	___lwdiv@divisor+1,f
  1188  0140  0CA0               	rrf	___lwdiv@divisor,f
  1189  0141  3EFF               	addlw	-1
  1190  0142  1D03               	skipz
  1191  0143  293E               	goto	u385
  1192  0144                     l963:
  1193  0144  3001               	movlw	1
  1194  0145  02A7               	subwf	___lwdiv@counter,f
  1195  0146  1D03               	btfss	3,2
  1196  0147  2949               	goto	u391
  1197  0148  294A               	goto	u390
  1198  0149                     u391:
  1199  0149  2925               	goto	l955
  1200  014A                     u390:
  1201  014A                     l965:
  1202  014A  0826               	movf	___lwdiv@quotient+1,w
  1203  014B  00A1               	movwf	?___lwdiv+1
  1204  014C  0825               	movf	___lwdiv@quotient,w
  1205  014D  00A0               	movwf	?___lwdiv
  1206  014E                     l473:
  1207  014E  0008               	return
  1208  014F                     __end_of___lwdiv:
  1209                           
  1210                           	psect	text4
  1211  0201                     __ptext4:	
  1212 ;; *************** function _UART_Transmit_Text *****************
  1213 ;; Defined at:
  1214 ;;		line 66 in file "newmain.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  str             1    wreg     PTR unsigned char 
  1217 ;;		 -> main@text(20), RX_Buffer(50), 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;  str             1    3[BANK0 ] PTR unsigned char 
  1220 ;;		 -> main@text(20), RX_Buffer(50), 
  1221 ;;  i               1    2[BANK0 ] unsigned char 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1231 ;;      Params:         0       0       0       0       0
  1232 ;;      Locals:         0       2       0       0       0
  1233 ;;      Temps:          0       1       0       0       0
  1234 ;;      Totals:         0       3       0       0       0
  1235 ;;Total ram usage:        3 bytes
  1236 ;; Hardware stack levels used: 1
  1237 ;; Hardware stack levels required when called: 5
  1238 ;; This function calls:
  1239 ;;		_UART_Transmit
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           
  1246                           ;psect for function _UART_Transmit_Text
  1247  0201                     _UART_Transmit_Text:
  1248                           
  1249                           ;incstack = 0
  1250                           ; Regs used in _UART_Transmit_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1251                           ;UART_Transmit_Text@str stored from wreg
  1252  0201  1283               	bcf	3,5	;RP0=0, select bank0
  1253  0202  1303               	bcf	3,6	;RP1=0, select bank0
  1254  0203  00A3               	movwf	UART_Transmit_Text@str
  1255  0204                     l1017:
  1256                           
  1257                           ;newmain.c: 66: void UART_Transmit_Text(char *str);newmain.c: 67: {;newmain.c: 68:     u
      +                          nsigned char i=0;
  1258  0204  01A2               	clrf	UART_Transmit_Text@i
  1259                           
  1260                           ;newmain.c: 69:     while(str[i] != 0)
  1261  0205  2A17               	goto	l1023
  1262  0206                     l1019:
  1263                           
  1264                           ;newmain.c: 70:     {;newmain.c: 71:         UART_Transmit(str[i]);
  1265  0206  0822               	movf	UART_Transmit_Text@i,w
  1266  0207  0723               	addwf	UART_Transmit_Text@str,w
  1267  0208  00A1               	movwf	??_UART_Transmit_Text
  1268  0209  0821               	movf	??_UART_Transmit_Text,w
  1269  020A  0084               	movwf	4
  1270  020B  0800               	movf	0,w
  1271  020C  120A  118A  2287  120A  118A  	fcall	_UART_Transmit
  1272  0211                     l1021:
  1273                           
  1274                           ;newmain.c: 72:         i++;
  1275  0211  3001               	movlw	1
  1276  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1277  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1278  0214  00A1               	movwf	??_UART_Transmit_Text
  1279  0215  0821               	movf	??_UART_Transmit_Text,w
  1280  0216  07A2               	addwf	UART_Transmit_Text@i,f
  1281  0217                     l1023:
  1282                           
  1283                           ;newmain.c: 69:     while(str[i] != 0)
  1284  0217  0822               	movf	UART_Transmit_Text@i,w
  1285  0218  0723               	addwf	UART_Transmit_Text@str,w
  1286  0219  00A1               	movwf	??_UART_Transmit_Text
  1287  021A  0821               	movf	??_UART_Transmit_Text,w
  1288  021B  0084               	movwf	4
  1289  021C  1383               	bcf	3,7	;select IRP bank0
  1290  021D  0800               	movf	0,w
  1291  021E  1D03               	btfss	3,2
  1292  021F  2A21               	goto	u471
  1293  0220  2A22               	goto	u470
  1294  0221                     u471:
  1295  0221  2A06               	goto	l1019
  1296  0222                     u470:
  1297  0222                     l56:
  1298  0222  0008               	return
  1299  0223                     __end_of_UART_Transmit_Text:
  1300                           
  1301                           	psect	text5
  1302  0287                     __ptext5:	
  1303 ;; *************** function _UART_Transmit *****************
  1304 ;; Defined at:
  1305 ;;		line 61 in file "newmain.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  c               1    wreg     unsigned char 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  c               1    0[BANK0 ] unsigned char 
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1319 ;;      Params:         0       0       0       0       0
  1320 ;;      Locals:         0       1       0       0       0
  1321 ;;      Temps:          0       0       0       0       0
  1322 ;;      Totals:         0       1       0       0       0
  1323 ;;Total ram usage:        1 bytes
  1324 ;; Hardware stack levels used: 1
  1325 ;; Hardware stack levels required when called: 4
  1326 ;; This function calls:
  1327 ;;		Nothing
  1328 ;; This function is called by:
  1329 ;;		_UART_Transmit_Text
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           
  1334                           ;psect for function _UART_Transmit
  1335  0287                     _UART_Transmit:
  1336                           
  1337                           ;incstack = 0
  1338                           ; Regs used in _UART_Transmit: [wreg]
  1339                           ;UART_Transmit@c stored from wreg
  1340  0287  1283               	bcf	3,5	;RP0=0, select bank0
  1341  0288  1303               	bcf	3,6	;RP1=0, select bank0
  1342  0289  00A0               	movwf	UART_Transmit@c
  1343  028A                     l939:
  1344  028A                     l47:	
  1345                           ;newmain.c: 61: void UART_Transmit(char c);newmain.c: 62: {;newmain.c: 63:     while(!TR
      +                          MT);
  1346                           
  1347  028A  1683               	bsf	3,5	;RP0=1, select bank1
  1348  028B  1303               	bcf	3,6	;RP1=0, select bank1
  1349  028C  1C98               	btfss	24,1	;volatile
  1350  028D  2A8F               	goto	u321
  1351  028E  2A90               	goto	u320
  1352  028F                     u321:
  1353  028F  2A8A               	goto	l47
  1354  0290                     u320:
  1355  0290                     l941:
  1356                           
  1357                           ;newmain.c: 64:     TXREG = c;
  1358  0290  1283               	bcf	3,5	;RP0=0, select bank0
  1359  0291  1303               	bcf	3,6	;RP1=0, select bank0
  1360  0292  0820               	movf	UART_Transmit@c,w
  1361  0293  0099               	movwf	25	;volatile
  1362  0294                     l50:
  1363  0294  0008               	return
  1364  0295                     __end_of_UART_Transmit:
  1365                           
  1366                           	psect	text6
  1367  0262                     __ptext6:	
  1368 ;; *************** function _UART_Init *****************
  1369 ;; Defined at:
  1370 ;;		line 50 in file "newmain.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;		None
  1373 ;; Auto vars:     Size  Location     Type
  1374 ;;		None
  1375 ;; Return value:  Size  Location     Type
  1376 ;;                  1    wreg      void 
  1377 ;; Registers used:
  1378 ;;		wreg
  1379 ;; Tracked objects:
  1380 ;;		On entry : 0/0
  1381 ;;		On exit  : 0/0
  1382 ;;		Unchanged: 0/0
  1383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1384 ;;      Params:         0       0       0       0       0
  1385 ;;      Locals:         0       0       0       0       0
  1386 ;;      Temps:          0       0       0       0       0
  1387 ;;      Totals:         0       0       0       0       0
  1388 ;;Total ram usage:        0 bytes
  1389 ;; Hardware stack levels used: 1
  1390 ;; Hardware stack levels required when called: 4
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_main
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           
  1399                           ;psect for function _UART_Init
  1400  0262                     _UART_Init:
  1401  0262                     l1003:	
  1402                           ;incstack = 0
  1403                           ; Regs used in _UART_Init: [wreg]
  1404                           
  1405                           
  1406                           ;newmain.c: 53:     SPBRG = 32;
  1407  0262  3020               	movlw	32
  1408  0263  1683               	bsf	3,5	;RP0=1, select bank1
  1409  0264  1303               	bcf	3,6	;RP1=0, select bank1
  1410  0265  0099               	movwf	25	;volatile
  1411  0266                     l1005:
  1412                           
  1413                           ;newmain.c: 54:     SPEN = 1;
  1414  0266  1283               	bcf	3,5	;RP0=0, select bank0
  1415  0267  1303               	bcf	3,6	;RP1=0, select bank0
  1416  0268  1798               	bsf	24,7	;volatile
  1417  0269                     l1007:
  1418                           
  1419                           ;newmain.c: 55:     TXEN = 1;
  1420  0269  1683               	bsf	3,5	;RP0=1, select bank1
  1421  026A  1303               	bcf	3,6	;RP1=0, select bank1
  1422  026B  1698               	bsf	24,5	;volatile
  1423  026C                     l1009:
  1424                           
  1425                           ;newmain.c: 56:     CREN = 1;
  1426  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1427  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1428  026E  1618               	bsf	24,4	;volatile
  1429  026F                     l1011:
  1430                           
  1431                           ;newmain.c: 57:     RCIE = 1;
  1432  026F  1683               	bsf	3,5	;RP0=1, select bank1
  1433  0270  1303               	bcf	3,6	;RP1=0, select bank1
  1434  0271  168C               	bsf	12,5	;volatile
  1435  0272                     l1013:
  1436                           
  1437                           ;newmain.c: 58:     INTCONbits.GIE = 1;
  1438  0272  178B               	bsf	11,7	;volatile
  1439  0273                     l1015:
  1440                           
  1441                           ;newmain.c: 59:     INTCONbits.PEIE = 1;
  1442  0273  170B               	bsf	11,6	;volatile
  1443  0274                     l44:
  1444  0274  0008               	return
  1445  0275                     __end_of_UART_Init:
  1446                           
  1447                           	psect	text7
  1448  02A1                     __ptext7:	
  1449 ;; *************** function _IO_Init *****************
  1450 ;; Defined at:
  1451 ;;		line 43 in file "newmain.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;		None
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;		None
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  1    wreg      void 
  1458 ;; Registers used:
  1459 ;;		status,2
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1465 ;;      Params:         0       0       0       0       0
  1466 ;;      Locals:         0       0       0       0       0
  1467 ;;      Temps:          0       0       0       0       0
  1468 ;;      Totals:         0       0       0       0       0
  1469 ;;Total ram usage:        0 bytes
  1470 ;; Hardware stack levels used: 1
  1471 ;; Hardware stack levels required when called: 4
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		_main
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           
  1480                           ;psect for function _IO_Init
  1481  02A1                     _IO_Init:
  1482  02A1                     l999:	
  1483                           ;incstack = 0
  1484                           ; Regs used in _IO_Init: [status,2]
  1485                           
  1486                           
  1487                           ;newmain.c: 45:     TRISCbits.TRISC6 = 0;
  1488  02A1  1683               	bsf	3,5	;RP0=1, select bank1
  1489  02A2  1303               	bcf	3,6	;RP1=0, select bank1
  1490  02A3  1307               	bcf	7,6	;volatile
  1491                           
  1492                           ;newmain.c: 46:     TRISCbits.TRISC7 = 1;
  1493  02A4  1787               	bsf	7,7	;volatile
  1494  02A5                     l1001:
  1495                           
  1496                           ;newmain.c: 47:     TRISB = 0;
  1497  02A5  0186               	clrf	6	;volatile
  1498                           
  1499                           ;newmain.c: 48:     PORTB = 0x00;
  1500  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  1501  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  1502  02A8  0186               	clrf	6	;volatile
  1503  02A9                     l41:
  1504  02A9  0008               	return
  1505  02AA                     __end_of_IO_Init:
  1506                           
  1507                           	psect	text8
  1508  01CA                     __ptext8:	
  1509 ;; *************** function _isr1 *****************
  1510 ;; Defined at:
  1511 ;;		line 119 in file "newmain.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  ReceivedData    1    9[COMMON] unsigned char 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1525 ;;      Params:         0       0       0       0       0
  1526 ;;      Locals:         1       0       0       0       0
  1527 ;;      Temps:          4       0       0       0       0
  1528 ;;      Totals:         5       0       0       0       0
  1529 ;;Total ram usage:        5 bytes
  1530 ;; Hardware stack levels used: 1
  1531 ;; Hardware stack levels required when called: 3
  1532 ;; This function calls:
  1533 ;;		_ClearRX_Buffer
  1534 ;;		_HandleData
  1535 ;; This function is called by:
  1536 ;;		Interrupt level 1
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           
  1541                           ;psect for function _isr1
  1542  01CA                     _isr1:
  1543  01CA                     i1l1129:
  1544                           
  1545                           ;newmain.c: 121:     if(RCIE)
  1546  01CA  1683               	bsf	3,5	;RP0=1, select bank1
  1547  01CB  1303               	bcf	3,6	;RP1=0, select bank1
  1548  01CC  1E8C               	btfss	12,5	;volatile
  1549  01CD  29CF               	goto	u58_21
  1550  01CE  29D0               	goto	u58_20
  1551  01CF                     u58_21:
  1552  01CF  29F8               	goto	i1l87
  1553  01D0                     u58_20:
  1554  01D0                     i1l1131:
  1555                           
  1556                           ;newmain.c: 122:     {;newmain.c: 123:         if(RCIF)
  1557  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1558  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1559  01D2  1E8C               	btfss	12,5	;volatile
  1560  01D3  29D5               	goto	u59_21
  1561  01D4  29D6               	goto	u59_20
  1562  01D5                     u59_21:
  1563  01D5  29F8               	goto	i1l87
  1564  01D6                     u59_20:
  1565  01D6                     i1l1133:
  1566                           
  1567                           ;newmain.c: 124:         {;newmain.c: 125:             char ReceivedData;;newmain.c: 126
      +                          :             ReceivedData = RCREG;
  1568  01D6  081A               	movf	26,w	;volatile
  1569  01D7  00F5               	movwf	??_isr1
  1570  01D8  0875               	movf	??_isr1,w
  1571  01D9  00F9               	movwf	isr1@ReceivedData
  1572  01DA                     i1l1135:
  1573                           
  1574                           ;newmain.c: 127:             if(ReceivedData != '\n')
  1575  01DA  300A               	movlw	10
  1576  01DB  0679               	xorwf	isr1@ReceivedData,w
  1577  01DC  1903               	btfsc	3,2
  1578  01DD  29DF               	goto	u60_21
  1579  01DE  29E0               	goto	u60_20
  1580  01DF                     u60_21:
  1581  01DF  29ED               	goto	i1l1141
  1582  01E0                     u60_20:
  1583  01E0                     i1l1137:
  1584                           
  1585                           ;newmain.c: 128:             {;newmain.c: 129:                 RX_Buffer[rx_index++] = R
      +                          CREG;
  1586  01E0  081A               	movf	26,w	;volatile
  1587  01E1  00F5               	movwf	??_isr1
  1588  01E2  087A               	movf	_rx_index,w
  1589  01E3  3EA0               	addlw	(low (_RX_Buffer| 0))& (0+255)
  1590  01E4  0084               	movwf	4
  1591  01E5  0875               	movf	??_isr1,w
  1592  01E6  1383               	bcf	3,7	;select IRP bank1
  1593  01E7  0080               	movwf	0
  1594  01E8                     i1l1139:
  1595  01E8  3001               	movlw	1
  1596  01E9  00F5               	movwf	??_isr1
  1597  01EA  0875               	movf	??_isr1,w
  1598  01EB  07FA               	addwf	_rx_index,f
  1599                           
  1600                           ;newmain.c: 130:             }
  1601  01EC  29F8               	goto	i1l87
  1602  01ED                     i1l1141:
  1603                           
  1604                           ;newmain.c: 132:             {;newmain.c: 133:                 HandleData(RX_Buffer);
  1605  01ED  30A0               	movlw	(low (_RX_Buffer| 0))& (0+255)
  1606  01EE  120A  118A  22B2  120A  118A  	fcall	_HandleData
  1607                           
  1608                           ;newmain.c: 134:                 ClearRX_Buffer();
  1609  01F3  120A  118A  2275  120A  118A  	fcall	_ClearRX_Buffer
  1610  01F8                     i1l87:
  1611  01F8  0878               	movf	??_isr1+3,w
  1612  01F9  008A               	movwf	10
  1613  01FA  0877               	movf	??_isr1+2,w
  1614  01FB  0084               	movwf	4
  1615  01FC  0E76               	swapf	??_isr1+1,w
  1616  01FD  0083               	movwf	3
  1617  01FE  0EFE               	swapf	btemp,f
  1618  01FF  0E7E               	swapf	btemp,w
  1619  0200  0009               	retfie
  1620  0201                     __end_of_isr1:
  1621                           
  1622                           	psect	intentry
  1623  0004                     __pintentry:	
  1624                           ;incstack = 0
  1625                           ; Regs used in _isr1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1626                           
  1627  0004                     interrupt_function:
  1628  007E                     saved_w	set	btemp
  1629  0004  00FE               	movwf	btemp
  1630  0005  0E03               	swapf	3,w
  1631  0006  00F6               	movwf	??_isr1+1
  1632  0007  0804               	movf	4,w
  1633  0008  00F7               	movwf	??_isr1+2
  1634  0009  080A               	movf	10,w
  1635  000A  00F8               	movwf	??_isr1+3
  1636  000B  120A  118A  29CA   	ljmp	_isr1
  1637                           
  1638                           	psect	text9
  1639  02B2                     __ptext9:	
  1640 ;; *************** function _HandleData *****************
  1641 ;; Defined at:
  1642 ;;		line 92 in file "newmain.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  RX              1    wreg     PTR unsigned char 
  1645 ;;		 -> RX_Buffer(50), 
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  RX              1    4[COMMON] PTR unsigned char 
  1648 ;;		 -> RX_Buffer(50), 
  1649 ;; Return value:  Size  Location     Type
  1650 ;;                  1    wreg      void 
  1651 ;; Registers used:
  1652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1653 ;; Tracked objects:
  1654 ;;		On entry : 0/0
  1655 ;;		On exit  : 0/0
  1656 ;;		Unchanged: 0/0
  1657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1658 ;;      Params:         0       0       0       0       0
  1659 ;;      Locals:         1       0       0       0       0
  1660 ;;      Temps:          0       0       0       0       0
  1661 ;;      Totals:         1       0       0       0       0
  1662 ;;Total ram usage:        1 bytes
  1663 ;; Hardware stack levels used: 1
  1664 ;; Hardware stack levels required when called: 2
  1665 ;; This function calls:
  1666 ;;		i1_UART_Transmit_Text
  1667 ;; This function is called by:
  1668 ;;		_isr1
  1669 ;;		_UART_Receive
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           
  1674                           ;psect for function _HandleData
  1675  02B2                     _HandleData:
  1676                           
  1677                           ;incstack = 0
  1678                           ; Regs used in _HandleData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1679                           ;HandleData@RX stored from wreg
  1680  02B2  00F4               	movwf	HandleData@RX
  1681  02B3                     i1l1025:
  1682                           
  1683                           ;newmain.c: 92: void HandleData(char *RX);newmain.c: 93: {;newmain.c: 94:     UART_Trans
      +                          mit_Text(RX);
  1684  02B3  0874               	movf	HandleData@RX,w
  1685  02B4  120A  118A  2244  120A  118A  	fcall	i1_UART_Transmit_Text
  1686  02B9                     i1l65:
  1687  02B9  0008               	return
  1688  02BA                     __end_of_HandleData:
  1689                           
  1690                           	psect	text10
  1691  0244                     __ptext10:	
  1692 ;; *************** function i1_UART_Transmit_Text *****************
  1693 ;; Defined at:
  1694 ;;		line 66 in file "newmain.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;  str             1    wreg     PTR unsigned char 
  1697 ;;		 -> main@text(20), RX_Buffer(50), 
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;  str             1    2[COMMON] PTR unsigned char 
  1700 ;;		 -> main@text(20), RX_Buffer(50), 
  1701 ;;  i               1    3[COMMON] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1711 ;;      Params:         0       0       0       0       0
  1712 ;;      Locals:         2       0       0       0       0
  1713 ;;      Temps:          1       0       0       0       0
  1714 ;;      Totals:         3       0       0       0       0
  1715 ;;Total ram usage:        3 bytes
  1716 ;; Hardware stack levels used: 1
  1717 ;; Hardware stack levels required when called: 1
  1718 ;; This function calls:
  1719 ;;		i1_UART_Transmit
  1720 ;; This function is called by:
  1721 ;;		_HandleData
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           
  1726                           ;psect for function i1_UART_Transmit_Text
  1727  0244                     i1_UART_Transmit_Text:
  1728                           
  1729                           ;incstack = 0
  1730                           ; Regs used in i1_UART_Transmit_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1731                           ;i1UART_Transmit_Text@str stored from wreg
  1732  0244  00F2               	movwf	i1UART_Transmit_Text@str
  1733  0245                     i1l991:
  1734                           
  1735                           ;newmain.c: 66: void UART_Transmit_Text(char *str);newmain.c: 67: {;newmain.c: 68:     u
      +                          nsigned char i=0;
  1736  0245  01F3               	clrf	i1UART_Transmit_Text@i
  1737                           
  1738                           ;newmain.c: 69:     while(str[i] != 0)
  1739  0246  2A56               	goto	i1l997
  1740  0247                     i1l993:
  1741                           
  1742                           ;newmain.c: 70:     {;newmain.c: 71:         UART_Transmit(str[i]);
  1743  0247  0873               	movf	i1UART_Transmit_Text@i,w
  1744  0248  0772               	addwf	i1UART_Transmit_Text@str,w
  1745  0249  00F1               	movwf	??i1_UART_Transmit_Text
  1746  024A  0871               	movf	??i1_UART_Transmit_Text,w
  1747  024B  0084               	movwf	4
  1748  024C  0800               	movf	0,w
  1749  024D  120A  118A  2295  120A  118A  	fcall	i1_UART_Transmit
  1750  0252                     i1l995:
  1751                           
  1752                           ;newmain.c: 72:         i++;
  1753  0252  3001               	movlw	1
  1754  0253  00F1               	movwf	??i1_UART_Transmit_Text
  1755  0254  0871               	movf	??i1_UART_Transmit_Text,w
  1756  0255  07F3               	addwf	i1UART_Transmit_Text@i,f
  1757  0256                     i1l997:
  1758                           
  1759                           ;newmain.c: 69:     while(str[i] != 0)
  1760  0256  0873               	movf	i1UART_Transmit_Text@i,w
  1761  0257  0772               	addwf	i1UART_Transmit_Text@str,w
  1762  0258  00F1               	movwf	??i1_UART_Transmit_Text
  1763  0259  0871               	movf	??i1_UART_Transmit_Text,w
  1764  025A  0084               	movwf	4
  1765  025B  1383               	bcf	3,7	;select IRP bank0
  1766  025C  0800               	movf	0,w
  1767  025D  1D03               	btfss	3,2
  1768  025E  2A60               	goto	u46_21
  1769  025F  2A61               	goto	u46_20
  1770  0260                     u46_21:
  1771  0260  2A47               	goto	i1l993
  1772  0261                     u46_20:
  1773  0261                     i1l56:
  1774  0261  0008               	return
  1775  0262                     __end_ofi1_UART_Transmit_Text:
  1776                           
  1777                           	psect	text11
  1778  0295                     __ptext11:	
  1779 ;; *************** function i1_UART_Transmit *****************
  1780 ;; Defined at:
  1781 ;;		line 61 in file "newmain.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;  c               1    wreg     unsigned char 
  1784 ;; Auto vars:     Size  Location     Type
  1785 ;;  c               1    0[COMMON] unsigned char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  1    wreg      void 
  1788 ;; Registers used:
  1789 ;;		wreg
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1795 ;;      Params:         0       0       0       0       0
  1796 ;;      Locals:         1       0       0       0       0
  1797 ;;      Temps:          0       0       0       0       0
  1798 ;;      Totals:         1       0       0       0       0
  1799 ;;Total ram usage:        1 bytes
  1800 ;; Hardware stack levels used: 1
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		i1_UART_Transmit_Text
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           
  1809                           ;psect for function i1_UART_Transmit
  1810  0295                     i1_UART_Transmit:
  1811                           
  1812                           ;incstack = 0
  1813                           ; Regs used in i1_UART_Transmit: [wreg]
  1814                           ;i1UART_Transmit@c stored from wreg
  1815  0295  00F0               	movwf	i1UART_Transmit@c
  1816  0296                     i1l935:
  1817  0296                     i1l47:	
  1818                           ;newmain.c: 61: void UART_Transmit(char c);newmain.c: 62: {;newmain.c: 63:     while(!TR
      +                          MT);
  1819                           
  1820  0296  1683               	bsf	3,5	;RP0=1, select bank1
  1821  0297  1303               	bcf	3,6	;RP1=0, select bank1
  1822  0298  1C98               	btfss	24,1	;volatile
  1823  0299  2A9B               	goto	u31_21
  1824  029A  2A9C               	goto	u31_20
  1825  029B                     u31_21:
  1826  029B  2A96               	goto	i1l47
  1827  029C                     u31_20:
  1828  029C                     i1l937:
  1829                           
  1830                           ;newmain.c: 64:     TXREG = c;
  1831  029C  0870               	movf	i1UART_Transmit@c,w
  1832  029D  1283               	bcf	3,5	;RP0=0, select bank0
  1833  029E  1303               	bcf	3,6	;RP1=0, select bank0
  1834  029F  0099               	movwf	25	;volatile
  1835  02A0                     i1l50:
  1836  02A0  0008               	return
  1837  02A1                     __end_ofi1_UART_Transmit:
  1838                           
  1839                           	psect	text12
  1840  0275                     __ptext12:	
  1841 ;; *************** function _ClearRX_Buffer *****************
  1842 ;; Defined at:
  1843 ;;		line 96 in file "newmain.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;		None
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;  i               1    1[COMMON] unsigned char 
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      void 
  1850 ;; Registers used:
  1851 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1857 ;;      Params:         0       0       0       0       0
  1858 ;;      Locals:         1       0       0       0       0
  1859 ;;      Temps:          1       0       0       0       0
  1860 ;;      Totals:         2       0       0       0       0
  1861 ;;Total ram usage:        2 bytes
  1862 ;; Hardware stack levels used: 1
  1863 ;; This function calls:
  1864 ;;		Nothing
  1865 ;; This function is called by:
  1866 ;;		_isr1
  1867 ;;		_UART_Receive
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _ClearRX_Buffer
  1873  0275                     _ClearRX_Buffer:
  1874  0275                     i1l1027:	
  1875                           ;incstack = 0
  1876                           ; Regs used in _ClearRX_Buffer: [wreg-fsr0h+status,2+status,0]
  1877                           
  1878                           
  1879                           ;newmain.c: 98:  char i;;newmain.c: 99:  for(i = 0; i < 50; i++)
  1880  0275  01F1               	clrf	ClearRX_Buffer@i
  1881  0276                     i1l1033:
  1882                           
  1883                           ;newmain.c: 100:  {;newmain.c: 101:   RX_Buffer[i] = 0;
  1884  0276  0871               	movf	ClearRX_Buffer@i,w
  1885  0277  3EA0               	addlw	(low (_RX_Buffer| 0))& (0+255)
  1886  0278  0084               	movwf	4
  1887  0279  1383               	bcf	3,7	;select IRP bank1
  1888  027A  0180               	clrf	0
  1889  027B                     i1l1035:
  1890                           
  1891                           ;newmain.c: 102:  }
  1892  027B  3001               	movlw	1
  1893  027C  00F0               	movwf	??_ClearRX_Buffer
  1894  027D  0870               	movf	??_ClearRX_Buffer,w
  1895  027E  07F1               	addwf	ClearRX_Buffer@i,f
  1896  027F                     i1l1037:
  1897  027F  3032               	movlw	50
  1898  0280  0271               	subwf	ClearRX_Buffer@i,w
  1899  0281  1C03               	skipc
  1900  0282  2A84               	goto	u48_21
  1901  0283  2A85               	goto	u48_20
  1902  0284                     u48_21:
  1903  0284  2A76               	goto	i1l1033
  1904  0285                     u48_20:
  1905  0285                     i1l1039:
  1906                           
  1907                           ;newmain.c: 103:  rx_index = 0;
  1908  0285  01FA               	clrf	_rx_index
  1909  0286                     i1l70:
  1910  0286  0008               	return
  1911  0287                     __end_of_ClearRX_Buffer:
  1912  007E                     btemp	set	126	;btemp
  1913  007E                     wtemp0	set	126
  1914                           
  1915                           	psect	config
  1916                           
  1917                           ;Config register CONFIG @ 0x2007
  1918                           ;	Oscillator Selection bits
  1919                           ;	FOSC = HS, HS oscillator
  1920                           ;	Watchdog Timer Enable bit
  1921                           ;	WDTE = OFF, WDT disabled
  1922                           ;	Power-up Timer Enable bit
  1923                           ;	PWRTE = OFF, PWRT disabled
  1924                           ;	Brown-out Reset Enable bit
  1925                           ;	BOREN = OFF, BOR disabled
  1926                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1927                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1928                           ;	Data EEPROM Memory Code Protection bit
  1929                           ;	CPD = OFF, Data EEPROM code protection off
  1930                           ;	Flash Program Memory Write Enable bits
  1931                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1932                           ;	In-Circuit Debugger Mode bit
  1933                           ;	DEBUG = 0x1, unprogrammed default
  1934                           ;	Flash Program Memory Code Protection bit
  1935                           ;	CP = OFF, Code protection off
  1936  2007                     	org	8199
  1937  2007  3F3A               	dw	16186

Data Sizes:
    Strings     17
    Constant    10
    Data        0
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      11
    BANK0            80     52      52
    BANK1            80      0      50
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@text(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    HandleData@RX	PTR unsigned char  size(1) Largest target is 50
		 -> RX_Buffer(BANK1[50]), 

    UART_Transmit_Text@str	PTR unsigned char  size(1) Largest target is 50
		 -> main@text(BANK0[20]), RX_Buffer(BANK1[50]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr1 in COMMON

    _isr1->_HandleData
    _HandleData->i1_UART_Transmit_Text
    i1_UART_Transmit_Text->i1_UART_Transmit

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _UART_Transmit_Text->_UART_Transmit

Critical Paths under _isr1 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr1 in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr1 in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr1 in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    1469
                                             27 BANK0     25    25      0
                            _IO_Init
                          _UART_Init
                 _UART_Transmit_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                             14 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_Transmit_Text                                   3     3      0     178
                                              1 BANK0      3     3      0
                      _UART_Transmit
 ---------------------------------------------------------------------------------
 (2) _UART_Transmit                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IO_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr1                                                 5     5      0     291
                                              5 COMMON     5     5      0
                     _ClearRX_Buffer
                         _HandleData
 ---------------------------------------------------------------------------------
 (4) _HandleData                                           1     1      0     200
                                              4 COMMON     1     1      0
               i1_UART_Transmit_Text
 ---------------------------------------------------------------------------------
 (5) i1_UART_Transmit_Text                                 3     3      0     112
                                              1 COMMON     3     3      0
                    i1_UART_Transmit
 ---------------------------------------------------------------------------------
 (6) i1_UART_Transmit                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ClearRX_Buffer                                       2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _IO_Init
   _UART_Init
   _UART_Transmit_Text
     _UART_Transmit
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr1 (ROOT)
   _ClearRX_Buffer
   _HandleData
     i1_UART_Transmit_Text
       i1_UART_Transmit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      71       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     34      34       5       65.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      32       7       62.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      71      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jan 26 08:40:15 2022

                            pc 0002                             l41 02A9                             l50 0294  
                           l44 0274                             l47 028A                             l56 0222  
                           fsr 0004                            l197 0108                            l473 014E  
                          l483 01C9                            l941 0290                            l951 011D  
                          l943 0109                            l961 013D                            l953 0121  
                          l945 010D                            l939 028A                            l963 0144  
                          l955 0125                            l947 0113                            l971 0196  
                          l957 0136                            l949 0116                            l965 014A  
                          l981 01B2                            l973 0199                            l959 013C  
                          l983 01B8                            l975 01A0                            l985 01BF  
                          l977 01A4                            l969 018E                            l979 01A8  
                          l987 01C5                            l999 02A1                            u320 0290  
                          u400 0196                            u321 028F                            u401 0195  
                          u330 0113                            u331 0112                            u420 01A8  
                          u500 0067                            u421 01A7                            u501 0066  
                          u350 0125                            u430 01B2                            u510 008D  
                          u351 0124                            u431 01B1                            u415 019A  
                          u511 008C                            u520 0098                            u345 0117  
                          u521 0097                            u370 0136                            u450 01C5  
                          u530 009E                            u371 0135                            u451 01C4  
                          u435 01AE                            u531 009D                            u515 0089  
                          u540 00F2                            u365 0126                            u445 01B9  
                          u541 00F1                            u470 0222                            u390 014A  
                          u550 0104                            u471 0221                            u391 0149  
                          u375 0132                            u551 0103                            u385 013E  
                          u617 0183                            u490 002D                            u491 002C  
                          fsr0 0004                            indf 0000                           l1001 02A5  
                         l1011 026F                           l1003 0262                           l1013 0272  
                         l1005 0266                           l1021 0211                           l1015 0273  
                         l1007 0269                           l1023 0217                           l1009 026C  
                         l1017 0204                           l1041 0022                           l1121 015D  
                         l1019 0206                           l1043 0027                           l1123 016D  
                         l1115 014F                           l1061 0067                           l1053 003A  
                         l1045 002D                           l1125 0175                           l1117 0154  
                         l1071 0072                           l1063 006B                           l1055 0057  
                         l1047 0034                           l1127 017B                           l1119 0159  
                         l1081 00A5                           l1065 0070                           l1057 005F  
                         l1049 0039                           l1091 00E9                           l1083 00A9  
                         l1075 008E                           l1059 0063                           l1163 004C  
                         l1085 00AE                           l1077 0098                           l1093 00F2  
                         l1087 00DE                           l1079 009E                           l1095 0104  
                         l1089 00E5                           STR_1 0233                           _CREN 00C4  
                         i1l50 02A0                           _RCIE 0465                           _RCIF 0065  
                         i1l70 0286                           i1l47 0296                           i1l56 0261  
                         i1l65 02B9                           i1l87 01F8                           _SPEN 00C7  
                         _TRMT 04C1                           _TXEN 04C5                __end_of_IO_Init 02AA  
                         _isr1 01CA                           _main 014F                           btemp 007E  
                         start 000E     __end_of_UART_Transmit_Text 0223                     _HandleData 02B2  
                        ?_isr1 0070                          ?_main 0070                __end_of___lwdiv 014F  
              __end_of___lwmod 01CA                          i1l935 0296                          i1l937 029C  
                        i1l991 0245                          i1l993 0247                          i1l995 0252  
                        i1l997 0256                          _RCREG 001A                          u31_20 029C  
                        u31_21 029B               isr1@ReceivedData 0079                          _SPBRG 0099  
                        _PORTB 0006                          u60_20 01E0                          u60_21 01DF  
                        u46_20 0261                          u46_21 0260                          u48_20 0285  
                        u48_21 0284                          _TRISB 0086                          u58_20 01D0  
                        u58_21 01CF                          u59_20 01D6                          u59_21 01D5  
                        _TXREG 0019           i1_UART_Transmit_Text 0244             __size_of_UART_Init 0013  
              __end_of_dpowers 0233                          main@i 0052                          pclath 000A  
                        status 0003                          wtemp0 007E                __end_of_sprintf 0109  
             ?i1_UART_Transmit 0070                __initialization 0011                   __end_of_isr1 0201  
                 __end_of_main 018E                         ??_isr1 0075                         ??_main 003B  
        ?i1_UART_Transmit_Text 0070                      ??_IO_Init 0020                         i1l1033 0276  
                       i1l1025 02B3                         i1l1035 027B                         i1l1027 0275  
                       i1l1131 01D0                         i1l1037 027F                         i1l1141 01ED  
                       i1l1133 01D6                         i1l1039 0285                         i1l1135 01DA  
                       i1l1137 01E0                         i1l1129 01CA                         i1l1139 01E8  
            __end_of_UART_Init 0275          i1UART_Transmit_Text@i 0073                    ?_HandleData 0070  
                    ??___lwdiv 0024                      ??___lwmod 002C                         saved_w 007E  
                    ??_sprintf 0031               ??_ClearRX_Buffer 0070        __end_of__initialization 001B  
        __end_of_UART_Transmit 0295                 __pcstackCOMMON 0070         ??i1_UART_Transmit_Text 0071  
          __size_of_HandleData 0008                     __pbssBANK1 00A0                     __pmaintext 014F  
                   __pintentry 0004             _UART_Transmit_Text 0201                        _IO_Init 02A1  
                   __stringtab 0223            ?_UART_Transmit_Text 0070                        ___lwdiv 0109  
                      ___lwmod 018E           ??_UART_Transmit_Text 0021                        __ptext1 001F  
                      __ptext2 018E                        __ptext3 0109                        __ptext4 0201  
                      __ptext5 0287                        __ptext6 0262                        __ptext7 02A1  
                      __ptext8 01CA                        __ptext9 02B2                        _dpowers 0229  
                      _sprintf 001F                        clrloop0 02AB           end_of_initialization 001B  
               UART_Transmit@c 0020                   ??_HandleData 0074                      _UART_Init 0262  
     __size_ofi1_UART_Transmit 000C                      _TRISCbits 0087             __end_of_HandleData 02BA  
                    _RX_Buffer 00A0                     ?_UART_Init 0070                ClearRX_Buffer@i 0071  
          start_initialization 0011  __size_ofi1_UART_Transmit_Text 001E                    __pbssCOMMON 007A  
                    ___latbits 0002         __size_of_UART_Transmit 000E                  __pcstackBANK0 0020  
            ??i1_UART_Transmit 0070                       ?_IO_Init 0070                    sprintf@flag 0035  
                  sprintf@prec 0036               ___lwdiv@dividend 0022        __size_of_ClearRX_Buffer 0012  
                     ?___lwdiv 0020                       ?___lwmod 0028                    ??_UART_Init 0020  
                    __pstrings 0223               ___lwdiv@quotient 0025                       ?_sprintf 002E  
                 HandleData@RX 0074              interrupt_function 0004                      clear_ram0 02AA  
                _UART_Transmit 0287            UART_Transmit_Text@i 0022    __size_of_UART_Transmit_Text 0022  
                  __stringbase 0228               i1UART_Transmit@c 0070               __size_of_IO_Init 0009  
               ?_UART_Transmit 0070        i1UART_Transmit_Text@str 0072               __size_of___lwdiv 0046  
             __size_of___lwmod 003C             __end_of__stringtab 0229                     sprintf@val 0037  
              ___lwdiv@divisor 0020                ___lwdiv@counter 0027                       __ptext10 0244  
                     __ptext11 0295                       __ptext12 0275               __size_of_sprintf 00EA  
                __size_of_isr1 0037                  __size_of_main 003F                 _ClearRX_Buffer 0275  
                     _rx_index 007A                i1_UART_Transmit 0295                       main@text 003E  
                   _INTCONbits 000B                       intlevel1 0000                      sprintf@ap 0034  
                    sprintf@sp 0039               ___lwmod@dividend 002A                ??_UART_Transmit 0020  
 __end_ofi1_UART_Transmit_Text 0262         __end_of_ClearRX_Buffer 0287                      stringcode 0223  
        UART_Transmit_Text@str 0023                       sprintf@c 003A                       sprintf@f 002E  
              ___lwmod@divisor 0028                ___lwmod@counter 002D                       stringdir 0223  
                     stringtab 0223                ?_ClearRX_Buffer 0070        __end_ofi1_UART_Transmit 02A1  
