

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat Jan 08 11:14:38 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  0088                     	;# 
   151  0089                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171  0007                     _PORTC	set	7
   172  0006                     _PORTBbits	set	6
   173  0087                     _TRISC	set	135
   174  0086                     _TRISBbits	set	134
   175                           
   176                           	psect	strings
   177  0003                     __pstrings:
   178  0003                     stringtab:
   179  0003                     __stringtab:
   180  0003                     stringcode:	
   181                           ;	String table - string pointers are 1 byte each
   182                           
   183  0003                     stringdir:
   184  0003  3000               	movlw	high stringdir
   185  0004  008A               	movwf	10
   186  0005  0804               	movf	4,w
   187  0006  0A84               	incf	4,f
   188  0007  0782               	addwf	2,f
   189  0008                     __stringbase:
   190  0008  3400               	retlw	0
   191  0009                     __end_of__stringtab:
   192  0009                     STR_1:
   193  0009  344C               	retlw	76	;'L'
   194  000A  3445               	retlw	69	;'E'
   195  000B  3420               	retlw	32	;' '
   196  000C  3456               	retlw	86	;'V'
   197  000D  3441               	retlw	65	;'A'
   198  000E  344E               	retlw	78	;'N'
   199  000F  3420               	retlw	32	;' '
   200  0010  3451               	retlw	81	;'Q'
   201  0011  3455               	retlw	85	;'U'
   202  0012  3459               	retlw	89	;'Y'
   203  0013  3400               	retlw	0
   204                           
   205                           	psect	cinit
   206  07FC                     start_initialization:	
   207                           ; #config settings
   208                           
   209  07FC                     __initialization:
   210  07FC                     end_of_initialization:	
   211                           ;End of C runtime variable initialization code
   212                           
   213  07FC                     __end_of__initialization:
   214  07FC  0183               	clrf	3
   215  07FD  120A  118A  2F13   	ljmp	_main	;jump to C main() function
   216                           
   217                           	psect	cstackCOMMON
   218  0070                     __pcstackCOMMON:
   219  0070                     ?_LCD_Cmd:
   220  0070                     ??_LCD_Cmd:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_LCD_Cmd_Init:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ??_LCD_Cmd_Init:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?_LCD_Init:	
   230                           ; 1 bytes @ 0x0
   231                           
   232  0070                     ?_LCD_Char:	
   233                           ; 1 bytes @ 0x0
   234                           
   235  0070                     ??_LCD_Char:	
   236                           ; 1 bytes @ 0x0
   237                           
   238  0070                     ?_LCD_String:	
   239                           ; 1 bytes @ 0x0
   240                           
   241  0070                     ?_main:	
   242                           ; 1 bytes @ 0x0
   243                           
   244                           
   245                           ; 1 bytes @ 0x0
   246  0070                     	ds	2
   247  0072                     LCD_Cmd@cmd:
   248  0072                     LCD_Cmd_Init@cmd:	
   249                           ; 1 bytes @ 0x2
   250                           
   251  0072                     LCD_Char@c:	
   252                           ; 1 bytes @ 0x2
   253                           
   254                           
   255                           ; 1 bytes @ 0x2
   256  0072                     	ds	1
   257  0073                     ??_LCD_Init:
   258  0073                     ??_LCD_String:	
   259                           ; 1 bytes @ 0x3
   260                           
   261  0073                     ?_LCD_GotoCursor:	
   262                           ; 1 bytes @ 0x3
   263                           
   264  0073                     LCD_GotoCursor@col:	
   265                           ; 1 bytes @ 0x3
   266                           
   267                           
   268                           ; 1 bytes @ 0x3
   269  0073                     	ds	1
   270  0074                     ??_LCD_GotoCursor:
   271  0074                     LCD_String@i:	
   272                           ; 1 bytes @ 0x4
   273                           
   274                           
   275                           ; 1 bytes @ 0x4
   276  0074                     	ds	1
   277  0075                     LCD_String@str:
   278  0075                     LCD_GotoCursor@row:	
   279                           ; 1 bytes @ 0x5
   280                           
   281                           
   282                           ; 1 bytes @ 0x5
   283  0075                     	ds	1
   284  0076                     _LCD_GotoCursor$105:
   285                           
   286                           ; 2 bytes @ 0x6
   287  0076                     	ds	2
   288  0078                     LCD_GotoCursor@cmd:
   289                           
   290                           ; 1 bytes @ 0x8
   291  0078                     	ds	1
   292  0079                     ??_main:
   293                           
   294                           	psect	maintext
   295  0713                     __pmaintext:	
   296                           ; 1 bytes @ 0x9
   297 ;;
   298 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   299 ;;
   300 ;; *************** function _main *****************
   301 ;; Defined at:
   302 ;;		line 121 in file "main.c"
   303 ;; Parameters:    Size  Location     Type
   304 ;;		None
   305 ;; Auto vars:     Size  Location     Type
   306 ;;		None
   307 ;; Return value:  Size  Location     Type
   308 ;;                  1    wreg      void 
   309 ;; Registers used:
   310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   311 ;; Tracked objects:
   312 ;;		On entry : B00/0
   313 ;;		On exit  : 0/0
   314 ;;		Unchanged: 0/0
   315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   316 ;;      Params:         0       0       0       0       0
   317 ;;      Locals:         0       0       0       0       0
   318 ;;      Temps:          0       0       0       0       0
   319 ;;      Totals:         0       0       0       0       0
   320 ;;Total ram usage:        0 bytes
   321 ;; Hardware stack levels required when called: 2
   322 ;; This function calls:
   323 ;;		_LCD_GotoCursor
   324 ;;		_LCD_Init
   325 ;;		_LCD_String
   326 ;; This function is called by:
   327 ;;		Startup code after reset
   328 ;; This function uses a non-reentrant model
   329 ;;
   330                           
   331                           
   332                           ;psect for function _main
   333  0713                     _main:
   334  0713                     l847:	
   335                           ;incstack = 0
   336                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   337                           
   338                           
   339                           ;main.c: 123:     LCD_Init();
   340  0713  120A  118A  27B6  120A  118A  	fcall	_LCD_Init
   341                           
   342                           ;main.c: 124:     LCD_GotoCursor(1, 1);
   343  0718  01F3               	clrf	LCD_GotoCursor@col
   344  0719  0AF3               	incf	LCD_GotoCursor@col,f
   345  071A  3001               	movlw	1
   346  071B  120A  118A  272A  120A  118A  	fcall	_LCD_GotoCursor
   347  0720                     l849:
   348                           
   349                           ;main.c: 125:     LCD_String("LE VAN QUY");
   350  0720  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   351  0721  120A  118A  2765  120A  118A  	fcall	_LCD_String
   352  0726                     l56:	
   353                           ;main.c: 126:     while(1)
   354                           
   355  0726                     l57:	
   356                           ;main.c: 127:     {;main.c: 129:     }
   357                           
   358  0726  2F26               	goto	l56
   359  0727  120A  118A  2800   	ljmp	start
   360  072A                     __end_of_main:
   361                           
   362                           	psect	text1
   363  0765                     __ptext1:	
   364 ;; *************** function _LCD_String *****************
   365 ;; Defined at:
   366 ;;		line 91 in file "main.c"
   367 ;; Parameters:    Size  Location     Type
   368 ;;  str             1    wreg     PTR unsigned char 
   369 ;;		 -> STR_1(11), 
   370 ;; Auto vars:     Size  Location     Type
   371 ;;  str             1    5[COMMON] PTR unsigned char 
   372 ;;		 -> STR_1(11), 
   373 ;;  i               1    4[COMMON] unsigned char 
   374 ;; Return value:  Size  Location     Type
   375 ;;                  1    wreg      void 
   376 ;; Registers used:
   377 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   378 ;; Tracked objects:
   379 ;;		On entry : 0/0
   380 ;;		On exit  : 0/0
   381 ;;		Unchanged: 0/0
   382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   383 ;;      Params:         0       0       0       0       0
   384 ;;      Locals:         2       0       0       0       0
   385 ;;      Temps:          1       0       0       0       0
   386 ;;      Totals:         3       0       0       0       0
   387 ;;Total ram usage:        3 bytes
   388 ;; Hardware stack levels used: 1
   389 ;; Hardware stack levels required when called: 1
   390 ;; This function calls:
   391 ;;		_LCD_Char
   392 ;; This function is called by:
   393 ;;		_main
   394 ;;		_LCD_GotoCursor_String
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           
   399                           ;psect for function _LCD_String
   400  0765                     _LCD_String:
   401                           
   402                           ;incstack = 0
   403                           ; Regs used in _LCD_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   404                           ;LCD_String@str stored from wreg
   405  0765  00F5               	movwf	LCD_String@str
   406  0766                     l805:
   407                           
   408                           ;main.c: 91: void LCD_String(char *str);main.c: 92: {;main.c: 93:  unsigned char i = 0;
   409  0766  01F4               	clrf	LCD_String@i
   410                           
   411                           ;main.c: 94:  while(str[i] != 0)
   412  0767  2F79               	goto	l811
   413  0768                     l807:
   414                           
   415                           ;main.c: 95:  {;main.c: 96:   LCD_Char(str[i]);
   416  0768  0874               	movf	LCD_String@i,w
   417  0769  0775               	addwf	LCD_String@str,w
   418  076A  0084               	movwf	4
   419  076B  120A  118A  2003  120A  118A  	fcall	stringdir
   420  0770  120A  118A  2746  120A  118A  	fcall	_LCD_Char
   421  0775                     l809:
   422                           
   423                           ;main.c: 97:   i++;
   424  0775  3001               	movlw	1
   425  0776  00F3               	movwf	??_LCD_String
   426  0777  0873               	movf	??_LCD_String,w
   427  0778  07F4               	addwf	LCD_String@i,f
   428  0779                     l811:
   429                           
   430                           ;main.c: 94:  while(str[i] != 0)
   431  0779  0874               	movf	LCD_String@i,w
   432  077A  0775               	addwf	LCD_String@str,w
   433  077B  0084               	movwf	4
   434  077C  120A  118A  2003  120A  118A  	fcall	stringdir
   435  0781  3A00               	xorlw	0
   436  0782  1D03               	skipz
   437  0783  2F85               	goto	u101
   438  0784  2F86               	goto	u100
   439  0785                     u101:
   440  0785  2F68               	goto	l807
   441  0786                     u100:
   442  0786                     l30:
   443  0786  0008               	return
   444  0787                     __end_of_LCD_String:
   445                           
   446                           	psect	text2
   447  0746                     __ptext2:	
   448 ;; *************** function _LCD_Char *****************
   449 ;; Defined at:
   450 ;;		line 80 in file "main.c"
   451 ;; Parameters:    Size  Location     Type
   452 ;;  c               1    wreg     unsigned char 
   453 ;; Auto vars:     Size  Location     Type
   454 ;;  c               1    2[COMMON] unsigned char 
   455 ;; Return value:  Size  Location     Type
   456 ;;                  1    wreg      void 
   457 ;; Registers used:
   458 ;;		wreg, status,2, status,0
   459 ;; Tracked objects:
   460 ;;		On entry : 0/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   464 ;;      Params:         0       0       0       0       0
   465 ;;      Locals:         1       0       0       0       0
   466 ;;      Temps:          2       0       0       0       0
   467 ;;      Totals:         3       0       0       0       0
   468 ;;Total ram usage:        3 bytes
   469 ;; Hardware stack levels used: 1
   470 ;; This function calls:
   471 ;;		Nothing
   472 ;; This function is called by:
   473 ;;		_LCD_String
   474 ;;		_LCD_GotoCursor_Char
   475 ;; This function uses a non-reentrant model
   476 ;;
   477                           
   478                           
   479                           ;psect for function _LCD_Char
   480  0746                     _LCD_Char:
   481                           
   482                           ;incstack = 0
   483                           ; Regs used in _LCD_Char: [wreg+status,2+status,0]
   484                           ;LCD_Char@c stored from wreg
   485  0746  00F2               	movwf	LCD_Char@c
   486  0747                     l679:
   487                           
   488                           ;main.c: 80: void LCD_Char(unsigned char c);main.c: 81: {;main.c: 82:  PORTBbits.RB6 = 1
      +                          ;
   489  0747  1283               	bcf	3,5	;RP0=0, select bank0
   490  0748  1303               	bcf	3,6	;RP1=0, select bank0
   491  0749  1706               	bsf	6,6	;volatile
   492  074A                     l681:
   493                           
   494                           ;main.c: 83:  PORTC = c;
   495  074A  0872               	movf	LCD_Char@c,w
   496  074B  0087               	movwf	7	;volatile
   497  074C                     l683:
   498                           
   499                           ;main.c: 84:  PORTBbits.RB7 = 1;
   500  074C  1786               	bsf	6,7	;volatile
   501  074D                     l685:
   502                           
   503                           ;main.c: 85:  PORTBbits.RB7 = 0;
   504  074D  1386               	bcf	6,7	;volatile
   505  074E                     l687:
   506                           
   507                           ;main.c: 86:     PORTC = c << 4;
   508  074E  0872               	movf	LCD_Char@c,w
   509  074F  00F0               	movwf	??_LCD_Char
   510  0750  3003               	movlw	3
   511  0751                     u35:
   512  0751  1003               	clrc
   513  0752  0DF0               	rlf	??_LCD_Char,f
   514  0753  3EFF               	addlw	-1
   515  0754  1D03               	skipz
   516  0755  2F51               	goto	u35
   517  0756  1003               	clrc
   518  0757  0D70               	rlf	??_LCD_Char,w
   519  0758  0087               	movwf	7	;volatile
   520  0759                     l689:
   521                           
   522                           ;main.c: 87:  PORTBbits.RB7 = 1;
   523  0759  1786               	bsf	6,7	;volatile
   524  075A                     l691:
   525                           
   526                           ;main.c: 88:  PORTBbits.RB7 = 0;
   527  075A  1386               	bcf	6,7	;volatile
   528  075B                     l693:
   529                           
   530                           ;main.c: 89:  _delay((unsigned long)((1)*(200000000/4000.0)));
   531  075B  3041               	movlw	65
   532  075C  00F1               	movwf	??_LCD_Char+1
   533  075D  30EE               	movlw	238
   534  075E  00F0               	movwf	??_LCD_Char
   535  075F                     u147:
   536  075F  0BF0               	decfsz	??_LCD_Char,f
   537  0760  2F5F               	goto	u147
   538  0761  0BF1               	decfsz	??_LCD_Char+1,f
   539  0762  2F5F               	goto	u147
   540  0763  0000               	nop
   541  0764                     l24:
   542  0764  0008               	return
   543  0765                     __end_of_LCD_Char:
   544                           
   545                           	psect	text3
   546  07B6                     __ptext3:	
   547 ;; *************** function _LCD_Init *****************
   548 ;; Defined at:
   549 ;;		line 43 in file "main.c"
   550 ;; Parameters:    Size  Location     Type
   551 ;;		None
   552 ;; Auto vars:     Size  Location     Type
   553 ;;		None
   554 ;; Return value:  Size  Location     Type
   555 ;;                  1    wreg      void 
   556 ;; Registers used:
   557 ;;		wreg, status,2, status,0, pclath, cstack
   558 ;; Tracked objects:
   559 ;;		On entry : 0/0
   560 ;;		On exit  : 0/0
   561 ;;		Unchanged: 0/0
   562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   563 ;;      Params:         0       0       0       0       0
   564 ;;      Locals:         0       0       0       0       0
   565 ;;      Temps:          3       0       0       0       0
   566 ;;      Totals:         3       0       0       0       0
   567 ;;Total ram usage:        3 bytes
   568 ;; Hardware stack levels used: 1
   569 ;; Hardware stack levels required when called: 1
   570 ;; This function calls:
   571 ;;		_LCD_Cmd
   572 ;;		_LCD_Cmd_Init
   573 ;; This function is called by:
   574 ;;		_main
   575 ;; This function uses a non-reentrant model
   576 ;;
   577                           
   578                           
   579                           ;psect for function _LCD_Init
   580  07B6                     _LCD_Init:
   581  07B6                     l783:	
   582                           ;incstack = 0
   583                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   584                           
   585                           
   586                           ;main.c: 45:     TRISBbits.TRISB6 = 0;
   587  07B6  1683               	bsf	3,5	;RP0=1, select bank1
   588  07B7  1303               	bcf	3,6	;RP1=0, select bank1
   589  07B8  1306               	bcf	6,6	;volatile
   590                           
   591                           ;main.c: 46:     TRISBbits.TRISB7 = 0;
   592  07B9  1386               	bcf	6,7	;volatile
   593  07BA                     l785:
   594                           
   595                           ;main.c: 47:     TRISC = 0;
   596  07BA  0187               	clrf	7	;volatile
   597  07BB                     l787:
   598                           
   599                           ;main.c: 50:  LCD_Cmd_Init(0x30);
   600  07BB  3030               	movlw	48
   601  07BC  120A  118A  2701  120A  118A  	fcall	_LCD_Cmd_Init
   602  07C1                     l789:
   603                           
   604                           ;main.c: 51:  _delay((unsigned long)((5)*(200000000/4000.0)));
   605  07C1  3002               	movlw	2
   606  07C2  00F5               	movwf	??_LCD_Init+2
   607  07C3  3045               	movlw	69
   608  07C4  00F4               	movwf	??_LCD_Init+1
   609  07C5  30A9               	movlw	169
   610  07C6  00F3               	movwf	??_LCD_Init
   611  07C7                     u157:
   612  07C7  0BF3               	decfsz	??_LCD_Init,f
   613  07C8  2FC7               	goto	u157
   614  07C9  0BF4               	decfsz	??_LCD_Init+1,f
   615  07CA  2FC7               	goto	u157
   616  07CB  0BF5               	decfsz	??_LCD_Init+2,f
   617  07CC  2FC7               	goto	u157
   618  07CD  2FCE               	nop2
   619  07CE                     l791:
   620                           
   621                           ;main.c: 52:  LCD_Cmd_Init(0x30);
   622  07CE  3030               	movlw	48
   623  07CF  120A  118A  2701  120A  118A  	fcall	_LCD_Cmd_Init
   624  07D4                     l793:
   625                           
   626                           ;main.c: 53:  _delay((unsigned long)((1)*(200000000/4000.0)));
   627  07D4  3041               	movlw	65
   628  07D5  00F4               	movwf	??_LCD_Init+1
   629  07D6  30EE               	movlw	238
   630  07D7  00F3               	movwf	??_LCD_Init
   631  07D8                     u167:
   632  07D8  0BF3               	decfsz	??_LCD_Init,f
   633  07D9  2FD8               	goto	u167
   634  07DA  0BF4               	decfsz	??_LCD_Init+1,f
   635  07DB  2FD8               	goto	u167
   636  07DC  0000               	nop
   637  07DD                     l795:
   638                           
   639                           ;main.c: 54:  LCD_Cmd_Init(0x30);
   640  07DD  3030               	movlw	48
   641  07DE  120A  118A  2701  120A  118A  	fcall	_LCD_Cmd_Init
   642  07E3                     l797:
   643                           
   644                           ;main.c: 58:     LCD_Cmd_Init(0x28);
   645  07E3  3028               	movlw	40
   646  07E4  120A  118A  2701  120A  118A  	fcall	_LCD_Cmd_Init
   647  07E9                     l799:
   648                           
   649                           ;main.c: 61:  LCD_Cmd(0x28);
   650  07E9  3028               	movlw	40
   651  07EA  120A  118A  2787  120A  118A  	fcall	_LCD_Cmd
   652  07EF                     l801:
   653                           
   654                           ;main.c: 72:  LCD_Cmd(0x01);
   655  07EF  3001               	movlw	1
   656  07F0  120A  118A  2787  120A  118A  	fcall	_LCD_Cmd
   657  07F5                     l803:
   658                           
   659                           ;main.c: 78:     LCD_Cmd(0x0E);
   660  07F5  300E               	movlw	14
   661  07F6  120A  118A  2787  120A  118A  	fcall	_LCD_Cmd
   662  07FB                     l21:
   663  07FB  0008               	return
   664  07FC                     __end_of_LCD_Init:
   665                           
   666                           	psect	text4
   667  0701                     __ptext4:	
   668 ;; *************** function _LCD_Cmd_Init *****************
   669 ;; Defined at:
   670 ;;		line 35 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;  cmd             1    wreg     unsigned char 
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  cmd             1    2[COMMON] unsigned char 
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   684 ;;      Params:         0       0       0       0       0
   685 ;;      Locals:         1       0       0       0       0
   686 ;;      Temps:          2       0       0       0       0
   687 ;;      Totals:         3       0       0       0       0
   688 ;;Total ram usage:        3 bytes
   689 ;; Hardware stack levels used: 1
   690 ;; This function calls:
   691 ;;		Nothing
   692 ;; This function is called by:
   693 ;;		_LCD_Init
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           
   698                           ;psect for function _LCD_Cmd_Init
   699  0701                     _LCD_Cmd_Init:
   700                           
   701                           ;incstack = 0
   702                           ; Regs used in _LCD_Cmd_Init: [wreg]
   703                           ;LCD_Cmd_Init@cmd stored from wreg
   704  0701  00F2               	movwf	LCD_Cmd_Init@cmd
   705  0702                     l671:
   706                           
   707                           ;main.c: 35: void LCD_Cmd_Init(unsigned char cmd);main.c: 36: {;main.c: 37:  PORTBbits.R
      +                          B6 = 0;
   708  0702  1283               	bcf	3,5	;RP0=0, select bank0
   709  0703  1303               	bcf	3,6	;RP1=0, select bank0
   710  0704  1306               	bcf	6,6	;volatile
   711  0705                     l673:
   712                           
   713                           ;main.c: 38:  PORTC = cmd;
   714  0705  0872               	movf	LCD_Cmd_Init@cmd,w
   715  0706  0087               	movwf	7	;volatile
   716  0707                     l675:
   717                           
   718                           ;main.c: 39:  PORTBbits.RB7 = 1;
   719  0707  1786               	bsf	6,7	;volatile
   720  0708                     l677:
   721                           
   722                           ;main.c: 40:  PORTBbits.RB7 = 0;
   723  0708  1386               	bcf	6,7	;volatile
   724                           
   725                           ;main.c: 41:     _delay((unsigned long)((40)*(200000000/4000000.0)));
   726  0709  3003               	movlw	3
   727  070A  00F1               	movwf	??_LCD_Cmd_Init+1
   728  070B  3097               	movlw	151
   729  070C  00F0               	movwf	??_LCD_Cmd_Init
   730  070D                     u177:
   731  070D  0BF0               	decfsz	??_LCD_Cmd_Init,f
   732  070E  2F0D               	goto	u177
   733  070F  0BF1               	decfsz	??_LCD_Cmd_Init+1,f
   734  0710  2F0D               	goto	u177
   735  0711  2F12               	nop2
   736  0712                     l18:
   737  0712  0008               	return
   738  0713                     __end_of_LCD_Cmd_Init:
   739                           
   740                           	psect	text5
   741  072A                     __ptext5:	
   742 ;; *************** function _LCD_GotoCursor *****************
   743 ;; Defined at:
   744 ;;		line 100 in file "main.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;  row             1    wreg     unsigned char 
   747 ;;  col             1    3[COMMON] unsigned char 
   748 ;; Auto vars:     Size  Location     Type
   749 ;;  row             1    5[COMMON] unsigned char 
   750 ;;  cmd             1    8[COMMON] unsigned char 
   751 ;; Return value:  Size  Location     Type
   752 ;;                  1    wreg      void 
   753 ;; Registers used:
   754 ;;		wreg, status,2, status,0, pclath, cstack
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   760 ;;      Params:         1       0       0       0       0
   761 ;;      Locals:         4       0       0       0       0
   762 ;;      Temps:          1       0       0       0       0
   763 ;;      Totals:         6       0       0       0       0
   764 ;;Total ram usage:        6 bytes
   765 ;; Hardware stack levels used: 1
   766 ;; Hardware stack levels required when called: 1
   767 ;; This function calls:
   768 ;;		_LCD_Cmd
   769 ;; This function is called by:
   770 ;;		_main
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           
   775                           ;psect for function _LCD_GotoCursor
   776  072A                     _LCD_GotoCursor:
   777                           
   778                           ;incstack = 0
   779                           ; Regs used in _LCD_GotoCursor: [wreg+status,2+status,0+pclath+cstack]
   780                           ;LCD_GotoCursor@row stored from wreg
   781  072A  00F5               	movwf	LCD_GotoCursor@row
   782  072B                     l813:
   783                           
   784                           ;main.c: 100: void LCD_GotoCursor(unsigned char row, unsigned char col);main.c: 101: {;m
      +                          ain.c: 102:  unsigned char cmd;;main.c: 103:  cmd = (row==1?0x80:0xC0) + col - 1;
   785  072B  0375               	decf	LCD_GotoCursor@row,w
   786  072C  1903               	btfsc	3,2
   787  072D  2F2F               	goto	u111
   788  072E  2F30               	goto	u110
   789  072F                     u111:
   790  072F  2F35               	goto	l817
   791  0730                     u110:
   792  0730                     l815:
   793  0730  30C0               	movlw	192
   794  0731  00F6               	movwf	_LCD_GotoCursor$105
   795  0732  3000               	movlw	0
   796  0733  00F7               	movwf	_LCD_GotoCursor$105+1
   797  0734  2F39               	goto	l819
   798  0735                     l817:
   799  0735  3080               	movlw	128
   800  0736  00F6               	movwf	_LCD_GotoCursor$105
   801  0737  3000               	movlw	0
   802  0738  00F7               	movwf	_LCD_GotoCursor$105+1
   803  0739                     l819:
   804  0739  0873               	movf	LCD_GotoCursor@col,w
   805  073A  0776               	addwf	_LCD_GotoCursor$105,w
   806  073B  3EFF               	addlw	255
   807  073C  00F4               	movwf	??_LCD_GotoCursor
   808  073D  0874               	movf	??_LCD_GotoCursor,w
   809  073E  00F8               	movwf	LCD_GotoCursor@cmd
   810  073F                     l821:
   811                           
   812                           ;main.c: 104:  LCD_Cmd(cmd);
   813  073F  0878               	movf	LCD_GotoCursor@cmd,w
   814  0740  120A  118A  2787  120A  118A  	fcall	_LCD_Cmd
   815  0745                     l37:
   816  0745  0008               	return
   817  0746                     __end_of_LCD_GotoCursor:
   818                           
   819                           	psect	text6
   820  0787                     __ptext6:	
   821 ;; *************** function _LCD_Cmd *****************
   822 ;; Defined at:
   823 ;;		line 17 in file "main.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;  cmd             1    wreg     unsigned char 
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  cmd             1    2[COMMON] unsigned char 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg, status,2, status,0
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   837 ;;      Params:         0       0       0       0       0
   838 ;;      Locals:         1       0       0       0       0
   839 ;;      Temps:          2       0       0       0       0
   840 ;;      Totals:         3       0       0       0       0
   841 ;;Total ram usage:        3 bytes
   842 ;; Hardware stack levels used: 1
   843 ;; This function calls:
   844 ;;		Nothing
   845 ;; This function is called by:
   846 ;;		_LCD_Init
   847 ;;		_LCD_GotoCursor
   848 ;;		_LCD_GotoCursor_Char
   849 ;;		_LCD_GotoCursor_String
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853                           
   854                           ;psect for function _LCD_Cmd
   855  0787                     _LCD_Cmd:
   856                           
   857                           ;incstack = 0
   858                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0]
   859                           ;LCD_Cmd@cmd stored from wreg
   860  0787  00F2               	movwf	LCD_Cmd@cmd
   861  0788                     l763:
   862                           
   863                           ;main.c: 17: void LCD_Cmd(unsigned char cmd);main.c: 18: {;main.c: 19:  PORTBbits.RB6 = 
      +                          0;
   864  0788  1283               	bcf	3,5	;RP0=0, select bank0
   865  0789  1303               	bcf	3,6	;RP1=0, select bank0
   866  078A  1306               	bcf	6,6	;volatile
   867  078B                     l765:
   868                           
   869                           ;main.c: 20:  PORTC = cmd;
   870  078B  0872               	movf	LCD_Cmd@cmd,w
   871  078C  0087               	movwf	7	;volatile
   872  078D                     l767:
   873                           
   874                           ;main.c: 21:  PORTBbits.RB7 = 1;
   875  078D  1786               	bsf	6,7	;volatile
   876  078E                     l769:
   877                           
   878                           ;main.c: 22:  PORTBbits.RB7 = 0;
   879  078E  1386               	bcf	6,7	;volatile
   880  078F                     l771:
   881                           
   882                           ;main.c: 23:     PORTC = cmd << 4;
   883  078F  0872               	movf	LCD_Cmd@cmd,w
   884  0790  00F0               	movwf	??_LCD_Cmd
   885  0791  3003               	movlw	3
   886  0792                     u85:
   887  0792  1003               	clrc
   888  0793  0DF0               	rlf	??_LCD_Cmd,f
   889  0794  3EFF               	addlw	-1
   890  0795  1D03               	skipz
   891  0796  2F92               	goto	u85
   892  0797  1003               	clrc
   893  0798  0D70               	rlf	??_LCD_Cmd,w
   894  0799  0087               	movwf	7	;volatile
   895  079A                     l773:
   896                           
   897                           ;main.c: 24:  PORTBbits.RB7 = 1;
   898  079A  1786               	bsf	6,7	;volatile
   899  079B                     l775:
   900                           
   901                           ;main.c: 25:  PORTBbits.RB7 = 0;
   902  079B  1386               	bcf	6,7	;volatile
   903  079C                     l777:
   904                           
   905                           ;main.c: 26:  if( cmd <= 0x02)
   906  079C  3003               	movlw	3
   907  079D  0272               	subwf	LCD_Cmd@cmd,w
   908  079E  1803               	skipnc
   909  079F  2FA1               	goto	u91
   910  07A0  2FA2               	goto	u90
   911  07A1                     u91:
   912  07A1  2FAC               	goto	l781
   913  07A2                     u90:
   914  07A2                     l779:
   915                           
   916                           ;main.c: 27:  {;main.c: 28:   _delay((unsigned long)((2)*(200000000/4000.0)));
   917  07A2  3082               	movlw	130
   918  07A3  00F1               	movwf	??_LCD_Cmd+1
   919  07A4  30DD               	movlw	221
   920  07A5  00F0               	movwf	??_LCD_Cmd
   921  07A6                     u187:
   922  07A6  0BF0               	decfsz	??_LCD_Cmd,f
   923  07A7  2FA6               	goto	u187
   924  07A8  0BF1               	decfsz	??_LCD_Cmd+1,f
   925  07A9  2FA6               	goto	u187
   926  07AA  2FAB               	nop2
   927                           
   928                           ;main.c: 29:  }
   929  07AB  2FB5               	goto	l15
   930  07AC                     l781:
   931                           
   932                           ;main.c: 31:  {;main.c: 32:   _delay((unsigned long)((1)*(200000000/4000.0)));
   933  07AC  3041               	movlw	65
   934  07AD  00F1               	movwf	??_LCD_Cmd+1
   935  07AE  30EE               	movlw	238
   936  07AF  00F0               	movwf	??_LCD_Cmd
   937  07B0                     u197:
   938  07B0  0BF0               	decfsz	??_LCD_Cmd,f
   939  07B1  2FB0               	goto	u197
   940  07B2  0BF1               	decfsz	??_LCD_Cmd+1,f
   941  07B3  2FB0               	goto	u197
   942  07B4  0000               	nop
   943  07B5                     l15:
   944  07B5  0008               	return
   945  07B6                     __end_of_LCD_Cmd:
   946  007E                     btemp	set	126	;btemp
   947  007E                     wtemp0	set	126
   948                           
   949                           	psect	config
   950                           
   951                           ;Config register CONFIG @ 0x2007
   952                           ;	Oscillator Selection bits
   953                           ;	FOSC = HS, HS oscillator
   954                           ;	Watchdog Timer Enable bit
   955                           ;	WDTE = OFF, WDT disabled
   956                           ;	Power-up Timer Enable bit
   957                           ;	PWRTE = OFF, PWRT disabled
   958                           ;	Brown-out Reset Enable bit
   959                           ;	BOREN = OFF, BOR disabled
   960                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   961                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   962                           ;	Data EEPROM Memory Code Protection bit
   963                           ;	CPD = OFF, Data EEPROM code protection off
   964                           ;	Flash Program Memory Write Enable bits
   965                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   966                           ;	In-Circuit Debugger Mode bit
   967                           ;	DEBUG = 0x1, unprogrammed default
   968                           ;	Flash Program Memory Code Protection bit
   969                           ;	CP = OFF, Code protection off
   970  2007                     	org	8199
   971  2007  3F3A               	dw	16186

Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_String@str	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMMON

    _main->_LCD_GotoCursor
    _LCD_String->_LCD_Char
    _LCD_Init->_LCD_Cmd
    _LCD_Init->_LCD_Cmd_Init
    _LCD_GotoCursor->_LCD_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     500
                     _LCD_GotoCursor
                           _LCD_Init
                         _LCD_String
 ---------------------------------------------------------------------------------
 (1) _LCD_String                                           3     3      0     186
                                              3 COMMON     3     3      0
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Char                                             3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     3      0      81
                                              3 COMMON     3     3      0
                            _LCD_Cmd
                       _LCD_Cmd_Init
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd_Init                                         3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_GotoCursor                                       6     5      1     233
                                              3 COMMON     6     5      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              3     3      0      66
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_GotoCursor
     _LCD_Cmd
   _LCD_Init
     _LCD_Cmd
     _LCD_Cmd_Init
   _LCD_String
     _LCD_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat Jan 08 11:14:38 2022

                      pc 0002            ?_LCD_Cmd_Init 0070                       l21 07FB  
                     l30 0786                       l15 07B5                       l24 0764  
                     l18 0712                       l37 0745                       l56 0726  
                     l57 0726                       u35 0751                       u90 07A2  
                     u91 07A1                       u85 0792                       fsr 0004  
            ?_LCD_String 0070                      l801 07EF                      l803 07F5  
                    l811 0779                      l821 073F                      l813 072B  
                    l805 0766                      l815 0730                      l671 0702  
                    l807 0768                      l817 0735                      l673 0705  
                    l681 074A                      l809 0775                      l771 078F  
                    l763 0788                      l819 0739                      l675 0707  
                    l691 075A                      l683 074C                      l781 07AC  
                    l773 079A                      l765 078B                      l677 0708  
                    l693 075B                      l685 074D                      l775 079B  
                    l767 078D                      l791 07CE                      l783 07B6  
                    l687 074E                      l679 0747                      l847 0713  
                    l777 079C                      l769 078E                      l793 07D4  
                    l785 07BA                      l689 0759                      l849 0720  
                    l779 07A2                      l795 07DD                      l787 07BB  
                    l797 07E3                      l789 07C1                      l799 07E9  
                    u100 0786                      u101 0785                      u110 0730  
                    u111 072F                      u147 075F                      u157 07C7  
                    u167 07D8                      u177 070D                      u187 07A6  
                    u197 07B0                      fsr0 0004          __end_of_LCD_Cmd 07B6  
                   STR_1 0009                     _main 0713                     btemp 007E  
 __end_of_LCD_GotoCursor 0746                     start 0000           ??_LCD_Cmd_Init 0070  
       __end_of_LCD_Char 0765         __end_of_LCD_Init 07FC                    ?_main 0070  
                  _PORTC 0007                    _TRISC 0087              LCD_String@i 0074  
                  pclath 000A                    status 0003                    wtemp0 007E  
    __size_of_LCD_String 0022          ?_LCD_GotoCursor 0073          __initialization 07FC  
           __end_of_main 072A                   ??_main 0079                ??_LCD_Cmd 0070  
   __end_of_LCD_Cmd_Init 0713                ?_LCD_Char 0070  __end_of__initialization 07FC  
              ?_LCD_Init 0070                LCD_Char@c 0072           __pcstackCOMMON 0070  
           ??_LCD_String 0073        LCD_GotoCursor@cmd 0078        LCD_GotoCursor@col 0073  
      LCD_GotoCursor@row 0075               ??_LCD_Char 0070               ??_LCD_Init 0073  
     __end_of_LCD_String 0787               __pmaintext 0713                  _LCD_Cmd 0787  
       ??_LCD_GotoCursor 0074               __stringtab 0003            LCD_String@str 0075  
                __ptext1 0765                  __ptext2 0746                  __ptext3 07B6  
                __ptext4 0701                  __ptext5 072A                  __ptext6 0787  
  __size_of_LCD_Cmd_Init 0012     end_of_initialization 07FC             _LCD_Cmd_Init 0701  
              _PORTBbits 0006                _TRISBbits 0086               LCD_Cmd@cmd 0072  
      __size_of_LCD_Char 001F        __size_of_LCD_Init 0046      start_initialization 07FC  
               ?_LCD_Cmd 0070                ___latbits 0002                __pstrings 0003  
        LCD_Cmd_Init@cmd 0072                 _LCD_Char 0746                 _LCD_Init 07B6  
            __stringbase 0008         __size_of_LCD_Cmd 002F  __size_of_LCD_GotoCursor 001C  
     __end_of__stringtab 0009            __size_of_main 0017               _LCD_String 0765  
              stringcode 0003       _LCD_GotoCursor$105 0076                 stringdir 0003  
               stringtab 0003           _LCD_GotoCursor 072A  
