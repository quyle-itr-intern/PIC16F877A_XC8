

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Jan 28 09:11:14 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.32
    14                           ; Generated 02/02/2021 GMT
    15                           ; 
    16                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  0008                     _PORTDbits	set	8
   169  0005                     _PORTA	set	5
   170  000C                     _PIR1bits	set	12
   171  0013                     _SSPBUF	set	19
   172  0007                     _PORTCbits	set	7
   173  0014                     _SSPCONbits	set	20
   174  0006                     _PORTBbits	set	6
   175  0088                     _TRISD	set	136
   176  0085                     _TRISA	set	133
   177  009F                     _ADCON1	set	159
   178  0094                     _SSPSTATbits	set	148
   179  0087                     _TRISCbits	set	135
   180  0086                     _TRISBbits	set	134
   181                           
   182                           	psect	cinit
   183  07FC                     start_initialization:	
   184                           ; #config settings
   185                           
   186  07FC                     __initialization:
   187  07FC                     end_of_initialization:	
   188                           ;End of C runtime variable initialization code
   189                           
   190  07FC                     __end_of__initialization:
   191  07FC  0183               	clrf	3
   192  07FD  120A  118A  2F96   	ljmp	_main	;jump to C main() function
   193                           
   194                           	psect	cstackCOMMON
   195  0070                     __pcstackCOMMON:
   196  0070                     ?_SPI_Init:
   197  0070                     ??_SPI_Init:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0070                     ?_SPI_Read_Return:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0070                     ??_SPI_Read_Return:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     ?_SPI_Write:	
   207                           ; 1 bytes @ 0x0
   208                           
   209  0070                     ?_main:	
   210                           ; 1 bytes @ 0x0
   211                           
   212  0070                     SPI_Write@Tvalue:	
   213                           ; 1 bytes @ 0x0
   214                           
   215                           
   216                           ; 1 bytes @ 0x0
   217  0070                     	ds	1
   218  0071                     ??_SPI_Write:
   219                           
   220                           ; 1 bytes @ 0x1
   221  0071                     	ds	1
   222  0072                     SPI_Read_Return@SLAVE:
   223                           
   224                           ; 1 bytes @ 0x2
   225  0072                     	ds	1
   226  0073                     SPI_Read_Return@Rvalue:
   227  0073                     SPI_Write@SLAVE:	
   228                           ; 1 bytes @ 0x3
   229                           
   230                           
   231                           ; 1 bytes @ 0x3
   232  0073                     	ds	1
   233  0074                     ??_main:
   234                           
   235                           ; 1 bytes @ 0x4
   236  0074                     	ds	2
   237                           
   238                           	psect	maintext
   239  0796                     __pmaintext:	
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 139 in file "newmain.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : B00/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   259 ;;      Params:         0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0
   261 ;;      Temps:          2       0       0       0       0
   262 ;;      Totals:         2       0       0       0       0
   263 ;;Total ram usage:        2 bytes
   264 ;; Hardware stack levels required when called: 1
   265 ;; This function calls:
   266 ;;		_SPI_Init
   267 ;;		_SPI_Read_Return
   268 ;;		_SPI_Write
   269 ;; This function is called by:
   270 ;;		Startup code after reset
   271 ;; This function uses a non-reentrant model
   272 ;;
   273                           
   274                           
   275                           ;psect for function _main
   276  0796                     _main:
   277  0796                     l845:	
   278                           ;incstack = 0
   279                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   280                           
   281                           
   282                           ;newmain.c: 141:     ADCON1 = 0x07;
   283  0796  3007               	movlw	7
   284  0797  1683               	bsf	3,5	;RP0=1, select bank1
   285  0798  1303               	bcf	3,6	;RP1=0, select bank1
   286  0799  009F               	movwf	31	;volatile
   287  079A                     l847:
   288                           
   289                           ;newmain.c: 142:     TRISA = 0;
   290  079A  0185               	clrf	5	;volatile
   291  079B                     l849:
   292                           
   293                           ;newmain.c: 143:     PORTA = 0;
   294  079B  1283               	bcf	3,5	;RP0=0, select bank0
   295  079C  1303               	bcf	3,6	;RP1=0, select bank0
   296  079D  0185               	clrf	5	;volatile
   297                           
   298                           ;newmain.c: 144:     TRISD = 0xFF;
   299  079E  30FF               	movlw	255
   300  079F  1683               	bsf	3,5	;RP0=1, select bank1
   301  07A0  1303               	bcf	3,6	;RP1=0, select bank1
   302  07A1  0088               	movwf	8	;volatile
   303  07A2                     l851:
   304                           
   305                           ;newmain.c: 145:     SPI_Init();
   306  07A2  120A  118A  270B  120A  118A  	fcall	_SPI_Init
   307  07A7                     l853:
   308                           
   309                           ;newmain.c: 147:     {;newmain.c: 148:         if(PORTDbits.RD0 == 0)
   310  07A7  1283               	bcf	3,5	;RP0=0, select bank0
   311  07A8  1303               	bcf	3,6	;RP1=0, select bank0
   312  07A9  1808               	btfsc	8,0	;volatile
   313  07AA  2FAC               	goto	u231
   314  07AB  2FAD               	goto	u230
   315  07AC                     u231:
   316  07AC  2FCA               	goto	l861
   317  07AD                     u230:
   318  07AD                     l855:
   319                           
   320                           ;newmain.c: 149:         {;newmain.c: 150:             _delay((unsigned long)((20)*(2000
      +                          0000/4000.0)));
   321  07AD  3082               	movlw	130
   322  07AE  00F5               	movwf	??_main+1
   323  07AF  30DD               	movlw	221
   324  07B0  00F4               	movwf	??_main
   325  07B1                     u267:
   326  07B1  0BF4               	decfsz	??_main,f
   327  07B2  2FB1               	goto	u267
   328  07B3  0BF5               	decfsz	??_main+1,f
   329  07B4  2FB1               	goto	u267
   330  07B5  2FB6               	nop2
   331  07B6                     l857:
   332                           
   333                           ;newmain.c: 151:             SPI_Write(1, 0xAA);
   334  07B6  30AA               	movlw	170
   335  07B7  00F4               	movwf	??_main
   336  07B8  0874               	movf	??_main,w
   337  07B9  00F0               	movwf	SPI_Write@Tvalue
   338  07BA  3001               	movlw	1
   339  07BB  120A  118A  2726  120A  118A  	fcall	_SPI_Write
   340  07C0                     l859:
   341                           
   342                           ;newmain.c: 152:             SPI_Write(2, 0xFF);
   343  07C0  30FF               	movlw	255
   344  07C1  00F4               	movwf	??_main
   345  07C2  0874               	movf	??_main,w
   346  07C3  00F0               	movwf	SPI_Write@Tvalue
   347  07C4  3002               	movlw	2
   348  07C5  120A  118A  2726  120A  118A  	fcall	_SPI_Write
   349  07CA                     l861:
   350                           
   351                           ;newmain.c: 154:         if(PORTDbits.RD1 == 0)
   352  07CA  1283               	bcf	3,5	;RP0=0, select bank0
   353  07CB  1303               	bcf	3,6	;RP1=0, select bank0
   354  07CC  1888               	btfsc	8,1	;volatile
   355  07CD  2FCF               	goto	u241
   356  07CE  2FD0               	goto	u240
   357  07CF                     u241:
   358  07CF  2FE2               	goto	l867
   359  07D0                     u240:
   360  07D0                     l863:
   361                           
   362                           ;newmain.c: 155:         {;newmain.c: 156:             _delay((unsigned long)((20)*(2000
      +                          0000/4000.0)));
   363  07D0  3082               	movlw	130
   364  07D1  00F5               	movwf	??_main+1
   365  07D2  30DD               	movlw	221
   366  07D3  00F4               	movwf	??_main
   367  07D4                     u277:
   368  07D4  0BF4               	decfsz	??_main,f
   369  07D5  2FD4               	goto	u277
   370  07D6  0BF5               	decfsz	??_main+1,f
   371  07D7  2FD4               	goto	u277
   372  07D8  2FD9               	nop2
   373  07D9                     l865:
   374                           
   375                           ;newmain.c: 157:             PORTA = SPI_Read_Return(1);
   376  07D9  3001               	movlw	1
   377  07DA  120A  118A  275D  120A  118A  	fcall	_SPI_Read_Return
   378  07DF  1283               	bcf	3,5	;RP0=0, select bank0
   379  07E0  1303               	bcf	3,6	;RP1=0, select bank0
   380  07E1  0085               	movwf	5	;volatile
   381  07E2                     l867:
   382                           
   383                           ;newmain.c: 159:         if(PORTDbits.RD2 == 0)
   384  07E2  1908               	btfsc	8,2	;volatile
   385  07E3  2FE5               	goto	u251
   386  07E4  2FE6               	goto	u250
   387  07E5                     u251:
   388  07E5  2FA7               	goto	l853
   389  07E6                     u250:
   390  07E6                     l869:
   391                           
   392                           ;newmain.c: 160:         {;newmain.c: 161:             _delay((unsigned long)((20)*(2000
      +                          0000/4000.0)));
   393  07E6  3082               	movlw	130
   394  07E7  00F5               	movwf	??_main+1
   395  07E8  30DD               	movlw	221
   396  07E9  00F4               	movwf	??_main
   397  07EA                     u287:
   398  07EA  0BF4               	decfsz	??_main,f
   399  07EB  2FEA               	goto	u287
   400  07EC  0BF5               	decfsz	??_main+1,f
   401  07ED  2FEA               	goto	u287
   402  07EE  2FEF               	nop2
   403  07EF                     l871:
   404                           
   405                           ;newmain.c: 162:             PORTA = SPI_Read_Return(2);
   406  07EF  3002               	movlw	2
   407  07F0  120A  118A  275D  120A  118A  	fcall	_SPI_Read_Return
   408  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   409  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   410  07F7  0085               	movwf	5	;volatile
   411  07F8  2FA7               	goto	l853
   412  07F9  120A  118A  2800   	ljmp	start
   413  07FC                     __end_of_main:
   414                           
   415                           	psect	text1
   416  0726                     __ptext1:	
   417 ;; *************** function _SPI_Write *****************
   418 ;; Defined at:
   419 ;;		line 97 in file "newmain.c"
   420 ;; Parameters:    Size  Location     Type
   421 ;;  SLAVE           1    wreg     unsigned char 
   422 ;;  Tvalue          1    0[COMMON] unsigned char 
   423 ;; Auto vars:     Size  Location     Type
   424 ;;  SLAVE           1    3[COMMON] unsigned char 
   425 ;;  xoaBF           1    0        unsigned char 
   426 ;; Return value:  Size  Location     Type
   427 ;;                  1    wreg      void 
   428 ;; Registers used:
   429 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   435 ;;      Params:         1       0       0       0       0
   436 ;;      Locals:         1       0       0       0       0
   437 ;;      Temps:          2       0       0       0       0
   438 ;;      Totals:         4       0       0       0       0
   439 ;;Total ram usage:        4 bytes
   440 ;; Hardware stack levels used: 1
   441 ;; This function calls:
   442 ;;		Nothing
   443 ;; This function is called by:
   444 ;;		_main
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448                           
   449                           ;psect for function _SPI_Write
   450  0726                     _SPI_Write:
   451                           
   452                           ;incstack = 0
   453                           ; Regs used in _SPI_Write: [wreg-fsr0h+status,2+status,0]
   454                           ;SPI_Write@SLAVE stored from wreg
   455  0726  00F3               	movwf	SPI_Write@SLAVE
   456  0727                     l833:
   457                           
   458                           ;newmain.c: 97: void SPI_Write(unsigned char SLAVE, unsigned char Tvalue);newmain.c: 98:
      +                           {;newmain.c: 99:     unsigned char xoaBF;;newmain.c: 100:     switch(SLAVE)
   459  0727  2F30               	goto	l837
   460  0728                     l73:	
   461                           ;newmain.c: 101:     {;newmain.c: 102:         case 1: PORTBbits.RB0 = 0;
   462                           
   463  0728  1283               	bcf	3,5	;RP0=0, select bank0
   464  0729  1303               	bcf	3,6	;RP1=0, select bank0
   465  072A  1006               	bcf	6,0	;volatile
   466                           
   467                           ;newmain.c: 103:         break;
   468  072B  2F40               	goto	l76
   469  072C                     l75:	
   470                           ;newmain.c: 104:         case 2: PORTBbits.RB1 = 0;
   471                           
   472  072C  1283               	bcf	3,5	;RP0=0, select bank0
   473  072D  1303               	bcf	3,6	;RP1=0, select bank0
   474  072E  1086               	bcf	6,1	;volatile
   475                           
   476                           ;newmain.c: 105:         break;
   477  072F  2F40               	goto	l76
   478  0730                     l837:
   479  0730  0873               	movf	SPI_Write@SLAVE,w
   480  0731  00F1               	movwf	??_SPI_Write
   481  0732  01F2               	clrf	??_SPI_Write+1
   482                           
   483                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   484                           ; Switch size 1, requested type "simple"
   485                           ; Number of cases is 1, Range of values is 0 to 0
   486                           ; switch strategies available:
   487                           ; Name         Instructions Cycles
   488                           ; simple_byte            4     3 (average)
   489                           ; direct_byte           11     8 (fixed)
   490                           ; jumptable            260     6 (fixed)
   491                           ;	Chosen strategy is simple_byte
   492  0733  0872               	movf	??_SPI_Write+1,w
   493  0734  3A00               	xorlw	0	; case 0
   494  0735  1903               	skipnz
   495  0736  2F38               	goto	l913
   496  0737  2F40               	goto	l76
   497  0738                     l913:
   498                           
   499                           ; Switch size 1, requested type "simple"
   500                           ; Number of cases is 2, Range of values is 1 to 2
   501                           ; switch strategies available:
   502                           ; Name         Instructions Cycles
   503                           ; simple_byte            7     4 (average)
   504                           ; direct_byte           17    11 (fixed)
   505                           ; jumptable            263     9 (fixed)
   506                           ;	Chosen strategy is simple_byte
   507  0738  0871               	movf	??_SPI_Write,w
   508  0739  3A01               	xorlw	1	; case 1
   509  073A  1903               	skipnz
   510  073B  2F28               	goto	l73
   511  073C  3A03               	xorlw	3	; case 2
   512  073D  1903               	skipnz
   513  073E  2F2C               	goto	l75
   514  073F  2F40               	goto	l76
   515  0740                     l76:
   516  0740  1283               	bcf	3,5	;RP0=0, select bank0
   517  0741  1303               	bcf	3,6	;RP1=0, select bank0
   518  0742  1907               	btfsc	7,2	;volatile
   519  0743  2F45               	goto	u191
   520  0744  2F46               	goto	u190
   521  0745                     u191:
   522  0745  2F40               	goto	l76
   523  0746                     u190:
   524  0746                     l78:
   525                           
   526                           ;newmain.c: 109:     if(SSPSTATbits.BF == 1)
   527  0746  1683               	bsf	3,5	;RP0=1, select bank1
   528  0747  1303               	bcf	3,6	;RP1=0, select bank1
   529  0748  1C14               	btfss	20,0	;volatile
   530  0749  2F4B               	goto	u201
   531  074A  2F4C               	goto	u200
   532  074B                     u201:
   533  074B  2F4F               	goto	l79
   534  074C                     u200:
   535  074C                     l839:
   536  074C  1283               	bcf	3,5	;RP0=0, select bank0
   537  074D  1303               	bcf	3,6	;RP1=0, select bank0
   538  074E  0813               	movf	19,w	;volatile
   539  074F                     l79:
   540                           
   541                           ;newmain.c: 111:     SSPBUF = Tvalue;
   542  074F  0870               	movf	SPI_Write@Tvalue,w
   543  0750  1283               	bcf	3,5	;RP0=0, select bank0
   544  0751  0093               	movwf	19	;volatile
   545  0752                     l80:	
   546                           ;newmain.c: 112:     while(!PIR1bits.SSPIF);
   547                           
   548  0752  1D8C               	btfss	12,3	;volatile
   549  0753  2F55               	goto	u211
   550  0754  2F56               	goto	u210
   551  0755                     u211:
   552  0755  2F52               	goto	l80
   553  0756                     u210:
   554  0756                     l83:
   555  0756  1D07               	btfss	7,2	;volatile
   556  0757  2F59               	goto	u221
   557  0758  2F5A               	goto	u220
   558  0759                     u221:
   559  0759  2F56               	goto	l83
   560  075A                     u220:
   561  075A                     l85:
   562                           
   563                           ;newmain.c: 115:     PORTBbits.RB0 = 1;
   564  075A  1406               	bsf	6,0	;volatile
   565                           
   566                           ;newmain.c: 116:     PORTBbits.RB1 = 1;
   567  075B  1486               	bsf	6,1	;volatile
   568  075C                     l86:
   569  075C  0008               	return
   570  075D                     __end_of_SPI_Write:
   571                           
   572                           	psect	text2
   573  075D                     __ptext2:	
   574 ;; *************** function _SPI_Read_Return *****************
   575 ;; Defined at:
   576 ;;		line 74 in file "newmain.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;  SLAVE           1    wreg     unsigned char 
   579 ;; Auto vars:     Size  Location     Type
   580 ;;  SLAVE           1    2[COMMON] unsigned char 
   581 ;;  Rvalue          1    3[COMMON] unsigned char 
   582 ;; Return value:  Size  Location     Type
   583 ;;                  1    wreg      unsigned char 
   584 ;; Registers used:
   585 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   586 ;; Tracked objects:
   587 ;;		On entry : 0/0
   588 ;;		On exit  : 0/0
   589 ;;		Unchanged: 0/0
   590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   591 ;;      Params:         0       0       0       0       0
   592 ;;      Locals:         2       0       0       0       0
   593 ;;      Temps:          2       0       0       0       0
   594 ;;      Totals:         4       0       0       0       0
   595 ;;Total ram usage:        4 bytes
   596 ;; Hardware stack levels used: 1
   597 ;; This function calls:
   598 ;;		Nothing
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           
   605                           ;psect for function _SPI_Read_Return
   606  075D                     _SPI_Read_Return:
   607                           
   608                           ;incstack = 0
   609                           ; Regs used in _SPI_Read_Return: [wreg-fsr0h+status,2+status,0]
   610                           ;SPI_Read_Return@SLAVE stored from wreg
   611  075D  00F2               	movwf	SPI_Read_Return@SLAVE
   612  075E                     l707:
   613                           
   614                           ;newmain.c: 74: unsigned char SPI_Read_Return(unsigned char SLAVE);newmain.c: 75: {;newm
      +                          ain.c: 76:     unsigned char Rvalue;;newmain.c: 77:     switch(SLAVE)
   615  075E  2F67               	goto	l711
   616  075F                     l54:	
   617                           ;newmain.c: 78:     {;newmain.c: 79:         case 1: PORTBbits.RB0 = 0;
   618                           
   619  075F  1283               	bcf	3,5	;RP0=0, select bank0
   620  0760  1303               	bcf	3,6	;RP1=0, select bank0
   621  0761  1006               	bcf	6,0	;volatile
   622                           
   623                           ;newmain.c: 80:         break;
   624  0762  2F77               	goto	l57
   625  0763                     l56:	
   626                           ;newmain.c: 81:         case 2: PORTBbits.RB1 = 0;
   627                           
   628  0763  1283               	bcf	3,5	;RP0=0, select bank0
   629  0764  1303               	bcf	3,6	;RP1=0, select bank0
   630  0765  1086               	bcf	6,1	;volatile
   631                           
   632                           ;newmain.c: 82:         break;
   633  0766  2F77               	goto	l57
   634  0767                     l711:
   635  0767  0872               	movf	SPI_Read_Return@SLAVE,w
   636  0768  00F0               	movwf	??_SPI_Read_Return
   637  0769  01F1               	clrf	??_SPI_Read_Return+1
   638                           
   639                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   640                           ; Switch size 1, requested type "simple"
   641                           ; Number of cases is 1, Range of values is 0 to 0
   642                           ; switch strategies available:
   643                           ; Name         Instructions Cycles
   644                           ; simple_byte            4     3 (average)
   645                           ; direct_byte           11     8 (fixed)
   646                           ; jumptable            260     6 (fixed)
   647                           ;	Chosen strategy is simple_byte
   648  076A  0871               	movf	??_SPI_Read_Return+1,w
   649  076B  3A00               	xorlw	0	; case 0
   650  076C  1903               	skipnz
   651  076D  2F6F               	goto	l915
   652  076E  2F77               	goto	l57
   653  076F                     l915:
   654                           
   655                           ; Switch size 1, requested type "simple"
   656                           ; Number of cases is 2, Range of values is 1 to 2
   657                           ; switch strategies available:
   658                           ; Name         Instructions Cycles
   659                           ; simple_byte            7     4 (average)
   660                           ; direct_byte           17    11 (fixed)
   661                           ; jumptable            263     9 (fixed)
   662                           ;	Chosen strategy is simple_byte
   663  076F  0870               	movf	??_SPI_Read_Return,w
   664  0770  3A01               	xorlw	1	; case 1
   665  0771  1903               	skipnz
   666  0772  2F5F               	goto	l54
   667  0773  3A03               	xorlw	3	; case 2
   668  0774  1903               	skipnz
   669  0775  2F63               	goto	l56
   670  0776  2F77               	goto	l57
   671  0777                     l57:
   672  0777  1283               	bcf	3,5	;RP0=0, select bank0
   673  0778  1303               	bcf	3,6	;RP1=0, select bank0
   674  0779  1907               	btfsc	7,2	;volatile
   675  077A  2F7C               	goto	u11
   676  077B  2F7D               	goto	u10
   677  077C                     u11:
   678  077C  2F77               	goto	l57
   679  077D                     u10:
   680  077D                     l713:
   681                           
   682                           ;newmain.c: 86:     SSPBUF = 0x00;
   683  077D  0193               	clrf	19	;volatile
   684  077E                     l60:	
   685                           ;newmain.c: 87:     while(!PIR1bits.SSPIF);
   686                           
   687  077E  1D8C               	btfss	12,3	;volatile
   688  077F  2F81               	goto	u21
   689  0780  2F82               	goto	u20
   690  0781                     u21:
   691  0781  2F7E               	goto	l60
   692  0782                     u20:
   693  0782                     l63:
   694  0782  1683               	bsf	3,5	;RP0=1, select bank1
   695  0783  1303               	bcf	3,6	;RP1=0, select bank1
   696  0784  1C14               	btfss	20,0	;volatile
   697  0785  2F87               	goto	u31
   698  0786  2F88               	goto	u30
   699  0787                     u31:
   700  0787  2F82               	goto	l63
   701  0788                     u30:
   702  0788                     l715:
   703                           
   704                           ;newmain.c: 89:     Rvalue = SSPBUF;
   705  0788  1283               	bcf	3,5	;RP0=0, select bank0
   706  0789  1303               	bcf	3,6	;RP1=0, select bank0
   707  078A  0813               	movf	19,w	;volatile
   708  078B  00F0               	movwf	??_SPI_Read_Return
   709  078C  0870               	movf	??_SPI_Read_Return,w
   710  078D  00F3               	movwf	SPI_Read_Return@Rvalue
   711  078E                     l66:	
   712                           ;newmain.c: 90:     while(PORTCbits.RC2 == 0);
   713                           
   714  078E  1D07               	btfss	7,2	;volatile
   715  078F  2F91               	goto	u41
   716  0790  2F92               	goto	u40
   717  0791                     u41:
   718  0791  2F8E               	goto	l66
   719  0792                     u40:
   720  0792                     l68:
   721                           
   722                           ;newmain.c: 92:     PORTBbits.RB0 = 1;
   723  0792  1406               	bsf	6,0	;volatile
   724                           
   725                           ;newmain.c: 93:     PORTBbits.RB1 = 1;
   726  0793  1486               	bsf	6,1	;volatile
   727  0794                     l717:
   728                           
   729                           ;newmain.c: 94:     return Rvalue;
   730  0794  0873               	movf	SPI_Read_Return@Rvalue,w
   731  0795                     l69:
   732  0795  0008               	return
   733  0796                     __end_of_SPI_Read_Return:
   734                           
   735                           	psect	text3
   736  070B                     __ptext3:	
   737 ;; *************** function _SPI_Init *****************
   738 ;; Defined at:
   739 ;;		line 27 in file "newmain.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		None
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   753 ;;      Params:         0       0       0       0       0
   754 ;;      Locals:         0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0
   756 ;;      Totals:         0       0       0       0       0
   757 ;;Total ram usage:        0 bytes
   758 ;; Hardware stack levels used: 1
   759 ;; This function calls:
   760 ;;		Nothing
   761 ;; This function is called by:
   762 ;;		_main
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           
   767                           ;psect for function _SPI_Init
   768  070B                     _SPI_Init:
   769  070B                     l705:	
   770                           ;incstack = 0
   771                           ; Regs used in _SPI_Init: []
   772                           
   773                           
   774                           ;newmain.c: 30:     TRISBbits.TRISB0 = 0;
   775  070B  1683               	bsf	3,5	;RP0=1, select bank1
   776  070C  1303               	bcf	3,6	;RP1=0, select bank1
   777  070D  1006               	bcf	6,0	;volatile
   778                           
   779                           ;newmain.c: 31:     TRISBbits.TRISB1 = 0;
   780  070E  1086               	bcf	6,1	;volatile
   781                           
   782                           ;newmain.c: 32:     PORTBbits.RB0 = 1;
   783  070F  1283               	bcf	3,5	;RP0=0, select bank0
   784  0710  1303               	bcf	3,6	;RP1=0, select bank0
   785  0711  1406               	bsf	6,0	;volatile
   786                           
   787                           ;newmain.c: 33:     PORTBbits.RB1 = 1;
   788  0712  1486               	bsf	6,1	;volatile
   789                           
   790                           ;newmain.c: 35:     TRISCbits.TRISC2 = 1;
   791  0713  1683               	bsf	3,5	;RP0=1, select bank1
   792  0714  1303               	bcf	3,6	;RP1=0, select bank1
   793  0715  1507               	bsf	7,2	;volatile
   794                           
   795                           ;newmain.c: 36:     TRISCbits.TRISC3 = 0;
   796  0716  1187               	bcf	7,3	;volatile
   797                           
   798                           ;newmain.c: 37:     TRISCbits.TRISC4 = 1;
   799  0717  1607               	bsf	7,4	;volatile
   800                           
   801                           ;newmain.c: 38:     TRISCbits.TRISC5 = 0;
   802  0718  1287               	bcf	7,5	;volatile
   803                           
   804                           ;newmain.c: 40:     SSPSTATbits.SMP = 0;
   805  0719  1394               	bcf	20,7	;volatile
   806                           
   807                           ;newmain.c: 41:     SSPSTATbits.CKE = 0;
   808  071A  1314               	bcf	20,6	;volatile
   809                           
   810                           ;newmain.c: 43:     SSPCONbits.WCOL = 0;
   811  071B  1283               	bcf	3,5	;RP0=0, select bank0
   812  071C  1303               	bcf	3,6	;RP1=0, select bank0
   813  071D  1394               	bcf	20,7	;volatile
   814                           
   815                           ;newmain.c: 44:     SSPCONbits.SSPOV = 0;
   816  071E  1314               	bcf	20,6	;volatile
   817                           
   818                           ;newmain.c: 45:     SSPCONbits.SSPEN = 1;
   819  071F  1694               	bsf	20,5	;volatile
   820                           
   821                           ;newmain.c: 46:     SSPCONbits.CKP = 0;
   822  0720  1214               	bcf	20,4	;volatile
   823                           
   824                           ;newmain.c: 47:     SSPCONbits.SSPM3 = 0;
   825  0721  1194               	bcf	20,3	;volatile
   826                           
   827                           ;newmain.c: 48:     SSPCONbits.SSPM2 = 0;
   828  0722  1114               	bcf	20,2	;volatile
   829                           
   830                           ;newmain.c: 49:     SSPCONbits.SSPM1 = 1;
   831  0723  1494               	bsf	20,1	;volatile
   832                           
   833                           ;newmain.c: 50:     SSPCONbits.SSPM0 = 0;
   834  0724  1014               	bcf	20,0	;volatile
   835  0725                     l31:
   836  0725  0008               	return
   837  0726                     __end_of_SPI_Init:
   838  007E                     btemp	set	126	;btemp
   839  007E                     wtemp0	set	126
   840                           
   841                           	psect	config
   842                           
   843                           ;Config register CONFIG @ 0x2007
   844                           ;	Oscillator Selection bits
   845                           ;	FOSC = HS, HS oscillator
   846                           ;	Watchdog Timer Enable bit
   847                           ;	WDTE = OFF, WDT disabled
   848                           ;	Power-up Timer Enable bit
   849                           ;	PWRTE = OFF, PWRT disabled
   850                           ;	Brown-out Reset Enable bit
   851                           ;	BOREN = OFF, BOR disabled
   852                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   853                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   854                           ;	Data EEPROM Memory Code Protection bit
   855                           ;	CPD = OFF, Data EEPROM code protection off
   856                           ;	Flash Program Memory Write Enable bits
   857                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   858                           ;	In-Circuit Debugger Mode bit
   859                           ;	DEBUG = 0x1, unprogrammed default
   860                           ;	Flash Program Memory Code Protection bit
   861                           ;	CP = OFF, Code protection off
   862  2007                     	org	8199
   863  2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SPI_Read_Return
    _main->_SPI_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     227
                                              4 COMMON     2     2      0
                           _SPI_Init
                    _SPI_Read_Return
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (1) _SPI_Write                                            5     4      1     197
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _SPI_Read_Return                                      4     4      0      30
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _SPI_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_Init
   _SPI_Read_Return
   _SPI_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Jan 28 09:11:14 2022

             _SSPSTATbits 0094                        l31 0725                        l60 077E  
                      l54 075F                        l63 0782                        l56 0763  
                      l80 0752                        l57 0777                        l73 0728  
                      l66 078E                        l83 0756                        l75 072C  
                      l68 0792                        l76 0740                        l69 0795  
                      l85 075A                        l86 075C                        l78 0746  
                      l79 074F                        u10 077D                        u11 077C  
                      u20 0782                        u21 0781                        u30 0788  
                      u31 0787                        u40 0792                        u41 0791  
                     l711 0767                       l705 070B                       l713 077D  
                     l715 0788                       l707 075E                       l717 0794  
                     l913 0738                       l833 0727                       l915 076F  
                     l851 07A2                       l837 0730                       l861 07CA  
                     l853 07A7                       l845 0796                       l839 074C  
                     l871 07EF                       l863 07D0                       l855 07AD  
                     l847 079A                       l865 07D9                       l857 07B6  
                     l849 079B                       l867 07E2                       l859 07C0  
                     l869 07E6                       u200 074C                       u201 074B  
                     u210 0756                       u211 0755                       u220 075A  
                     u221 0759                       u230 07AD                       u231 07AC  
                     u240 07D0                       u241 07CF                       u250 07E6  
                     u251 07E5                       u190 0746                       u191 0745  
                     u267 07B1                       u277 07D4                       u287 07EA  
                    _main 0796                      btemp 007E                      start 0000  
                   ?_main 0070                     _PORTA 0005                     _TRISA 0085  
                   _TRISD 0088          __end_of_SPI_Init 0726   __end_of_SPI_Read_Return 0796  
                   status 0003                     wtemp0 007E        __size_of_SPI_Write 0037  
         __initialization 07FC              __end_of_main 07FC                    ??_main 0074  
                  _ADCON1 009F                    _SSPBUF 0013         __end_of_SPI_Write 075D  
        ?_SPI_Read_Return 0070   __end_of__initialization 07FC            __pcstackCOMMON 0070  
               ?_SPI_Init 0070                __pmaintext 0796                ??_SPI_Init 0070  
                 __ptext1 0726                   __ptext2 075D                   __ptext3 070B  
    SPI_Read_Return@SLAVE 0072      end_of_initialization 07FC                 _PORTBbits 0006  
               _PORTCbits 0007                 _PORTDbits 0008                 _TRISBbits 0086  
               _TRISCbits 0087                 _SPI_Write 0726         __size_of_SPI_Init 001B  
     start_initialization 07FC                ?_SPI_Write 0070           SPI_Write@Tvalue 0070  
__size_of_SPI_Read_Return 0039                 ___latbits 0002               ??_SPI_Write 0071  
                _PIR1bits 000C                  _SPI_Init 070B         ??_SPI_Read_Return 0070  
          SPI_Write@SLAVE 0073             __size_of_main 0066     SPI_Read_Return@Rvalue 0073  
              _SSPCONbits 0014           _SPI_Read_Return 075D  
